{"ast":null,"code":"import * as React from 'react';\nimport * as ol from 'openlayers';\nimport { Util } from \"../util\";\nimport { Map } from '../map';\nexport class Select extends React.Component {\n  constructor(props) {\n    super(props);\n    this.interaction = void 0;\n    this.options = {\n      addCondition: undefined,\n      condition: undefined,\n      layers: undefined,\n      style: undefined,\n      removeCondition: undefined,\n      toggleCondition: undefined,\n      multi: undefined,\n      features: undefined,\n      filter: undefined,\n      wrapX: undefined,\n      hitTolerance: undefined\n    };\n    this.events = {\n      'change': undefined,\n      'change:active': undefined,\n      'propertychange': undefined,\n      'select': undefined\n    };\n  }\n\n  render() {\n    return null;\n  }\n\n  componentDidMount() {\n    if (this.props.instance) {\n      this.interaction = this.props.instance;\n    } else {\n      let options = Util.getOptions(Object['assign'](this.options, this.props));\n      this.interaction = new ol.interaction.Select(options);\n    }\n\n    this.context.mapComp.interactions.push(this.interaction);\n    let olEvents = Util.getEvents(this.events, this.props);\n\n    for (let eventName in olEvents) {\n      this.interaction.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps !== this.props) {\n      this.context.mapComp.map.removeInteraction(this.interaction);\n\n      if (this.props.instance) {\n        this.interaction = this.props.instance;\n      } else {\n        let options = Util.getOptions(Object['assign'](this.options, nextProps));\n        this.interaction = new ol.interaction.Select(options);\n      }\n\n      this.context.mapComp.map.addInteraction(this.interaction);\n      let olEvents = Util.getEvents(this.events, this.props);\n\n      for (let eventName in olEvents) {\n        this.interaction.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.context.mapComp.map.removeInteraction(this.interaction);\n  }\n\n}\nSelect['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/interactions/select.tsx"],"names":["React","ol","Util","Map","Select","Component","constructor","props","interaction","options","addCondition","undefined","condition","layers","style","removeCondition","toggleCondition","multi","features","filter","wrapX","hitTolerance","events","render","componentDidMount","instance","getOptions","Object","context","mapComp","interactions","push","olEvents","getEvents","eventName","on","componentWillReceiveProps","nextProps","map","removeInteraction","addInteraction","componentWillUnmount","PropTypes","instanceOf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ol from 'openlayers';\nimport {Util} from \"../util\";\nimport {Map} from '../map';\n\nexport class Select extends React.Component<any, any> {\n\n  interaction: ol.interaction.Select;\n\n  options: any = {\n    addCondition: undefined,\n    condition: undefined,\n    layers: undefined,\n    style: undefined,\n    removeCondition: undefined,\n    toggleCondition: undefined,\n    multi: undefined,\n    features: undefined,\n    filter: undefined,\n    wrapX: undefined,\n    hitTolerance: undefined\n  };\n\n  events: any = {\n    'change': undefined,\n    'change:active': undefined,\n    'propertychange': undefined,\n    'select': undefined\n  };\n\n  constructor(props) { super(props); }\n\n  render() { return null; }\n\n  componentDidMount () {\n    if (this.props.instance) {\n      this.interaction = this.props.instance;\n    } else {\n      let options = Util.getOptions(Object['assign'](this.options, this.props));\n      this.interaction = new ol.interaction.Select(options);\n    }\n    this.context.mapComp.interactions.push(this.interaction)\n    \n    let olEvents = Util.getEvents(this.events, this.props);\n    for(let eventName in olEvents) {\n      this.interaction.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if(nextProps !== this.props){\n      this.context.mapComp.map.removeInteraction(this.interaction);\n\n      if (this.props.instance) {\n        this.interaction = this.props.instance;\n      } else {\n        let options = Util.getOptions(Object['assign'](this.options, nextProps));\n        this.interaction = new ol.interaction.Select(options);\n      }\n      this.context.mapComp.map.addInteraction(this.interaction);\n\n      let olEvents = Util.getEvents(this.events, this.props);\n      for(let eventName in olEvents) {\n        this.interaction.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n  \n  componentWillUnmount () {\n    this.context.mapComp.map.removeInteraction(this.interaction);\n  }\n\n}\n\nSelect['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};\n"]},"metadata":{},"sourceType":"module"}