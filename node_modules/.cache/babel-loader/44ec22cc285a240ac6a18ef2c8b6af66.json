{"ast":null,"code":"import * as React from 'react';\nimport * as ol from 'openlayers';\nimport { Util } from \"../util\";\nimport { Map } from '../map';\nexport class Image extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layer = void 0;\n    this.options = {\n      opacity: undefined,\n      source: undefined,\n      visible: undefined,\n      extent: undefined,\n      minResolution: undefined,\n      maxResolution: undefined\n    };\n    this.events = {\n      'change': undefined,\n      'change:extent': undefined,\n      'change:gradient': undefined,\n      'change:maxResolution': undefined,\n      'change:minResolution': undefined,\n      'change:opacity': undefined,\n      'change:source': undefined,\n      'change:visible': undefined,\n      'change:zIndex': undefined,\n      'postcompose': undefined,\n      'precompose': undefined,\n      'propertychange': undefined,\n      'render': undefined\n    };\n  }\n\n  render() {\n    return null;\n  }\n\n  componentDidMount() {\n    let options = Util.getOptions(Object['assign'](this.options, this.props));\n    this.layer = new ol.layer.Image(options);\n\n    if (this.props.zIndex) {\n      this.layer.setZIndex(this.props.zIndex);\n    }\n\n    this.context.mapComp.layers.push(this.layer);\n    let olEvents = Util.getEvents(this.events, this.props);\n\n    for (let eventName in olEvents) {\n      this.layer.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps !== this.props) {\n      let options = Util.getOptions(Object.assign(this.options, this.props));\n      this.context.mapComp.map.removeLayer(this.layer);\n      this.layer = new ol.layer.Image(options);\n\n      if (this.props.zIndex) {\n        this.layer.setZIndex(this.props.zIndex);\n      }\n\n      this.context.mapComp.map.addLayer(this.layer);\n      let olEvents = Util.getEvents(this.events, this.props);\n\n      for (let eventName in olEvents) {\n        this.layer.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.context.mapComp.map.removeLayer(this.layer);\n  }\n\n}\nImage['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/layers/image.tsx"],"names":["React","ol","Util","Map","Image","Component","constructor","props","layer","options","opacity","undefined","source","visible","extent","minResolution","maxResolution","events","render","componentDidMount","getOptions","Object","zIndex","setZIndex","context","mapComp","layers","push","olEvents","getEvents","eventName","on","componentWillReceiveProps","nextProps","assign","map","removeLayer","addLayer","componentWillUnmount","PropTypes","instanceOf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ol from 'openlayers';\nimport {Util} from \"../util\";\nimport {Map} from '../map';\n\nexport class Image extends React.Component<any, any> {\n\n  layer: ol.layer.Image;\n\n  options: any = {\n    opacity: undefined,\n    source: undefined,\n    visible: undefined,\n    extent: undefined,\n    minResolution: undefined,\n    maxResolution: undefined\n  };\n\n  events: any = {\n    'change': undefined,\n    'change:extent': undefined,\n    'change:gradient': undefined,\n    'change:maxResolution': undefined,\n    'change:minResolution': undefined,\n    'change:opacity': undefined,\n    'change:source': undefined,\n    'change:visible': undefined,\n    'change:zIndex': undefined,\n    'postcompose': undefined,\n    'precompose': undefined,\n    'propertychange': undefined,\n    'render': undefined\n  };\n\n  constructor(props) { \n    super(props);\n  }\n\n  render() { return null; }\n\n  componentDidMount () {\n    let options = Util.getOptions(Object['assign'](this.options, this.props));\n    this.layer = new ol.layer.Image(options);\n    if(this.props.zIndex){\n      this.layer.setZIndex(this.props.zIndex);\n    }\n    this.context.mapComp.layers.push(this.layer);\n\n    let olEvents = Util.getEvents(this.events, this.props);\n    for(let eventName in olEvents) {\n      this.layer.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if(nextProps !== this.props){\n      let options = Util.getOptions(Object.assign(this.options, this.props));\n      this.context.mapComp.map.removeLayer(this.layer);\n      this.layer = new ol.layer.Image(options);\n      if(this.props.zIndex){\n        this.layer.setZIndex(this.props.zIndex);\n      }\n      this.context.mapComp.map.addLayer(this.layer);\n\n      let olEvents = Util.getEvents(this.events, this.props);\n      for(let eventName in olEvents) {\n        this.layer.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n  \n  componentWillUnmount () {\n    this.context.mapComp.map.removeLayer(this.layer);\n  }\n\n}\n\nImage['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};\n"]},"metadata":{},"sourceType":"module"}