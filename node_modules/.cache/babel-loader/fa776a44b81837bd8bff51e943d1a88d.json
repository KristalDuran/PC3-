{"ast":null,"code":"import * as React from 'react';\nimport * as ol from 'openlayers';\nimport { Util } from \"../util\";\nimport { Map } from '../map';\nexport class Heatmap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layer = void 0;\n    this.options = {\n      gradient: undefined,\n      radius: undefined,\n      blur: undefined,\n      shadow: undefined,\n      weight: undefined,\n      extent: undefined,\n      minResolution: undefined,\n      maxResolution: undefined,\n      opacity: undefined,\n      source: undefined,\n      visible: undefined\n    };\n    this.events = {\n      'change': undefined,\n      'change:blur': undefined,\n      'change:extent': undefined,\n      'change:gradient': undefined,\n      'change:maxResolution': undefined,\n      'change:minResolution': undefined,\n      'change:opacity': undefined,\n      'change:radius': undefined,\n      'change:source': undefined,\n      'change:visible': undefined,\n      'change:zIndex': undefined,\n      'postcompose': undefined,\n      'precompose': undefined,\n      'propertychange': undefined,\n      'render': undefined\n    };\n  }\n\n  render() {\n    return null;\n  }\n\n  componentDidMount() {\n    let options = Util.getOptions(Object['assign'](this.options, this.props));\n    this.layer = new ol.layer.Heatmap(options);\n\n    if (this.props.zIndex) {\n      this.layer.setZIndex(this.props.zIndex);\n    }\n\n    this.context.mapComp.layers.push(this.layer);\n    let olEvents = Util.getEvents(this.events, this.props);\n\n    for (let eventName in olEvents) {\n      this.layer.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps !== this.props) {\n      let options = Util.getOptions(Object.assign(this.options, this.props));\n      this.context.mapComp.map.removeLayer(this.layer);\n      this.layer = new ol.layer.Heatmap(options);\n\n      if (this.props.zIndex) {\n        this.layer.setZIndex(this.props.zIndex);\n      }\n\n      this.context.mapComp.map.addLayer(this.layer);\n      let olEvents = Util.getEvents(this.events, this.props);\n\n      for (let eventName in olEvents) {\n        this.layer.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.context.mapComp.map.removeLayer(this.layer);\n  }\n\n}\nHeatmap['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/layers/heatmap.tsx"],"names":["React","ol","Util","Map","Heatmap","Component","constructor","props","layer","options","gradient","undefined","radius","blur","shadow","weight","extent","minResolution","maxResolution","opacity","source","visible","events","render","componentDidMount","getOptions","Object","zIndex","setZIndex","context","mapComp","layers","push","olEvents","getEvents","eventName","on","componentWillReceiveProps","nextProps","assign","map","removeLayer","addLayer","componentWillUnmount","PropTypes","instanceOf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ol from 'openlayers';\nimport { Util } from \"../util\";\nimport { Map } from '../map';\n\nexport class Heatmap extends React.Component<any, any> {\n\n  layer: ol.layer.Heatmap;\n\n  options: any = {\n    gradient: undefined,\n    radius: undefined,\n    blur: undefined,\n    shadow: undefined,\n    weight: undefined,\n    extent: undefined,\n    minResolution: undefined,\n    maxResolution: undefined,\n    opacity: undefined,\n    source: undefined,\n    visible: undefined\n  };\n\n  events: any = {\n    'change': undefined,\n    'change:blur': undefined,\n    'change:extent': undefined,\n    'change:gradient': undefined,\n    'change:maxResolution': undefined,\n    'change:minResolution': undefined,\n    'change:opacity': undefined,\n    'change:radius': undefined,\n    'change:source': undefined,\n    'change:visible': undefined,\n    'change:zIndex': undefined,\n    'postcompose': undefined,\n    'precompose': undefined,\n    'propertychange': undefined,\n    'render': undefined\n  };\n\n  constructor(props) { super(props); }\n\n  render() { return null; }\n\n  componentDidMount() {\n    let options = Util.getOptions(Object['assign'](this.options, this.props));\n    this.layer = new ol.layer.Heatmap(options);\n    if(this.props.zIndex){\n      this.layer.setZIndex(this.props.zIndex);\n    }\n    this.context.mapComp.layers.push(this.layer);\n\n    let olEvents = Util.getEvents(this.events, this.props);\n    for (let eventName in olEvents) {\n      this.layer.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps !== this.props) {\n      let options = Util.getOptions(Object.assign(this.options, this.props));\n      this.context.mapComp.map.removeLayer(this.layer);\n      this.layer = new ol.layer.Heatmap(options);\n      if (this.props.zIndex) {\n        this.layer.setZIndex(this.props.zIndex);\n      }\n      this.context.mapComp.map.addLayer(this.layer);\n\n      let olEvents = Util.getEvents(this.events, this.props);\n      for (let eventName in olEvents) {\n        this.layer.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.context.mapComp.map.removeLayer(this.layer);\n  }\n\n}\n\nHeatmap['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};\n"]},"metadata":{},"sourceType":"module"}