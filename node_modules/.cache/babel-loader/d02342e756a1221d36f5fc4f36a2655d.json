{"ast":null,"code":"import { click, legendRendering } from '../index';\nimport { Rect, measureText, PathOption, textTrim, removeClass, querySelector, getTemplateFunction, maintainStyleClass, getValueFromObject } from '../utils/helper';\nimport { RectOption, Size, TextOption, Point, renderTextElement, drawSymbol, checkPropertyPath, getElement } from '../utils/helper';\nimport { isNullOrUndefined, Browser, EventHandler, remove, extend } from '@syncfusion/ej2-base';\n/**\n * Legend module is used to render legend for the maps\n */\n\nvar Legend =\n/** @class */\nfunction () {\n  function Legend(maps) {\n    this.legendBorderRect = new Rect(0, 0, 0, 0);\n    /**\n     * @private\n     */\n\n    this.totalPages = [];\n    this.page = 0;\n    /**\n     * @private\n     */\n\n    this.currentPage = 0;\n    this.legendItemRect = new Rect(0, 0, 0, 0);\n    this.heightIncrement = 0;\n    this.widthIncrement = 0;\n    this.textMaxWidth = 0;\n    this.shapeHighlightCollection = [];\n    this.legendHighlightCollection = [];\n    this.shapePreviousColor = [];\n    this.selectedNonLegendShapes = [];\n    this.shapeToggled = true;\n    this.legendElement = null;\n    this.maps = maps;\n    this.addEventListener();\n  }\n  /**\n   * To calculate legend bounds and draw the legend shape and text.\n   */\n\n\n  Legend.prototype.renderLegend = function () {\n    this.legendRenderingCollections = [];\n    this.legendCollection = [];\n    this.totalPages = [];\n    this.widthIncrement = 0;\n    this.heightIncrement = 0;\n    this.defsElement = this.maps.renderer.createDefs();\n    this.maps.svgObject.appendChild(this.defsElement);\n    this.calculateLegendBounds();\n    this.drawLegend();\n  };\n  /* tslint:disable-next-line:max-func-body-length */\n\n\n  Legend.prototype.calculateLegendBounds = function () {\n    var _this = this;\n\n    var map = this.maps;\n    var legend = map.legendSettings;\n    this.legendCollection = [];\n    var spacing = 10;\n    var leftPadding = 10;\n    var topPadding = map.mapAreaRect.y;\n    this.legendRenderingCollections = [];\n    Array.prototype.forEach.call(map.layersCollection, function (layer, layerIndex) {\n      if (!isNullOrUndefined(layer.shapeData)) {\n        var layerData = layer.shapeData['features'];\n        var dataPath = layer.shapeDataPath;\n        var propertyPath = layer.shapePropertyPath;\n        var dataSource = layer.dataSource;\n        var colorValuePath = void 0;\n        var colorMapping = void 0;\n\n        if (legend.type === 'Layers' && layer.visible) {\n          colorValuePath = layer.shapeSettings.colorValuePath;\n          colorMapping = layer.shapeSettings.colorMapping;\n\n          _this.getLegends(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n        } else if (legend.type === 'Bubbles') {\n          for (var _i = 0, _a = layer.bubbleSettings; _i < _a.length; _i++) {\n            var bubble = _a[_i];\n\n            if (bubble.visible) {\n              colorValuePath = bubble.colorValuePath;\n              colorMapping = bubble.colorMapping;\n              dataSource = bubble.dataSource;\n\n              _this.getLegends(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n            }\n          }\n        } else {\n          _this.getMarkersLegendCollections(layerIndex, layer.markerSettings);\n        }\n      }\n    });\n\n    if (this.legendCollection.length > 0) {\n      for (var i = 0; i < this.legendCollection.length; i++) {\n        var legendItem = this.legendCollection[i];\n        var eventArgs = {\n          name: legendRendering,\n          cancel: false,\n          fill: legendItem['fill'],\n          shape: legend.shape,\n          shapeBorder: legend.shapeBorder,\n          text: typeof legendItem['text'] === 'number' ? legendItem['text'].toString() : legendItem['text']\n        };\n        map.trigger('legendRendering', eventArgs);\n        legendItem['fill'] = eventArgs.fill;\n        legendItem['shape'] = eventArgs.shape;\n        legendItem['shapeBorder'] = eventArgs.shapeBorder;\n        legendItem['text'] = eventArgs.text;\n\n        if (eventArgs.cancel) {\n          this.legendCollection.splice(i, 1);\n          i--;\n        }\n      }\n    }\n\n    var defaultSize = 25;\n    var legendTitle = map.legendSettings.title.text;\n    var titleTextStyle = map.legendSettings.titleStyle;\n\n    if (this.legendCollection.length > 0) {\n      var legendMode = legend.mode;\n      var shapeX = 0;\n      var shapeY = 0;\n      var textX = 0;\n      var textY = 0;\n      var shapePadding = legend.shapePadding;\n      var textPadding = 10;\n      var shapeHeight = legend.shapeHeight;\n      var shapeWidth = legend.shapeWidth;\n      var shapeLocation = [];\n      var textLocation = [];\n      var legendRectCollection = [];\n      var location_1;\n      var position = legend.position;\n      var labelAction = legend.labelDisplayMode;\n      var arrangement = legend.orientation === 'None' ? position === 'Top' || position === 'Bottom' ? 'Horizontal' : 'Vertical' : legend.orientation;\n      var legendWidth = legend.width.length > 1 ? legend.width.indexOf('%') > -1 ? map.availableSize.width / 100 * parseInt(legend.width, 10) : parseInt(legend.width, 10) : null;\n      var legendHeight = legend.height.length > 1 ? legend.height.indexOf('%') > -1 ? map.availableSize.height / 100 * parseInt(legend.height, 10) : parseInt(legend.height, 10) : null;\n      var legendItemStartX_1;\n      var legendItemStartY_1;\n      var startX = 0;\n      var startY = 0;\n      var legendtitleSize = measureText(legendTitle, titleTextStyle);\n\n      if (legendMode === 'Interactive') {\n        var itemTextStyle = legend.textStyle;\n        var rectWidth = void 0;\n        var rectHeight = void 0;\n        var legendLength = this.legendCollection.length;\n        rectWidth = arrangement === 'Horizontal' ? isNullOrUndefined(legendWidth) ? map.mapAreaRect.width / legendLength : legendWidth / legendLength : isNullOrUndefined(legendWidth) ? defaultSize : legendWidth;\n        rectHeight = arrangement === 'Horizontal' ? isNullOrUndefined(legendHeight) ? defaultSize : legendHeight : isNullOrUndefined(legendHeight) ? map.mapAreaRect.height / legendLength : legendHeight / legendLength;\n        startX = 0;\n        startY = legendtitleSize.height + spacing;\n        var position_1 = legend.labelPosition;\n        var textX_1 = 0;\n        var textY_1 = 0;\n        var textPadding_1 = 10;\n        var itemStartX = 0;\n        var itemStartY = 0;\n        var maxTextHeight = 0;\n        var maxTextWidth = 0;\n\n        for (var i = 0; i < this.legendCollection.length; i++) {\n          startX = arrangement === 'Horizontal' ? startX + rectWidth : startX;\n          startY = arrangement === 'Horizontal' ? startY : startY + rectHeight;\n          var legendText = this.legendCollection[i]['text'];\n          var itemTextSize = new Size(0, 0);\n\n          if (labelAction === 'None') {\n            itemTextSize = measureText(legendText, itemTextStyle);\n          } else if (labelAction === 'Trim') {\n            legendText = textTrim(arrangement === 'Horizontal' ? rectWidth : rectHeight, legendText, itemTextStyle);\n            itemTextSize = measureText(legendText, itemTextStyle);\n          } else {\n            legendText = '';\n          }\n\n          maxTextHeight = Math.max(maxTextHeight, itemTextSize.height);\n          maxTextWidth = Math.max(maxTextWidth, itemTextSize.width);\n\n          if (itemTextSize.width > 0 && itemTextSize.height > 0) {\n            if (arrangement === 'Horizontal') {\n              textX_1 = startX + rectWidth / 2;\n              textY_1 = position_1 === 'After' ? startY + rectHeight + itemTextSize.height / 2 + textPadding_1 : startY - textPadding_1;\n            } else {\n              textX_1 = position_1 === 'After' ? startX - itemTextSize.width / 2 - textPadding_1 : startX + rectWidth + itemTextSize.width / 2 + textPadding_1;\n              textY_1 = startY + rectHeight / 2 + itemTextSize.height / 4;\n            }\n          }\n\n          if (i === 0) {\n            itemStartX = arrangement === 'Horizontal' ? startX : position_1 === 'After' ? textX_1 - itemTextSize.width / 2 : startX;\n            itemStartY = arrangement === 'Horizontal' ? position_1 === 'After' ? startY : textY_1 - itemTextSize.height / 2 : startY;\n\n            if (this.legendCollection.length === 1) {\n              legendWidth = arrangement === 'Horizontal' ? Math.abs(startX + rectWidth - itemStartX) : rectWidth + maxTextWidth + textPadding_1;\n              legendHeight = arrangement === 'Horizontal' ? rectHeight + maxTextHeight / 2 + textPadding_1 : Math.abs(startY + rectHeight - itemStartY);\n            }\n          } else if (i === this.legendCollection.length - 1) {\n            legendWidth = arrangement === 'Horizontal' ? Math.abs(startX + rectWidth - itemStartX) : rectWidth + maxTextWidth + textPadding_1;\n            legendHeight = arrangement === 'Horizontal' ? rectHeight + maxTextHeight / 2 + textPadding_1 : Math.abs(startY + rectHeight - itemStartY);\n          }\n\n          this.legendRenderingCollections.push({\n            fill: this.legendCollection[i]['fill'],\n            x: startX,\n            y: startY,\n            width: rectWidth,\n            height: rectHeight,\n            text: legendText,\n            textX: textX_1,\n            textY: textY_1,\n            textWidth: itemTextSize.width,\n            textHeight: itemTextSize.height,\n            shapeBorder: this.legendCollection[i]['shapeBorder']\n          });\n        }\n\n        if (this.legendCollection.length === 1) {\n          legendHeight = rectHeight;\n          legendWidth = rectWidth;\n        }\n\n        this.legendItemRect = {\n          x: itemStartX,\n          y: itemStartY,\n          width: legendWidth,\n          height: legendHeight\n        };\n      } else {\n        legendWidth = isNullOrUndefined(legendWidth) ? map.mapAreaRect.width : legendWidth;\n        legendHeight = isNullOrUndefined(legendHeight) ? map.mapAreaRect.height : legendHeight;\n        var j = 0;\n        this.page = 0;\n\n        for (var i = 0; i < this.legendCollection.length; i++) {\n          var legendItem = this.legendCollection[i];\n\n          if (isNullOrUndefined(this.totalPages[this.page])) {\n            this.totalPages[this.page] = {\n              Page: this.page + 1,\n              Collection: []\n            };\n          }\n\n          var legendTextSize = measureText(legendItem['text'], legend.textStyle);\n          this.textMaxWidth = Math.max(this.textMaxWidth, legendTextSize.width);\n\n          if (i === 0) {\n            startX = shapeX = leftPadding + shapeWidth / 2;\n            startY = shapeY = topPadding + legendtitleSize.height + (shapeHeight > legendTextSize.height ? shapeHeight / 2 : legendTextSize.height / 4);\n          } else {\n            var maxSize = legendTextSize.height > shapeHeight ? legendTextSize.height : shapeHeight;\n\n            if (arrangement === 'Horizontal') {\n              var prvePositionX = textLocation[j - 1].x + textLocation[j - 1].width + textPadding + shapeWidth;\n\n              if (prvePositionX + shapePadding + legendTextSize.width > legendWidth) {\n                var nextPositionY = (textLocation[j - 1].y > shapeLocation[j - 1].y + shapeHeight / 2 ? textLocation[j - 1].y : shapeLocation[j - 1].y + shapeHeight / 2) + topPadding;\n\n                if (nextPositionY + maxSize > legendHeight) {\n                  this.getPageChanged();\n                  j = 0;\n                  shapeLocation = [];\n                  textLocation = [];\n                  legendRectCollection = [];\n                  shapeX = startX;\n                  shapeY = startY;\n                } else {\n                  shapeX = shapeLocation[0].x;\n                  shapeY = nextPositionY + maxSize / 2;\n                }\n              } else {\n                shapeX = prvePositionX - shapeWidth / 2;\n                shapeY = shapeLocation[j - 1].y;\n              }\n            } else {\n              var prevPositionY = textLocation[j - 1].y > shapeLocation[j - 1].y + shapeHeight / 2 ? textLocation[j - 1].y : shapeLocation[j - 1].y + shapeHeight / 2;\n\n              if (prevPositionY + topPadding + maxSize > legendHeight) {\n                var nextPositionX = textLocation[j - 1].x + this.textMaxWidth + textPadding;\n\n                if (nextPositionX + shapePadding + legendTextSize.width > legendWidth) {\n                  shapeX = startX;\n                  shapeY = startY;\n                  legendRectCollection = [];\n                  textLocation = [];\n                  shapeLocation = [];\n                  this.getPageChanged();\n                  j = 0;\n                } else {\n                  shapeX = nextPositionX + shapeWidth / 2;\n                  shapeY = shapeLocation[0].y;\n                }\n              } else {\n                shapeX = shapeLocation[j - 1].x;\n                shapeY = prevPositionY + topPadding + shapeHeight / 2;\n              }\n            }\n          }\n\n          textX = shapeX + shapeWidth / 2 + shapePadding;\n          textY = shapeY + legendTextSize.height / 4;\n          shapeLocation.push({\n            x: shapeX,\n            y: shapeY\n          });\n          textLocation.push({\n            x: textX,\n            y: textY,\n            width: legendTextSize.width,\n            height: legendTextSize.height / 2\n          });\n          this.totalPages[this.page]['Collection'].push({\n            DisplayText: legendItem['text'],\n            ImageSrc: legendItem['imageSrc'],\n            Shape: {\n              x: shapeX,\n              y: shapeY\n            },\n            Text: {\n              x: textX,\n              y: textY\n            },\n            Fill: legendItem['fill'],\n            legendShape: legendItem['shape'],\n            shapeBorder: legendItem['shapeBorder'],\n            idIndex: i,\n            Rect: {\n              x: shapeLocation[j].x - shapeWidth / 2,\n              y: shapeLocation[j].y - shapeHeight / 2 < textY - legendTextSize.height ? shapeLocation[j].y - shapeHeight / 2 : textY - legendTextSize.height,\n              width: Math.abs(shapeLocation[j].x - shapeWidth / 2 - (textX + legendTextSize.width)),\n              height: shapeHeight > legendTextSize.height ? shapeHeight : legendTextSize.height\n            }\n          });\n          j++;\n        }\n\n        var collection = this.totalPages[0]['Collection'];\n        Array.prototype.forEach.call(collection, function (legendObj, index) {\n          var legendRect = new Rect(legendObj['Rect']['x'], legendObj['Rect']['y'], legendObj['Rect']['width'], legendObj['Rect']['height']);\n\n          if (index === 0) {\n            legendItemStartX_1 = legendRect.x;\n            legendItemStartY_1 = legendRect.y;\n          }\n\n          _this.widthIncrement = Math.max(_this.widthIncrement, Math.abs(legendItemStartX_1 - (legendRect.x + legendRect.width)));\n          _this.heightIncrement = Math.max(_this.heightIncrement, Math.abs(legendItemStartY_1 - (legendRect.y + legendRect.height)));\n        });\n        legendWidth = this.widthIncrement < legendWidth ? this.widthIncrement : legendWidth;\n        legendHeight = this.heightIncrement < legendHeight ? this.heightIncrement : legendHeight;\n        this.legendItemRect = {\n          x: collection[0]['Rect']['x'],\n          y: collection[0]['Rect']['y'],\n          width: legendWidth,\n          height: legendHeight\n        };\n      }\n    }\n  };\n  /**\n   *\n   */\n\n\n  Legend.prototype.getLegends = function (layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n    this.getRangeLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n    this.getEqualLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n    this.getDataLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n  };\n\n  Legend.prototype.getPageChanged = function () {\n    this.page++;\n\n    if (isNullOrUndefined(this.totalPages[this.page])) {\n      this.totalPages[this.page] = {\n        Page: this.page + 1,\n        Collection: []\n      };\n    }\n  };\n\n  Legend.prototype.legendTextTrim = function (maxWidth, text, font, legendRectSize) {\n    var label = text;\n    var size = measureText(text, font).width;\n    var legendWithoutTextSize = legendRectSize - size;\n\n    if (legendRectSize > maxWidth) {\n      var textLength = text.length;\n\n      for (var i = textLength - 1; i >= 0; --i) {\n        label = text.substring(0, i) + '...';\n        size = measureText(label, font).width;\n        var totalSize = legendWithoutTextSize + size;\n\n        if (totalSize <= maxWidth || label.length < 4) {\n          if (label.length < 4) {\n            label = ' ';\n          }\n\n          return label;\n        }\n      }\n    }\n\n    return label;\n  };\n  /**\n   * To draw the legend shape and text.\n   */\n\n\n  Legend.prototype.drawLegend = function () {\n    var map = this.maps;\n    var legend = map.legendSettings;\n    var render = map.renderer;\n    var textOptions;\n    var textFont = legend.textStyle;\n    this.legendGroup = render.createGroup({\n      id: map.element.id + '_Legend_Group'\n    });\n\n    if (legend.mode === 'Interactive') {\n      for (var i = 0; i < this.legendRenderingCollections.length; i++) {\n        var itemId = map.element.id + '_Legend_Index_' + i;\n        var textId = map.element.id + '_Legend_Index_' + i + '_Text';\n        var item = this.legendRenderingCollections[i];\n        var bounds = new Rect(item['x'], item['y'], item['width'], item['height']);\n\n        if (i === 0) {\n          this.renderLegendBorder();\n        }\n\n        var textLocation = new Point(item['textX'], item['textY']);\n        textFont.color = textFont.color !== null ? textFont.color : this.maps.themeStyle.legendTextColor;\n        var rectOptions = new RectOption(itemId, item['fill'], item['shapeBorder'], legend.opacity, bounds);\n        textOptions = new TextOption(textId, textLocation.x, textLocation.y, 'middle', item['text'], '', '');\n        textFont.fontFamily = map.themeStyle.fontFamily || textFont.fontFamily;\n        textFont.size = map.themeStyle.legendFontSize || textFont.size;\n        renderTextElement(textOptions, textFont, textFont.color, this.legendGroup);\n        this.legendGroup.appendChild(render.drawRectangle(rectOptions));\n        this.legendToggle();\n      }\n    } else {\n      this.drawLegendItem(this.currentPage);\n    }\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  Legend.prototype.drawLegendItem = function (page) {\n    var map = this.maps;\n    var legend = map.legendSettings;\n    var spacing = 10;\n    var shapeSize = new Size(legend.shapeWidth, legend.shapeHeight);\n    var textOptions;\n    var renderOptions;\n    var render = map.renderer;\n\n    if (page >= 0 && page < this.totalPages.length) {\n      if (querySelector(this.legendGroup.id, this.maps.element.id)) {\n        remove(querySelector(this.legendGroup.id, this.maps.element.id));\n      }\n\n      for (var i = 0; i < this.totalPages[page]['Collection'].length; i++) {\n        var collection = this.totalPages[page]['Collection'][i];\n        var shapeBorder = collection['shapeBorder'];\n        var legendElement = render.createGroup({\n          id: map.element.id + '_Legend_Index_' + collection['idIndex']\n        });\n        var legendText = collection['DisplayText'];\n        var shape = legend.type === 'Markers' ? isNullOrUndefined(collection['ImageSrc']) ? legend.shape : 'Image' : collection['legendShape'];\n        var strokeColor = legend.shape === 'HorizontalLine' || legend.shape === 'VerticalLine' || legend.shape === 'Cross' ? isNullOrUndefined(legend.fill) ? '#000000' : legend.fill : shapeBorder.color;\n        var strokeWidth = legend.shape === 'HorizontalLine' || legend.shape === 'VerticalLine' || legend.shape === 'Cross' ? shapeBorder.width === 0 ? 1 : shapeBorder.width : shapeBorder.width;\n        var shapeId = map.element.id + '_Legend_Shape_Index_' + collection['idIndex'];\n        var textId = map.element.id + '_Legend_Text_Index_' + collection['idIndex'];\n        var shapeLocation = collection['Shape'];\n        var textLocation = collection['Text'];\n        var imageUrl = isNullOrUndefined(collection['ImageSrc']) ? legend.shape : collection['ImageSrc'];\n        var renderOptions_1 = new PathOption(shapeId, collection['Fill'], strokeWidth, strokeColor, legend.opacity, '');\n        legend.textStyle.color = legend.textStyle.color !== null ? legend.textStyle.color : this.maps.themeStyle.legendTextColor;\n        legend.textStyle.fontFamily = map.themeStyle.fontFamily || legend.textStyle.fontFamily;\n        legend.textStyle.size = map.themeStyle.legendFontSize || legend.textStyle.size;\n\n        if (i === 0) {\n          this.renderLegendBorder();\n        }\n\n        legendElement.appendChild(drawSymbol(shapeLocation, shape, shapeSize, collection['ImageSrc'], renderOptions_1));\n        var legendRectSize = collection['Rect']['x'] + collection['Rect']['width'];\n\n        if (legendRectSize > this.legendBorderRect.width) {\n          var trimmedText = this.legendTextTrim(this.legendBorderRect.width, legendText, legend.textStyle, legendRectSize);\n          legendText = trimmedText;\n        }\n\n        textOptions = new TextOption(textId, textLocation.x, textLocation.y, 'start', legendText, '', '');\n        renderTextElement(textOptions, legend.textStyle, legend.textStyle.color, legendElement);\n        this.legendGroup.appendChild(legendElement);\n\n        if (i === this.totalPages[page]['Collection'].length - 1) {\n          var pagingGroup = void 0;\n          var width = spacing;\n          var height = spacing / 2;\n\n          if (this.page !== 0) {\n            var pagingText = page + 1 + '/' + this.totalPages.length;\n            var pagingFont = legend.textStyle;\n            var pagingTextSize = measureText(pagingText, pagingFont);\n            var leftPageX = this.legendItemRect.x + this.legendItemRect.width - pagingTextSize.width - width * 2 - spacing;\n            var rightPageX = this.legendItemRect.x + this.legendItemRect.width;\n            var locY = this.legendItemRect.y + this.legendItemRect.height + height / 2 + spacing;\n            var pageTextX = rightPageX - width - pagingTextSize.width / 2 - spacing / 2;\n            pagingGroup = render.createGroup({\n              id: map.element.id + '_Legend_Paging_Group'\n            });\n            var leftPageElement = render.createGroup({\n              id: map.element.id + '_Legend_Left_Paging_Group'\n            });\n            var rightPageElement = render.createGroup({\n              id: map.element.id + '_Legend_Right_Paging_Group'\n            });\n            var rightPath = ' M ' + rightPageX + ' ' + locY + ' L ' + (rightPageX - width) + ' ' + (locY - height) + ' L ' + (rightPageX - width) + ' ' + (locY + height) + ' z ';\n            var leftPath = ' M ' + leftPageX + ' ' + locY + ' L ' + (leftPageX + width) + ' ' + (locY - height) + ' L ' + (leftPageX + width) + ' ' + (locY + height) + ' z ';\n            var leftPageOptions = new PathOption(map.element.id + '_Left_Page', '#a6a6a6', 0, '#a6a6a6', 1, '', leftPath);\n            leftPageElement.appendChild(render.drawPath(leftPageOptions));\n            var leftRectPageOptions = new RectOption(map.element.id + '_Left_Page_Rect', 'transparent', {}, 1, new Rect(leftPageX - width / 2, locY - height * 2, width * 2, spacing * 2), null, null, '', '');\n            leftPageElement.appendChild(render.drawRectangle(leftRectPageOptions));\n            this.wireEvents(leftPageElement);\n            var rightPageOptions = new PathOption(map.element.id + '_Right_Page', '#a6a6a6', 0, '#a6a6a6', 1, '', rightPath);\n            rightPageElement.appendChild(render.drawPath(rightPageOptions));\n            var rightRectPageOptions = new RectOption(map.element.id + '_Right_Page_Rect', 'transparent', {}, 1, new Rect(rightPageX - width, locY - height, width, spacing), null, null, '', '');\n            rightPageElement.appendChild(render.drawRectangle(rightRectPageOptions));\n            this.wireEvents(rightPageElement);\n            pagingGroup.appendChild(leftPageElement);\n            pagingGroup.appendChild(rightPageElement);\n            var pageTextOptions = {\n              'id': map.element.id + '_Paging_Text',\n              'x': pageTextX,\n              'y': locY + pagingTextSize.height / 4,\n              'fill': '#a6a6a6',\n              'font-size': '14px',\n              'font-style': pagingFont.fontStyle,\n              'font-family': pagingFont.fontFamily,\n              'font-weight': pagingFont.fontWeight,\n              'text-anchor': 'middle',\n              'transform': '',\n              'opacity': 1,\n              'dominant-baseline': ''\n            };\n            pagingGroup.appendChild(render.createText(pageTextOptions, pagingText));\n            this.legendGroup.appendChild(pagingGroup);\n          }\n\n          this.legendToggle();\n        }\n      }\n    }\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  Legend.prototype.legendHighLightAndSelection = function (targetElement, value) {\n    var shapeIndex;\n    var layerIndex;\n    var dataIndex;\n    var textEle;\n    var legend = this.maps.legendSettings;\n    textEle = legend.mode === 'Default' ? document.getElementById(targetElement.id.replace('Shape', 'Text')) : document.getElementById(targetElement.id + '_Text');\n    var collection = this.maps.legendModule.legendCollection;\n    var length;\n    var multiSelectEnable = this.maps.layers[collection[0]['data'][0]['layerIndex']].selectionSettings.enableMultiSelect;\n    var selectLength = 0;\n    var interactProcess = true;\n    var idIndex = parseFloat(targetElement.id.charAt(targetElement.id.length - 1));\n    this.updateLegendElement();\n    var toggleLegendCheck = this.maps.toggledLegendId.indexOf(idIndex);\n\n    if (this.maps.legendSettings.toggleLegendSettings.enable && value === 'highlight' && toggleLegendCheck !== -1) {\n      var collectionIndex = this.getIndexofLegend(this.legendHighlightCollection, targetElement);\n\n      if (collectionIndex !== -1) {\n        this.legendHighlightCollection.splice(collectionIndex, 1);\n      }\n\n      this.removeLegendHighlightCollection();\n      return null;\n    }\n\n    if (value === 'selection') {\n      this.shapeHighlightCollection = [];\n\n      if (!this.maps.shapeSelections && !multiSelectEnable) {\n        this.removeAllSelections();\n        this.maps.shapeSelections = true;\n      }\n\n      if (this.maps.legendSelectionCollection.length > 0 && (!multiSelectEnable ? this.maps.shapeSelections : true)) {\n        for (var k = 0; k < this.maps.legendSelectionCollection.length; k++) {\n          if (targetElement === this.maps.legendSelectionCollection[k]['legendElement']) {\n            this.maps.legendSelectionCollection[k]['legendElement'] = targetElement;\n            interactProcess = false;\n            this.removeLegendSelectionCollection(this.maps.legendSelectionCollection[k]['legendElement']);\n            this.maps.selectedLegendElementId.splice(this.maps.selectedLegendElementId.indexOf(idIndex), 1);\n            this.maps.legendSelectionCollection.splice(k, 1);\n            this.maps.legendSelection = this.maps.legendSelectionCollection.length > 0 ? false : true;\n            break;\n          } else if (!multiSelectEnable) {\n            if (this.maps.legendSelectionCollection.length > 1) {\n              for (var z = 0; z < this.maps.legendSelectionCollection.length; z++) {\n                this.removeLegendSelectionCollection(this.maps.legendSelectionCollection[z]['legendElement']);\n              }\n\n              this.maps.legendSelectionCollection = [];\n            } else {\n              this.removeLegendSelectionCollection(this.maps.legendSelectionCollection[k]['legendElement']);\n              this.maps.legendSelectionCollection.splice(k, 1);\n            }\n          }\n        }\n      }\n    } else {\n      if (this.maps.legendSelectionCollection.length > 0) {\n        for (var k = 0; k < this.maps.legendSelectionCollection.length; k++) {\n          if ((targetElement.id.indexOf('_Legend_Shape') > -1 || targetElement.id.indexOf('_Legend_Index')) && targetElement === this.maps.legendSelectionCollection[k]['legendElement']) {\n            interactProcess = false;\n            break;\n          } else {\n            this.removeLegendHighlightCollection();\n          }\n        }\n      }\n\n      this.removeLegendHighlightCollection();\n    }\n\n    if (interactProcess) {\n      for (var i = 0; i < collection.length; i++) {\n        var idIndex_1 = this.maps.legendSettings.mode === 'Interactive' ? parseFloat(targetElement.id.split('_Legend_Index_')[1]) : parseFloat(targetElement.id.split('_Legend_Shape_Index_')[1]);\n\n        if (textEle.textContent === collection[i]['text'] && collection[i]['data'].length > 0 && idIndex_1 === i) {\n          var layer = this.maps.layers[collection[i]['data'][0]['layerIndex']];\n          var enable = void 0;\n          var module = void 0;\n          var data = void 0;\n\n          if (!isNullOrUndefined(layer)) {\n            enable = value === 'selection' ? layer.selectionSettings.enable : layer.highlightSettings.enable;\n            module = void 0;\n            module = value === 'selection' ? layer.selectionSettings : layer.highlightSettings;\n            data = collection[i]['data'];\n          }\n\n          if (enable) {\n            for (var j = 0; j < data.length; j++) {\n              shapeIndex = data[j]['shapeIndex'];\n              layerIndex = data[j]['layerIndex'];\n              dataIndex = data[j]['dataIndex'];\n              var shapeEle = document.getElementById(this.maps.element.id + '_LayerIndex_' + layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex);\n\n              if (shapeEle !== null) {\n                var shapeMatch = true;\n\n                if (this.maps.legendSelectionCollection !== null) {\n                  for (var i_1 = 0; i_1 < this.maps.legendSelectionCollection.length; i_1++) {\n                    if (this.maps.legendSelectionCollection[i_1]['legendElement'] === targetElement) {\n                      shapeMatch = false;\n                      break;\n                    }\n                  }\n                }\n\n                if (value === 'highlight' && shapeMatch) {\n                  if (j === 0) {\n                    this.legendHighlightCollection = [];\n                    this.pushCollection(targetElement, this.legendHighlightCollection, collection[i], layer.shapeSettings);\n                  }\n\n                  length = this.legendHighlightCollection.length;\n                  var legendHighlightColor = this.legendHighlightCollection[length - 1]['legendOldFill'];\n                  this.legendHighlightCollection[length - 1]['MapShapeCollection']['Elements'].push(shapeEle);\n                  var shapeItemCount = this.legendHighlightCollection[length - 1]['MapShapeCollection']['Elements'].length - 1;\n                  var shapeOldFillColor = shapeEle.getAttribute('fill');\n                  this.legendHighlightCollection[length - 1]['shapeOldFillColor'].push(shapeOldFillColor);\n                  var shapeOldColor = this.legendHighlightCollection[length - 1]['shapeOldFillColor'][shapeItemCount];\n                  this.shapePreviousColor = this.legendHighlightCollection[length - 1]['shapeOldFillColor'];\n                  this.setColor(shapeEle, !isNullOrUndefined(module.fill) ? module.fill : shapeOldColor, module.opacity.toString(), module.border.color, module.border.width.toString(), 'highlight');\n                  this.setColor(targetElement, !isNullOrUndefined(module.fill) ? module.fill : legendHighlightColor, module.opacity.toString(), module.border.color, module.border.width.toString(), 'highlight');\n                } else if (value === 'selection') {\n                  this.legendHighlightCollection = [];\n                  this.maps.legendSelectionClass = module;\n\n                  if (j === 0) {\n                    this.pushCollection(targetElement, this.maps.legendSelectionCollection, collection[i], layer.shapeSettings);\n\n                    if (multiSelectEnable) {\n                      this.maps.selectedLegendElementId.push(i);\n                    } else {\n                      if (this.maps.selectedLegendElementId.length === 0) {\n                        this.maps.selectedLegendElementId.push(i);\n                      } else {\n                        this.maps.selectedLegendElementId = [];\n                        this.maps.selectedLegendElementId.push(i);\n                      }\n                    }\n                  }\n\n                  selectLength = this.maps.legendSelectionCollection.length;\n                  var legendSelectionColor = void 0;\n                  legendSelectionColor = this.maps.legendSelectionCollection[selectLength - 1]['legendOldFill'];\n                  this.maps.legendSelectionCollection[selectLength - 1]['MapShapeCollection']['Elements'].push(shapeEle);\n                  this.maps.legendSelectionCollection[selectLength - 1]['shapeOldFillColor'] = this.shapePreviousColor;\n                  this.setColor(targetElement, !isNullOrUndefined(module.fill) ? module.fill : legendSelectionColor, module.opacity.toString(), module.border.color, module.border.width.toString(), 'selection');\n                  this.setColor(shapeEle, !isNullOrUndefined(module.fill) ? module.fill : legendSelectionColor, module.opacity.toString(), module.border.color, module.border.width.toString(), 'selection');\n\n                  if (this.maps.selectedElementId.indexOf(shapeEle.getAttribute('id')) === -1) {\n                    this.maps.selectedElementId.push(shapeEle.getAttribute('id'));\n                  }\n\n                  if (j === data.length - 1) {\n                    this.maps.legendSelection = false;\n                    this.removeLegend(this.maps.legendSelectionCollection);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  Legend.prototype.setColor = function (element, fill, opacity, borderColor, borderWidth, type) {\n    if (type === 'selection') {\n      maintainStyleClass('ShapeselectionMap', 'ShapeselectionMapStyle', fill, opacity, borderColor, borderWidth, this.maps);\n      element.setAttribute('class', 'ShapeselectionMapStyle');\n    } else {\n      element.setAttribute('fill', fill);\n      element.setAttribute('opacity', opacity);\n      element.setAttribute('stroke', borderColor);\n      element.setAttribute('stroke-width', (Number(borderWidth) / this.maps.scale).toString());\n    }\n  };\n\n  Legend.prototype.pushCollection = function (targetElement, collection, oldElement, shapeSettings) {\n    collection.push({\n      legendElement: targetElement,\n      legendOldFill: oldElement['fill'],\n      legendOldOpacity: oldElement['opacity'],\n      legendOldBorderColor: oldElement['borderColor'],\n      legendOldBorderWidth: oldElement['borderWidth'],\n      shapeOpacity: shapeSettings.opacity,\n      shapeOldBorderColor: shapeSettings.border.color,\n      shapeOldBorderWidth: shapeSettings.border.width\n    });\n    length = collection.length;\n    collection[length - 1]['MapShapeCollection'] = {\n      Elements: []\n    };\n    collection[length - 1]['shapeOldFillColor'] = [];\n  };\n\n  Legend.prototype.removeLegend = function (collection) {\n    for (var i = 0; i < collection.length; i++) {\n      var item = collection[i];\n      this.setColor(item['legendElement'], item['legendOldFill'], item['legendOldOpacity'], item['legendOldBorderColor'], item['legendOldBorderWidth'], 'highlight');\n      var dataCount = item['MapShapeCollection']['Elements'].length;\n\n      for (var j = 0; j < dataCount; j++) {\n        var shapeFillColor = item['legendOldFill'].indexOf('url') !== -1 ? item['shapeOldFillColor'][j] : item['legendOldFill'];\n        this.setColor(item['MapShapeCollection']['Elements'][j], shapeFillColor, item['shapeOpacity'], item['shapeOldBorderColor'], item['shapeOldBorderWidth'], 'highlight');\n      }\n    }\n  };\n\n  Legend.prototype.removeLegendHighlightCollection = function () {\n    if (this.legendHighlightCollection.length > 0) {\n      this.removeLegend(this.legendHighlightCollection);\n      this.legendHighlightCollection = [];\n    }\n  };\n\n  Legend.prototype.removeLegendSelectionCollection = function (targetElement) {\n    if (this.maps.legendSelectionCollection.length > 0) {\n      removeClass(targetElement);\n      var shapeElements = this.shapesOfLegend(targetElement);\n      var dataCount = shapeElements.length;\n\n      for (var j = 0; j < dataCount; j++) {\n        var shapeElement = getElement(shapeElements[j]);\n\n        if (shapeElement.getAttribute('class') === 'ShapeselectionMapStyle') {\n          removeClass(shapeElement);\n          var selectedElementIdIndex = void 0;\n          selectedElementIdIndex = this.maps.selectedElementId.indexOf(shapeElement.id);\n\n          if (selectedElementIdIndex !== -1) {\n            this.maps.selectedElementId.splice(selectedElementIdIndex, 1);\n          }\n        }\n      }\n    }\n  };\n\n  Legend.prototype.removeShapeHighlightCollection = function () {\n    if (this.shapeHighlightCollection.length > 0) {\n      for (var i = 0; i < this.shapeHighlightCollection.length; i++) {\n        var item = this.shapeHighlightCollection[i];\n        var removeFill = true;\n\n        for (var j = 0; j < this.maps.legendSelectionCollection.length; j++) {\n          if (this.maps.legendSelectionCollection[j]['legendElement'] === item['legendElement']) {\n            removeFill = false;\n          }\n        }\n\n        if (removeFill) {\n          this.setColor(item['legendElement'], item['legendOldFill'], item['legendOldOpacity'], item['legendOldBorderColor'], item['legendOldBorderWidth'], 'highlight');\n        }\n      }\n    }\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  Legend.prototype.shapeHighLightAndSelection = function (targetElement, data, module, getValue, layerIndex) {\n    if (data !== undefined) {\n      this.updateLegendElement();\n      this.shapeToggled = true;\n      var collection = this.maps.legendModule.legendCollection;\n      var indexes = this.legendIndexOnShape(data, layerIndex);\n      var shapeElement = this.shapeDataOnLegend(targetElement);\n      var toggleLegendCheck = this.maps.toggledLegendId.indexOf(indexes['actualIndex']);\n\n      if (this.maps.legendSettings.toggleLegendSettings.enable && toggleLegendCheck !== -1) {\n        this.shapeToggled = false;\n        this.legendHighlightCollection = [];\n        var collectionIndex = this.getIndexofLegend(this.shapeHighlightCollection, shapeElement['LegendEle']);\n\n        if (collectionIndex !== -1) {\n          this.shapeHighlightCollection.splice(collectionIndex, 1);\n        }\n\n        this.removeShapeHighlightCollection();\n        return null;\n      }\n\n      if (indexes['currentIndex'] === undefined && indexes['actualIndex'] === undefined) {\n        this.removeShapeHighlightCollection();\n        return null;\n      }\n\n      if (indexes['currentIndex'] === undefined && getValue === 'selection' && !this.maps.layers[layerIndex].selectionSettings.enableMultiSelect && targetElement.getAttribute('class') !== 'ShapeselectionMapStyle') {\n        this.maps.legendSelection = false;\n      }\n\n      if (getValue === 'selection' && !this.maps.layers[layerIndex].selectionSettings.enableMultiSelect && !this.maps.legendSelection) {\n        this.removeAllSelections();\n        this.maps.legendSelection = true;\n      }\n\n      if (indexes['currentIndex'] === undefined) {\n        if (getValue === 'selection' && indexes['actualIndex'] !== undefined) {\n          var checkSelection = 0;\n\n          for (var i = 0; i < shapeElement['Elements'].length; i++) {\n            if (shapeElement['Elements'][i].getAttribute('class') === 'ShapeselectionMapStyle') {\n              checkSelection++;\n            }\n          }\n\n          var selectionIndex = this.maps.selectedLegendElementId.indexOf(indexes['actualIndex']);\n\n          if (selectionIndex === -1) {\n            this.maps.selectedLegendElementId.push(indexes['actualIndex']);\n            this.maps.legendSelectionClass = module;\n          } else {\n            if (checkSelection <= 1 && targetElement.getAttribute('class') === 'ShapeselectionMapStyle') {\n              if (!this.maps.layers[layerIndex].selectionSettings.enableMultiSelect) {\n                this.maps.selectedLegendElementId.splice(selectionIndex, 1);\n              } else {\n                if (checkSelection <= 1 && targetElement.getAttribute('class') === 'ShapeselectionMapStyle') {\n                  this.maps.selectedLegendElementId.splice(selectionIndex, 1);\n                }\n              }\n            }\n          }\n        }\n\n        this.removeShapeHighlightCollection();\n        return null;\n      }\n\n      var text = collection[indexes['actualIndex']]['text'];\n      var content = void 0;\n      var legendShape = void 0;\n\n      if (this.maps.legendSettings.mode === 'Default') {\n        if (indexes['currentIndex'] !== undefined) {\n          content = document.getElementById(this.maps.element.id + '_Legend_Text_Index_' + indexes['actualIndex']).textContent;\n          legendShape = document.getElementById(this.maps.element.id + '_Legend_Shape_Index_' + indexes['actualIndex']);\n        }\n      } else {\n        content = document.getElementById(this.maps.element.id + '_Legend_Index_' + indexes['actualIndex'] + '_Text').textContent;\n        legendShape = document.getElementById(this.maps.element.id + '_Legend_Index_' + indexes['actualIndex']);\n      }\n\n      this.oldShapeElement = shapeElement['LegendEle'];\n      var length_1 = this.maps.legendSelectionCollection.length;\n\n      if (text === content) {\n        var shapeMatched = true;\n\n        if (this.maps.legendSelectionCollection) {\n          for (var i = 0; i < this.maps.legendSelectionCollection.length; i++) {\n            if (this.maps.legendSelectionCollection[i]['legendElement'] === shapeElement['LegendEle']) {\n              shapeMatched = false;\n              break;\n            }\n          }\n        }\n\n        if (getValue === 'highlight' && shapeMatched) {\n          var selectionEle = this.isTargetSelected(shapeElement, this.shapeHighlightCollection);\n\n          if (selectionEle === undefined || selectionEle && !selectionEle['IsSelected']) {\n            this.pushCollection(legendShape, this.shapeHighlightCollection, collection[indexes['actualIndex']], this.maps.layers[layerIndex].shapeSettings);\n          }\n\n          for (var j = 0; j < this.shapeHighlightCollection.length; j++) {\n            if (shapeElement['LegendEle'].id === this.shapeHighlightCollection[j]['legendElement'].id) {\n              this.shapeHighlightCollection[j]['legendElement'] = shapeElement['LegendEle'];\n            }\n          }\n\n          if (length_1 > 0) {\n            for (var j = 0; j < length_1; j++) {\n              if (shapeElement['LegendEle'] === this.maps.legendSelectionCollection[j]['legendElement']) {\n                this.maps.legendSelectionCollection[j]['legendElement'] = shapeElement['LegendEle'];\n                this.removeShapeHighlightCollection();\n                break;\n              } else if (j === length_1 - 1) {\n                this.removeShapeHighlightCollection();\n                this.setColor(legendShape, !isNullOrUndefined(module.fill) ? module.fill : legendShape.getAttribute('fill'), module.opacity.toString(), module.border.color, module.border.width.toString(), 'highlight');\n              }\n            }\n          } else {\n            this.removeShapeHighlightCollection();\n            this.setColor(legendShape, !isNullOrUndefined(module.fill) ? module.fill : legendShape.getAttribute('fill'), module.opacity.toString(), module.border.color, module.border.width.toString(), 'highlight');\n          }\n        } else if (getValue === 'selection') {\n          var selectionEle = this.isTargetSelected(shapeElement, this.maps.legendSelectionCollection);\n\n          if (length_1 > 0) {\n            var j = 0;\n\n            while (j < this.maps.legendSelectionCollection.length) {\n              if (shapeElement['LegendEle'] !== this.maps.legendSelectionCollection[j]['legendElement'] && !module.enableMultiSelect) {\n                var element = this.maps.legendSelectionCollection[j];\n                var selectedLegendIndex = this.maps.selectedLegendElementId.indexOf(indexes['actualIndex']);\n                this.maps.selectedLegendElementId.splice(selectedLegendIndex, 1);\n                this.maps.legendSelectionCollection.splice(j, 1);\n                removeClass(element['legendElement']);\n                this.maps.shapeSelections = true;\n                j = 0;\n              } else {\n                j++;\n              }\n            }\n          }\n\n          if (selectionEle && selectionEle['IsSelected'] && targetElement.getAttribute('class') === 'ShapeselectionMapStyle') {\n            var element = this.maps.legendSelectionCollection[selectionEle['SelectionIndex']];\n            var multiSelection = 0;\n\n            if (module.enableMultiSelect) {\n              for (var i = 0; i < shapeElement['Elements'].length; i++) {\n                if (targetElement.getAttribute('class') === shapeElement['Elements'][i].getAttribute('class')) {\n                  multiSelection++;\n                }\n              }\n            }\n\n            if (multiSelection <= 1 && (!module.enableMultiSelect ? this.maps.legendSelection : true)) {\n              this.maps.selectedLegendElementId.splice(this.maps.selectedLegendElementId.indexOf(indexes['actualIndex']), 1);\n\n              if (!isNullOrUndefined(shapeElement['LegendEle'])) {\n                removeClass(shapeElement['LegendEle']);\n              }\n\n              this.maps.legendSelectionCollection.splice(selectionEle['SelectionIndex'], 1);\n              this.maps.shapeSelections = true;\n            }\n          } else {\n            if ((selectionEle === undefined || selectionEle && !selectionEle['IsSelected']) && !isNullOrUndefined(legendShape)) {\n              var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, legendShape);\n\n              if (legendSelectionIndex === -1) {\n                this.pushCollection(legendShape, this.maps.legendSelectionCollection, collection[indexes['actualIndex']], this.maps.layers[layerIndex].shapeSettings);\n              }\n            }\n\n            var addId = true;\n\n            for (var i = 0; i < this.maps.selectedLegendElementId.length; i++) {\n              if (indexes['actualIndex'] === this.maps.selectedLegendElementId[i]) {\n                addId = false;\n              }\n            }\n\n            if (addId) {\n              this.maps.selectedLegendElementId.push(indexes['actualIndex']);\n            }\n\n            this.maps.legendSelectionClass = module;\n            this.removeLegend(this.shapeHighlightCollection);\n\n            if (!isNullOrUndefined(legendShape)) {\n              this.setColor(legendShape, !isNullOrUndefined(module.fill) ? module.fill : legendShape.getAttribute('fill'), module.opacity.toString(), module.border.color, module.border.width.toString(), 'selection');\n              var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, legendShape);\n              this.maps.legendSelectionCollection[legendSelectionIndex]['MapShapeCollection']['Elements'].push(targetElement);\n            }\n\n            this.maps.shapeSelections = false;\n          }\n        } else if (document.getElementsByClassName('highlightMapStyle').length > 0) {\n          this.removeShapeHighlightCollection();\n          removeClass(document.getElementsByClassName('highlightMapStyle')[0]);\n        }\n      }\n    } else {\n      this.removeShapeHighlightCollection();\n    }\n  };\n\n  Legend.prototype.isTargetSelected = function (target, collection) {\n    var selectEle;\n\n    for (var i = 0; i < collection.length; i++) {\n      if (!isNullOrUndefined(target['LegendEle'].getAttribute('id')) && target['LegendEle'].getAttribute('id') === collection[i]['legendElement'].getAttribute('id')) {\n        selectEle = {\n          IsSelected: true,\n          SelectionIndex: i\n        };\n      }\n    }\n\n    return selectEle;\n  };\n\n  Legend.prototype.updateLegendElement = function () {\n    for (var i = 0; i < this.maps.legendSelectionCollection.length; i++) {\n      if (document.getElementById(this.maps.legendSelectionCollection[i]['legendElement'].id)) {\n        this.maps.legendSelectionCollection[i]['legendElement'] = document.getElementById(this.maps.legendSelectionCollection[i]['legendElement'].id);\n      }\n    }\n  };\n\n  Legend.prototype.getIndexofLegend = function (targetCollection, targetElement) {\n    var legendIndex = targetCollection.map(function (e) {\n      return e['legendElement'];\n    }).indexOf(targetElement);\n    return legendIndex;\n  };\n\n  Legend.prototype.removeAllSelections = function () {\n    for (var i = 0; i < this.maps.selectedElementId.length; i++) {\n      var selectedElement = document.getElementById(this.maps.selectedElementId[i]);\n      removeClass(selectedElement);\n    }\n\n    for (var j = 0; j < this.maps.selectedLegendElementId.length; j++) {\n      var idIndex = this.maps.legendSettings.mode === 'Interactive' ? 'container_Legend_Index_' : 'container_Legend_Shape_Index_';\n      var selectedElement = idIndex + this.maps.selectedLegendElementId[j];\n      var legendElement = document.getElementById(selectedElement);\n\n      if (!isNullOrUndefined(legendElement)) {\n        removeClass(document.getElementById(selectedElement));\n      }\n    }\n\n    this.maps.legendSelectionCollection = [];\n    this.maps.selectedLegendElementId = [];\n    this.maps.selectedElementId = [];\n  };\n\n  Legend.prototype.legendIndexOnShape = function (data, index) {\n    var legendIndex;\n    var actualIndex;\n    var path = this.maps.layers[index].shapeDataPath;\n    var value = data[path];\n    var legendType = this.maps.legendSettings.mode;\n    var collection = this.maps.legendModule.legendCollection;\n    var currentCollection;\n\n    if (legendType === 'Default' && !isNullOrUndefined(this.maps.legendModule.totalPages)) {\n      currentCollection = this.maps.legendModule.totalPages[this.maps.legendModule.currentPage]['Collection'];\n    }\n\n    var currentCollectionLength = legendType === 'Default' ? currentCollection['length'] : 1;\n\n    for (var i = 0; i < collection.length; i++) {\n      var dataValue = collection[i]['data'];\n\n      for (var k = 0; k < currentCollectionLength; k++) {\n        if (legendType !== 'Default' || collection[i]['text'] === currentCollection[k]['DisplayText']) {\n          for (var j = 0; j < dataValue.length; j++) {\n            if (value === dataValue[j]['name']) {\n              legendIndex = k;\n            }\n          }\n        }\n      }\n\n      for (var j = 0; j < dataValue.length; j++) {\n        if (value === dataValue[j]['name']) {\n          actualIndex = i;\n        }\n      }\n    }\n\n    return {\n      currentIndex: legendIndex,\n      actualIndex: actualIndex\n    };\n  };\n\n  Legend.prototype.shapeDataOnLegend = function (targetElement) {\n    var shapeIndex;\n    var layerIndex;\n    var dataIndex;\n    var collection = this.maps.legendModule.legendCollection;\n    var legend = this.maps.legendSettings;\n\n    for (var i = 0; i < collection.length; i++) {\n      var data = collection[i]['data'];\n      var process = false;\n      var elements = [];\n      var currentElement = {\n        Elements: []\n      };\n\n      for (var j = 0; j < data.length; j++) {\n        shapeIndex = data[j]['shapeIndex'];\n        layerIndex = data[j]['layerIndex'];\n        dataIndex = data[j]['dataIndex'];\n        var shapeEle = document.getElementById(this.maps.element.id + '_LayerIndex_' + layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex);\n\n        if (targetElement === shapeEle) {\n          process = true;\n        }\n\n        elements.push(shapeEle);\n      }\n\n      if (process) {\n        if (isNullOrUndefined(currentElement['LegendEle'])) {\n          currentElement['LegendEle'] = legend.mode === 'Default' ? document.getElementById(this.maps.element.id + '_Legend_Shape_Index_' + i) : document.getElementById(this.maps.element.id + '_Legend_Index_' + i);\n        }\n\n        currentElement['Elements'] = elements;\n        return currentElement;\n      }\n    }\n\n    return null;\n  };\n\n  Legend.prototype.shapesOfLegend = function (targetElement) {\n    var shapeIndex;\n    var layerIndex;\n    var dataIndex;\n    var idIndex = parseFloat(targetElement.id.charAt(targetElement.id.length - 1));\n    var data = this.maps.legendModule.legendCollection[idIndex]['data'];\n    var legendShapeElements = [];\n\n    for (var i = 0; i < data.length; i++) {\n      shapeIndex = data[i]['shapeIndex'];\n      layerIndex = data[i]['layerIndex'];\n      dataIndex = data[i]['dataIndex'];\n      var shapeElement = document.getElementById(this.maps.element.id + '_LayerIndex_' + layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex);\n\n      if (!isNullOrUndefined(shapeElement)) {\n        legendShapeElements.push(shapeElement.id);\n      }\n    }\n\n    return legendShapeElements;\n  }; //tslint:disable\n\n\n  Legend.prototype.legendToggle = function () {\n    var map = this.maps;\n    var legend = map.legendSettings;\n\n    if (this.maps.selectedLegendElementId) {\n      // To maintain the state of legend selection during page resize.\n      for (var j = 0; j < this.maps.selectedLegendElementId.length; j++) {\n        var idIndex = legend.mode === 'Interactive' ? this.maps.element.id + '_Legend_Index_' : this.maps.element.id + '_Legend_Shape_Index_';\n        var selectedElement = map.svgObject.querySelector('#' + idIndex + this.maps.selectedLegendElementId[j]);\n\n        if (!isNullOrUndefined(selectedElement)) {\n          var fill = !isNullOrUndefined(this.maps.legendSelectionClass.fill) ? this.maps.legendSelectionClass.fill : selectedElement.getAttribute('fill');\n          this.setColor(selectedElement, fill, this.maps.legendSelectionClass.opacity.toString(), this.maps.legendSelectionClass.border.color, this.maps.legendSelectionClass.border.width.toString(), 'selection');\n\n          for (var i = 0; i < this.maps.legendSelectionCollection.length; i++) {\n            if (this.maps.legendSelectionCollection[i]['legendElement'].id === selectedElement.id) {\n              this.maps.legendSelectionCollection[i]['legendElement'] = selectedElement;\n            }\n          }\n\n          var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, selectedElement);\n\n          if (legendSelectionIndex === -1) {\n            var layerIndex = this.maps.legendModule.legendCollection[this.maps.selectedLegendElementId[j]]['data'][j]['layerIndex'];\n            this.pushCollection(selectedElement, this.maps.legendSelectionCollection, this.maps.legendModule.legendCollection[this.maps.selectedLegendElementId[j]], this.maps.layers[layerIndex].shapeSettings);\n          }\n        }\n      }\n\n      ;\n    }\n\n    if (this.maps.toggledLegendId) {\n      for (var j = 0; j < this.maps.toggledLegendId.length; j++) {\n        var legendTextId = legend.mode === 'Interactive' ? '#' + this.maps.element.id + '_Legend_Index_' + this.maps.toggledLegendId[j] + '_Text' : '#' + this.maps.element.id + '_Legend_Text_Index_' + this.maps.toggledLegendId[j];\n        var textElement = map.svgObject.querySelector(legendTextId);\n\n        if (!isNullOrUndefined(textElement)) {\n          textElement.setAttribute(\"fill\", \"#E5E5E5\");\n        }\n\n        var legendShapeId = legend.mode === 'Interactive' ? '#' + this.maps.element.id + '_Legend_Index_' + this.maps.toggledLegendId[j] : '#' + this.maps.element.id + '_Legend_Shape_Index_' + this.maps.toggledLegendId[j];\n        var legendElement = map.svgObject.querySelector(legendShapeId);\n\n        if (!isNullOrUndefined(legendElement)) {\n          legendElement.setAttribute(\"fill\", \"#E5E5E5\");\n        }\n      }\n    }\n  }; //tslint:disable\n\n\n  Legend.prototype.renderLegendBorder = function () {\n    var map = this.maps;\n    var legend = map.legendSettings;\n    var legendTitle = legend.title.text;\n    var textStyle = legend.titleStyle;\n    var textOptions;\n    var spacing = 10;\n    var trimTitle = textTrim(this.legendItemRect.width + spacing * 2, legendTitle, textStyle);\n    var textSize = measureText(trimTitle, textStyle);\n    this.legendBorderRect = new Rect(this.legendItemRect.x - spacing, this.legendItemRect.y - spacing - textSize.height, this.legendItemRect.width + spacing * 2, this.legendItemRect.height + spacing * 2 + textSize.height + (legend.mode === 'Interactive' ? 0 : this.page !== 0 ? spacing : 0));\n    var renderOptions = new RectOption(map.element.id + '_Legend_Border', legend.background, legend.border, 1, this.legendBorderRect, null, null, '', '');\n    this.legendGroup.appendChild(map.renderer.drawRectangle(renderOptions));\n    this.getLegendAlignment(map, this.legendBorderRect.width, this.legendBorderRect.height, legend);\n    this.legendGroup.setAttribute('transform', 'translate( ' + (this.translate.x + -this.legendBorderRect.x) + ' ' + (this.translate.y + -this.legendBorderRect.y) + ' )');\n    map.svgObject.appendChild(this.legendGroup);\n\n    if (legendTitle) {\n      textStyle.color = textStyle.color !== null ? textStyle.color : this.maps.themeStyle.legendTextColor;\n      textOptions = new TextOption(map.element.id + '_LegendTitle', this.legendItemRect.x + this.legendItemRect.width / 2, this.legendItemRect.y - textSize.height / 2 - spacing / 2, 'middle', trimTitle, '');\n      renderTextElement(textOptions, textStyle, textStyle.color, this.legendGroup);\n    }\n  };\n\n  Legend.prototype.changeNextPage = function (e) {\n    this.currentPage = e.target.id.indexOf('_Left_Page_') > -1 ? this.currentPage - 1 : this.currentPage + 1;\n    this.legendGroup = this.maps.renderer.createGroup({\n      id: this.maps.element.id + '_Legend_Group'\n    });\n    this.drawLegendItem(this.currentPage);\n\n    if (querySelector(this.maps.element.id + '_Legend_Border', this.maps.element.id)) {\n      querySelector(this.maps.element.id + '_Legend_Border', this.maps.element.id).style.pointerEvents = 'none';\n    }\n  };\n\n  Legend.prototype.getLegendAlignment = function (map, width, height, legend) {\n    var x;\n    var y;\n    var spacing = 10;\n    var totalRect;\n    totalRect = extend({}, map.mapAreaRect, totalRect, true);\n    var areaX = totalRect.x;\n    var areaY = totalRect.y;\n    var areaHeight = totalRect.height;\n    var areaWidth = totalRect.width;\n    var totalWidth = map.availableSize.width;\n    var totalHeight = map.availableSize.height;\n\n    if (legend.position === 'Float') {\n      this.translate = legend.location;\n    } else {\n      switch (legend.position) {\n        case 'Top':\n        case 'Bottom':\n          totalRect.height = areaHeight - height;\n          x = totalWidth / 2 - width / 2;\n          y = legend.position === 'Top' ? areaY : areaY + totalRect.height;\n          totalRect.y = legend.position === 'Top' ? areaY + height + spacing : areaY;\n          break;\n\n        case 'Left':\n        case 'Right':\n          totalRect.width = areaWidth - width;\n          x = legend.position === 'Left' ? areaX : areaX + totalRect.width - spacing;\n          y = totalHeight / 2 - height / 2;\n          totalRect.x = legend.position === 'Left' ? areaX + width : areaX;\n          break;\n      }\n\n      switch (legend.alignment) {\n        case 'Near':\n          if (legend.position === 'Top' || legend.position === 'Bottom') {\n            x = totalRect.x;\n          } else {\n            y = totalRect.y;\n          }\n\n          break;\n\n        case 'Far':\n          if (legend.position === 'Top' || legend.position === 'Bottom') {\n            x = totalWidth - width - spacing;\n          } else {\n            y = totalHeight - height;\n          }\n\n          break;\n      }\n\n      if ((legend.height || legend.width) && legend.mode !== 'Interactive') {\n        map.totalRect = totalRect;\n      } else {\n        map.mapAreaRect = totalRect;\n      }\n\n      this.translate = new Point(x, y);\n    }\n  };\n\n  Legend.prototype.getMarkersLegendCollections = function (layerIndex, markers) {\n    var _this = this;\n\n    Array.prototype.forEach.call(markers, function (marker, markerIndex) {\n      var dataSource = marker.dataSource;\n      var field = marker.legendText;\n      var templateFn;\n      var isDuplicate;\n      Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n        var imageSrc = null;\n        var showLegend = isNullOrUndefined(data[_this.maps.legendSettings.showLegendPath]) ? true : data[_this.maps.legendSettings.showLegendPath];\n\n        if (marker.visible && showLegend && !isNullOrUndefined(data['latitude']) && !isNullOrUndefined(data['longitude'])) {\n          if (marker.template) {\n            templateFn = getTemplateFunction(marker.template);\n            var templateElement = templateFn(_this.maps);\n            var markerEle = isNullOrUndefined(templateElement.childElementCount) ? templateElement[0] : templateElement;\n            imageSrc = markerEle.querySelector('img').src;\n          }\n\n          var text = isNullOrUndefined(data[field]) ? '' : data[field];\n          isDuplicate = _this.maps.legendSettings.removeDuplicateLegend ? _this.removeDuplicates(_this.legendCollection, text) : false;\n\n          if (!isDuplicate) {\n            _this.legendCollection.push({\n              layerIndex: layerIndex,\n              markerIndex: markerIndex,\n              dataIndex: dataIndex,\n              fill: marker.fill,\n              text: text,\n              imageSrc: imageSrc\n            });\n          }\n        }\n      });\n    });\n  };\n\n  Legend.prototype.getRangeLegendCollection = function (layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n    var _this = this;\n\n    var legendText;\n    var legendIndex = 0;\n    var fill = this.maps.legendSettings.fill;\n    var rangeData = [];\n\n    var _loop_1 = function (colorMap) {\n      if (!isNullOrUndefined(colorMap.from) && !isNullOrUndefined(colorMap.to)) {\n        legendText = !isNullOrUndefined(colorMap.label) ? colorMap.label : colorMap.from + ' - ' + colorMap.to;\n        rangeData = [];\n        var colorMapProcess_1 = false;\n        Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n          var colorValue = colorValuePath.indexOf(\".\") > -1 ? Number(getValueFromObject(data, colorValuePath)) : parseFloat(data[colorValuePath]);\n\n          if (colorValue >= colorMap.from && colorValue <= colorMap.to) {\n            colorMapProcess_1 = true;\n            rangeData.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, colorValue));\n          }\n        });\n\n        if (!colorMapProcess_1) {\n          rangeData.push({\n            layerIndex: layerIndex,\n            shapeIndex: null,\n            dataIndex: null,\n            name: null,\n            value: null\n          });\n        }\n\n        var legendFill = isNullOrUndefined(fill) ? Object.prototype.toString.call(colorMap.color) === '[object Array]' ? !isNullOrUndefined(colorMap.value) ? colorMap.color[0] : this_1.legendGradientColor(colorMap, legendIndex) : colorMap.color : fill;\n        legendIndex++;\n        this_1.getOverallLegendItemsCollection(legendText, legendFill, rangeData, colorMap.showLegend);\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, colorMapping_1 = colorMapping; _i < colorMapping_1.length; _i++) {\n      var colorMap = colorMapping_1[_i];\n\n      _loop_1(colorMap);\n    }\n  };\n\n  Legend.prototype.getOverallLegendItemsCollection = function (legendText, legendFill, legendData, showLegend) {\n    var newColllection = [];\n    var legend = this.maps.legendSettings;\n\n    if (legendData.length > 0 && showLegend) {\n      for (var i = 0; i < legendData.length; i++) {\n        var collection = legendData[i];\n\n        if (collection.length > 0) {\n          for (var j = 0; j < collection.length; j++) {\n            newColllection.push(collection[j]);\n          }\n        } else {\n          newColllection.push(legendData[i]);\n        }\n\n        newColllection['_isVisible'] = true;\n      }\n\n      var isDuplicate = this.maps.legendSettings.removeDuplicateLegend ? this.removeDuplicates(this.legendCollection, legendText) : false;\n\n      if (!isDuplicate) {\n        this.legendCollection.push({\n          text: legendText,\n          fill: legendFill,\n          data: newColllection,\n          opacity: legend.opacity,\n          borderColor: legend.shapeBorder.color,\n          borderWidth: legend.shapeBorder.width\n        });\n      }\n    }\n  };\n\n  Legend.prototype.removeDuplicates = function (legendCollection, text) {\n    var isDuplicate = false;\n\n    for (var i = 0; i < legendCollection.length; i++) {\n      if (legendCollection[i]['text'] === text) {\n        isDuplicate = true;\n        break;\n      } else {\n        continue;\n      }\n    }\n\n    return isDuplicate;\n  };\n\n  Legend.prototype.getEqualLegendCollection = function (layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n    var _this = this;\n\n    var fill = this.maps.legendSettings.fill;\n    var equalValues = [];\n    var legendText;\n    var legendIndex = 0;\n    var equalData = [];\n    var outOfRangeValues = [];\n    var outOfRange = [];\n\n    var _loop_2 = function (colorMap) {\n      if (!isNullOrUndefined(colorMap.value)) {\n        legendText = !isNullOrUndefined(colorMap.label) ? colorMap.label : colorMap.value;\n        equalData = [];\n        var eqaulColorProcess_1 = false;\n        Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n          var equalValue = colorValuePath.indexOf(\".\") > -1 ? getValueFromObject(data, colorValuePath) : data[colorValuePath];\n\n          if (equalValue === colorMap.value) {\n            eqaulColorProcess_1 = true;\n\n            if (equalValues.indexOf(equalValue) === -1) {\n              equalValues.push(equalValue);\n            }\n\n            equalData.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, equalValue));\n          } else {\n            if (outOfRangeValues.indexOf(equalValue) === -1) {\n              outOfRangeValues.push(equalValue);\n            }\n          }\n        });\n\n        for (var x = 0; x < equalValues.length; x++) {\n          for (var y = 0; y < outOfRangeValues.length; y++) {\n            if (equalValues[x] === outOfRangeValues[y]) {\n              var equalIndex = outOfRangeValues.indexOf(equalValues[x]);\n              outOfRangeValues.splice(equalIndex, 1);\n            }\n          }\n        }\n\n        if (!eqaulColorProcess_1) {\n          equalData.push({\n            layerIndex: layerIndex,\n            shapeIndex: null,\n            dataIndex: null,\n            name: null,\n            value: null\n          });\n        }\n\n        var legendFill = isNullOrUndefined(fill) ? Object.prototype.toString.call(colorMap.color) === '[object Array]' ? colorMap.color[0] : colorMap.color : fill;\n        legendIndex++;\n        this_2.getOverallLegendItemsCollection(legendText, legendFill, equalData, colorMap.showLegend);\n      } else if (isNullOrUndefined(colorMap.minOpacity) && isNullOrUndefined(colorMap.maxOpacity) && isNullOrUndefined(colorMap.value) && isNullOrUndefined(colorMap.from) && isNullOrUndefined(colorMap.to) && !isNullOrUndefined(colorMap.color)) {\n        Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n          var equalValue = colorValuePath.indexOf(\".\") > -1 ? getValueFromObject(data, colorValuePath) : data[colorValuePath];\n\n          for (var k = 0; k < outOfRangeValues.length; k++) {\n            if (equalValue === outOfRangeValues[k]) {\n              outOfRange.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, equalValue));\n            }\n          }\n        });\n\n        if (outOfRangeValues.length === 0) {\n          var range_1 = false;\n          var outRange = [];\n          Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n            range_1 = false;\n            var rangeValue = data[colorValuePath];\n\n            for (var z = 0; z < colorMapping.length; z++) {\n              if (!isNullOrUndefined(rangeValue) && !isNaN(rangeValue)) {\n                if (rangeValue >= colorMapping[z].from && rangeValue <= colorMapping[z].to) {\n                  range_1 = true;\n                }\n              } else if (!range_1) {\n                range_1 = false;\n              }\n            }\n\n            if (!range_1) {\n              outOfRange.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, rangeValue));\n            }\n          });\n        }\n\n        legendText = !isNullOrUndefined(colorMap.label) ? colorMap.label : 'Others';\n        var outfill = Object.prototype.toString.call(colorMap.color) === '[object Array]' ? colorMap.color[0] : colorMap.color;\n        var legendOutFill = outfill;\n        legendIndex++;\n        this_2.getOverallLegendItemsCollection(legendText, legendOutFill, outOfRange, colorMap.showLegend);\n      }\n    };\n\n    var this_2 = this;\n\n    for (var _i = 0, colorMapping_2 = colorMapping; _i < colorMapping_2.length; _i++) {\n      var colorMap = colorMapping_2[_i];\n\n      _loop_2(colorMap);\n    }\n  };\n\n  Legend.prototype.getDataLegendCollection = function (layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n    var _this = this;\n\n    var legendText;\n    var fill = this.maps.legendSettings.fill;\n    var valuePath = this.maps.legendSettings.valuePath;\n\n    if (!isNullOrUndefined(colorValuePath) && !isNullOrUndefined(dataSource)) {\n      Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n        var showLegend = isNullOrUndefined(_this.maps.legendSettings.showLegendPath) ? true : isNullOrUndefined(data[_this.maps.legendSettings.showLegendPath]) ? false : data[_this.maps.legendSettings.showLegendPath];\n        var dataValue = colorValuePath.indexOf(\".\") > -1 ? getValueFromObject(data, colorValuePath) : data[colorValuePath];\n        var newData = [];\n        var legendFill = isNullOrUndefined(fill) ? dataValue : fill;\n\n        if (!isNullOrUndefined(dataValue) && colorMapping.length === 0) {\n          legendText = !isNullOrUndefined(data[valuePath]) ? valuePath.indexOf(\".\") > -1 ? getValueFromObject(data, valuePath) : data[valuePath] : dataPath.indexOf(\".\") > -1 ? getValueFromObject(data, dataPath) : data[dataPath];\n          newData.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, dataValue));\n        }\n\n        _this.getOverallLegendItemsCollection(legendText, legendFill, newData, showLegend);\n      });\n    }\n  };\n\n  Legend.prototype.interactiveHandler = function (e) {\n    var target = e.target;\n    var legend = this.maps.legendSettings;\n    var id = this.maps.element.id + '_Interactive_Legend';\n    var hoverId = legend.type === 'Layers' ? '_shapeIndex_' : legend.type === 'Markers' ? '_MarkerIndex_' : '_BubbleIndex_';\n\n    if (target.id.indexOf(hoverId) > 1) {\n      var layerIndex = parseFloat(target.id.split('_LayerIndex_')[1].split('_')[0]);\n      var dataIndex = parseFloat(target.id.split(/_dataIndex_/i)[1].split('_')[0]);\n      var fill = void 0;\n      var stroke = void 0;\n      var strokeWidth = void 0;\n\n      if (!isNullOrUndefined(querySelector(id, this.maps.element.id))) {\n        remove(querySelector(id, this.maps.element.id));\n      }\n\n      var layer = this.maps.layersCollection[layerIndex];\n      var markerVisible = legend.type === 'Layers' ? layer.visible : legend.type === 'Markers' ? layer.markerSettings[parseFloat(target.id.split('_MarkerIndex_')[1].split('_')[0])].visible : this.maps.getBubbleVisible(this.maps.layersCollection[layerIndex]);\n\n      if (legend.visible && this.legendRenderingCollections.length > 0 && legend.mode === 'Interactive' && markerVisible) {\n        var svgRect = this.maps.svgObject.getBoundingClientRect();\n\n        for (var i = 0; i < this.legendCollection.length; i++) {\n          var currentData = this.legendCollection[i];\n          var legendElement = querySelector(this.maps.element.id + '_Legend_Index_' + i, this.maps.element.id);\n          var legendRect = legendElement.getBoundingClientRect();\n          var rect = new Rect(Math.abs(legendRect.left - svgRect.left), Math.abs(legendRect.top - svgRect.top), legendRect.width, legendRect.height);\n          fill = legendElement.getAttribute('fill');\n          stroke = legend.shapeBorder.color;\n          strokeWidth = legend.shapeBorder.width;\n\n          if (!isNullOrUndefined(currentData['data'])) {\n            var data = currentData['data'];\n\n            for (var j = 0; j < data.length; j++) {\n              if (dataIndex === data[j]['dataIndex'] && layerIndex === data[j]['layerIndex']) {\n                this.renderInteractivePointer(legend, fill, stroke, id, strokeWidth, rect);\n                break;\n              }\n            }\n          }\n        }\n      }\n    } else {\n      if (!isNullOrUndefined(querySelector(id, this.maps.element.id))) {\n        remove(querySelector(id, this.maps.element.id));\n      }\n    }\n  };\n\n  Legend.prototype.renderInteractivePointer = function (legend, fill, stroke, id, strokeWidth, rect) {\n    var path;\n    var pathOptions;\n    var locX;\n    var locY;\n    var height = 10;\n    var width = 10;\n    var direction = legend.orientation === 'None' ? legend.position === 'Top' || legend.position === 'Bottom' ? 'Horizontal' : 'Vertical' : legend.orientation;\n\n    if (direction === 'Horizontal') {\n      if (!legend.invertedPointer) {\n        locX = rect.x + rect.width / 2;\n        locY = rect.y;\n        path = ' M ' + locX + ' ' + locY + ' L ' + (locX - width) + ' ' + (locY - height) + ' L ' + (locX + width) + ' ' + (locY - height) + ' Z ';\n      } else {\n        locX = rect.x + rect.width / 2;\n        locY = rect.y + rect.height;\n        path = ' M ' + locX + ' ' + locY + ' L ' + (locX - width) + ' ' + (locY + height) + ' L ' + (locX + width) + ' ' + (locY + height) + ' Z ';\n      }\n    } else {\n      if (!legend.invertedPointer) {\n        locX = rect.x + rect.width;\n        locY = rect.y + rect.height / 2;\n        path = ' M ' + locX + ' ' + locY + ' L ' + (locX + width) + ' ' + (locY - height) + ' L ' + (locX + width) + ' ' + (locY + height) + ' z ';\n      } else {\n        locX = rect.x;\n        locY = rect.y + rect.height / 2;\n        path = ' M ' + locX + ' ' + locY + ' L ' + (locX - width) + ' ' + (locY - height) + ' L ' + (locX - width) + ' ' + (locY + height) + ' z ';\n      }\n    }\n\n    pathOptions = new PathOption(id, fill, strokeWidth, stroke, 1, '', path);\n    this.maps.svgObject.appendChild(this.maps.renderer.drawPath(pathOptions));\n  };\n\n  Legend.prototype.wireEvents = function (element) {\n    EventHandler.add(element, Browser.touchStartEvent, this.changeNextPage, this);\n  };\n\n  Legend.prototype.addEventListener = function () {\n    if (this.maps.isDestroyed) {\n      return;\n    }\n\n    this.maps.on(Browser.touchMoveEvent, this.interactiveHandler, this);\n    this.maps.on(Browser.touchEndEvent, this.interactiveHandler, this);\n    this.maps.on(click, this.legendClick, this);\n  };\n\n  Legend.prototype.legendClick = function (targetEle) {\n    var legendShapeId;\n    var legendTextId;\n    var legendTextColor;\n    var legendToggleFill = this.maps.legendSettings.toggleLegendSettings.fill;\n    var legendToggleOpacity = this.maps.legendSettings.toggleLegendSettings.opacity;\n    var legendToggleBorderColor = this.maps.legendSettings.toggleLegendSettings.border.color;\n    var legendToggleBorderWidth = this.maps.legendSettings.toggleLegendSettings.border.width;\n\n    if (targetEle.parentNode['id'].indexOf(this.maps.element.id + '_Legend_Index_') > -1) {\n      var mapElement = void 0;\n      var legendIndex = parseFloat(targetEle.parentElement.id.substr((this.maps.element.id + '_Legend_Index_').length));\n      var selectedItem = this.legendCollection[legendIndex]['data'];\n      var isVisible = selectedItem['_isVisible'];\n      var shape = void 0;\n\n      if (this.maps.legendSettings.toggleLegendSettings.enable && this.maps.legendSettings.type === \"Bubbles\") {\n        for (var k = 0; k < this.maps.layers.length; k++) {\n          for (var j = 0; j < this.maps.layers[k].bubbleSettings.length; j++) {\n            for (var i = 0; i < selectedItem.length; i++) {\n              shape = this.legendCollection[legendIndex]['data'][i];\n              mapElement = querySelector(this.maps.element.id + '_LayerIndex_' + shape['layerIndex'] + '_BubbleIndex_' + j + '_dataIndex_' + shape['dataIndex'], this.maps.element.id);\n\n              if (isVisible && mapElement !== null) {\n                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                  mapElement.setAttribute('fill', this.maps.layers[k].shapeSettings.fill);\n                  mapElement.setAttribute('stroke', this.maps.layers[k].shapeSettings.border.color);\n                  mapElement.setAttribute('opacity', this.maps.layers[k].shapeSettings.opacity.toString());\n                  mapElement.setAttribute('stroke-width', this.maps.layers[k].shapeSettings.border.width.toString());\n                } else {\n                  mapElement.setAttribute(\"fill\", legendToggleFill);\n                  mapElement.setAttribute(\"opacity\", legendToggleOpacity.toString());\n                  mapElement.setAttribute('stroke', legendToggleBorderColor);\n                  mapElement.setAttribute('stroke-width', legendToggleBorderWidth.toString());\n                }\n\n                if (targetEle !== null) {\n                  legendShapeId = querySelector(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                  legendShapeId.setAttribute(\"fill\", \"#E5E5E5\");\n                  legendTextId = querySelector(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                  legendTextId.setAttribute(\"fill\", \"#E5E5E5\");\n                }\n              } else {\n                mapElement.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                mapElement.setAttribute('stroke', this.maps.layers[k].bubbleSettings[j].border.color);\n                mapElement.setAttribute('opacity', this.maps.layers[k].bubbleSettings[j].opacity.toString());\n                mapElement.setAttribute('stroke-width', this.maps.layers[k].bubbleSettings[j].border.width.toString());\n\n                if (targetEle !== null) {\n                  legendShapeId = querySelector(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                  legendShapeId.setAttribute(\"fill\", this.legendCollection[legendIndex]['fill']);\n                  legendTextId = querySelector(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                  legendTextId.setAttribute(\"fill\", \"#757575\");\n                }\n              }\n            }\n\n            selectedItem['_isVisible'] = isVisible ? false : true;\n          }\n        }\n      }\n\n      if (this.maps.legendSettings.type === \"Layers\" && this.maps.legendSettings.toggleLegendSettings.enable) {\n        var layerElement = void 0;\n        this.removeCollections(targetEle, legendIndex);\n        var toggledLegendIdIndex = this.maps.toggledLegendId.indexOf(legendIndex);\n\n        if (toggledLegendIdIndex !== -1) {\n          isVisible = false;\n        }\n\n        ;\n\n        for (var j = 0; j < this.maps.layers.length; j++) {\n          for (var i = 0; i < selectedItem.length; i++) {\n            shape = this.legendCollection[legendIndex]['data'][i];\n            layerElement = querySelector(this.maps.element.id + '_LayerIndex_' + shape['layerIndex'] + '_shapeIndex_' + shape['shapeIndex'] + '_dataIndex_' + shape['dataIndex'], this.maps.element.id);\n\n            if (layerElement !== null) {\n              var toggledShapeIdIndex = this.maps.toggledShapeElementId.indexOf(layerElement.id);\n\n              if (isVisible) {\n                if (i === 0) {\n                  this.maps.toggledLegendId.push(legendIndex);\n                }\n\n                if (toggledShapeIdIndex === -1) {\n                  this.maps.toggledShapeElementId.push(layerElement.id);\n                }\n\n                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                  layerElement.setAttribute('fill', this.maps.layers[j].shapeSettings.fill);\n                  layerElement.setAttribute('opacity', this.maps.layers[j].shapeSettings.opacity.toString());\n                  layerElement.setAttribute('stroke', this.maps.layers[j].shapeSettings.border.color);\n                  layerElement.setAttribute('stroke-width', this.maps.layers[j].shapeSettings.border.width.toString());\n                } else {\n                  layerElement.setAttribute(\"fill\", legendToggleFill);\n                  layerElement.setAttribute(\"opacity\", legendToggleOpacity.toString());\n                  layerElement.setAttribute('stroke', legendToggleBorderColor);\n                  layerElement.setAttribute('stroke-width', legendToggleBorderWidth.toString());\n                }\n\n                if (targetEle !== null) {\n                  legendTextId = querySelector(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                  legendTextId.setAttribute(\"fill\", \"#E5E5E5\");\n                  legendShapeId = querySelector(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                  legendShapeId.setAttribute(\"fill\", \"#E5E5E5\");\n                }\n              } else {\n                if (toggledLegendIdIndex !== -1 && i === 0) {\n                  this.maps.toggledLegendId.splice(toggledLegendIdIndex, 1);\n                }\n\n                if (toggledShapeIdIndex !== -1) {\n                  this.maps.toggledShapeElementId.splice(toggledShapeIdIndex, 1);\n                }\n\n                layerElement.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                layerElement.setAttribute('opacity', this.maps.layers[j].shapeSettings.opacity.toString());\n                layerElement.setAttribute('stroke', this.maps.layers[j].shapeSettings.border.color);\n                layerElement.setAttribute('stroke-width', this.maps.layers[j].shapeSettings.border.width.toString());\n\n                if (targetEle !== null) {\n                  legendTextId = querySelector(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                  legendTextId.setAttribute(\"fill\", \"#757575\");\n                  legendShapeId = querySelector(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                  legendShapeId.setAttribute(\"fill\", this.legendCollection[legendIndex]['fill']);\n                }\n              }\n            }\n          }\n        }\n\n        selectedItem['_isVisible'] = isVisible ? false : true;\n      }\n    } else if (!isNullOrUndefined(targetEle.id) && (targetEle.id.indexOf(this.maps.element.id + '_Legend_Shape_Index') > -1 || targetEle.id.indexOf(this.maps.element.id + '_Legend_Index') !== -1) && this.maps.legendSettings.visible && targetEle.id.indexOf('_Text') === -1) {\n      var LegendInteractive = void 0;\n      var legendIndex = parseFloat(targetEle.id.substr((this.maps.element.id + '_Legend_Index_').length));\n      var mapdata = void 0;\n      var selectedItem = this.legendCollection[legendIndex]['data'];\n      var isVisible = selectedItem['_isVisible'];\n\n      if (this.maps.legendSettings.type === \"Bubbles\" && this.maps.legendSettings.toggleLegendSettings.enable) {\n        for (var k = 0; k < this.maps.layers.length; k++) {\n          for (var j = 0; j < this.maps.layers[k].bubbleSettings.length; j++) {\n            for (var i = 0; i < selectedItem.length; i++) {\n              mapdata = this.legendCollection[legendIndex]['data'][i];\n              LegendInteractive = querySelector(this.maps.element.id + '_LayerIndex_' + mapdata['layerIndex'] + '_BubbleIndex_' + j + '_dataIndex_' + mapdata['dataIndex'], this.maps.element.id);\n\n              if (isVisible && LegendInteractive !== null) {\n                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                  LegendInteractive.setAttribute('fill', this.maps.layers[k].shapeSettings.fill);\n                  LegendInteractive.setAttribute('stroke', this.maps.layers[k].shapeSettings.border.color);\n                  LegendInteractive.setAttribute('stroke-width', this.maps.layers[k].shapeSettings.border.width.toString());\n                  LegendInteractive.setAttribute('opacity', this.maps.layers[k].shapeSettings.opacity.toString());\n                } else {\n                  LegendInteractive.setAttribute(\"fill\", legendToggleFill);\n                  LegendInteractive.setAttribute(\"opacity\", legendToggleOpacity.toString());\n                  LegendInteractive.setAttribute('stroke', legendToggleBorderColor);\n                  LegendInteractive.setAttribute('stroke-width', legendToggleBorderWidth.toString());\n                }\n\n                if (targetEle !== null) {\n                  legendTextId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                  legendTextId.setAttribute(\"fill\", \"#E5E5E5\");\n                  legendShapeId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                  legendShapeId.setAttribute(\"fill\", \"#E5E5E5\");\n                }\n              } else {\n                LegendInteractive.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                LegendInteractive.setAttribute('stroke', this.maps.layers[k].bubbleSettings[j].border.color);\n                LegendInteractive.setAttribute('stroke-width', this.maps.layers[k].bubbleSettings[j].border.width.toString());\n                LegendInteractive.setAttribute('opacity', this.maps.layers[k].bubbleSettings[j].opacity.toString());\n\n                if (targetEle !== null) {\n                  legendShapeId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                  legendShapeId.setAttribute(\"fill\", this.legendCollection[legendIndex]['fill']);\n                  legendTextId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                  legendTextId.setAttribute(\"fill\", \"#757575\");\n                }\n              }\n            }\n\n            selectedItem['_isVisible'] = isVisible ? false : true;\n          }\n        }\n      }\n\n      if (this.maps.legendSettings.type === \"Layers\" && this.maps.legendSettings.toggleLegendSettings.enable) {\n        var mapLegendElement = void 0;\n        this.removeCollections(targetEle, legendIndex);\n        var toggleLegendIdIndex = this.maps.toggledLegendId.indexOf(legendIndex);\n\n        if (toggleLegendIdIndex !== -1) {\n          isVisible = false;\n        }\n\n        ;\n\n        for (var k = 0; k < this.maps.layers.length; k++) {\n          for (var i = 0; i < selectedItem.length; i++) {\n            mapdata = this.legendCollection[legendIndex]['data'][i];\n            mapLegendElement = querySelector(this.maps.element.id + '_LayerIndex_' + mapdata['layerIndex'] + '_shapeIndex_' + mapdata['shapeIndex'] + '_dataIndex_' + mapdata['dataIndex'], this.maps.element.id);\n\n            if (mapLegendElement !== null) {\n              var toggledShapeIdIndex = this.maps.toggledShapeElementId.indexOf(mapLegendElement.id);\n\n              if (isVisible) {\n                if (i === 0) {\n                  this.maps.toggledLegendId.push(legendIndex);\n                }\n\n                if (toggledShapeIdIndex === -1) {\n                  this.maps.toggledShapeElementId.push(mapLegendElement.id);\n                }\n\n                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                  mapLegendElement.setAttribute('fill', this.maps.layers[0].shapeSettings.fill);\n                  mapLegendElement.setAttribute('stroke', this.maps.layers[0].shapeSettings.border.color);\n                  mapLegendElement.setAttribute('opacity', this.maps.layers[k].shapeSettings.opacity.toString());\n                  mapLegendElement.setAttribute('stroke-width', this.maps.layers[k].shapeSettings.border.width.toString());\n                } else {\n                  mapLegendElement.setAttribute(\"fill\", legendToggleFill);\n                  mapLegendElement.setAttribute(\"opacity\", legendToggleOpacity.toString());\n                  mapLegendElement.setAttribute('stroke', legendToggleBorderColor);\n                  mapLegendElement.setAttribute('stroke-width', legendToggleBorderWidth.toString());\n                }\n\n                if (targetEle !== null) {\n                  legendShapeId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                  legendShapeId.setAttribute(\"fill\", \"#E5E5E5\");\n                  legendTextId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                  legendTextId.setAttribute(\"fill\", \"#E5E5E5\");\n                }\n              } else {\n                if (toggleLegendIdIndex !== -1 && i === 0) {\n                  this.maps.toggledLegendId.splice(toggleLegendIdIndex, 1);\n                }\n\n                if (toggledShapeIdIndex !== -1) {\n                  this.maps.toggledShapeElementId.splice(toggledShapeIdIndex, 1);\n                }\n\n                mapLegendElement.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                mapLegendElement.setAttribute('stroke', this.maps.layers[0].shapeSettings.border.color);\n                mapLegendElement.setAttribute('opacity', this.maps.layers[k].shapeSettings.opacity.toString());\n                mapLegendElement.setAttribute('stroke-width', this.maps.layers[k].shapeSettings.border.width.toString());\n\n                if (targetEle !== null) {\n                  legendTextId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                  legendTextId.setAttribute(\"fill\", \"#757575\");\n                  legendShapeId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                  legendShapeId.setAttribute(\"fill\", this.legendCollection[legendIndex]['fill']);\n                }\n              }\n            }\n          }\n        }\n\n        selectedItem['_isVisible'] = isVisible ? false : true;\n      }\n    }\n  };\n\n  Legend.prototype.removeCollections = function (targetEle, legendIndex) {\n    this.removeLegendSelectionCollection(targetEle);\n    var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, targetEle);\n\n    if (legendSelectionIndex !== -1) {\n      this.maps.legendSelectionCollection.splice(legendSelectionIndex, 1);\n    }\n\n    var legendHighlightIndex = this.getIndexofLegend(this.legendHighlightCollection, targetEle);\n\n    if (legendHighlightIndex !== -1) {\n      this.legendHighlightCollection.splice(legendSelectionIndex, 1);\n    }\n\n    var shapeHighlightIndex = this.getIndexofLegend(this.shapeHighlightCollection, targetEle);\n\n    if (shapeHighlightIndex !== -1) {\n      this.shapeHighlightCollection.splice(shapeHighlightIndex, 1);\n    }\n\n    var selectedIndex = this.maps.selectedLegendElementId.indexOf(legendIndex);\n\n    if (selectedIndex !== -1) {\n      this.maps.selectedLegendElementId.splice(selectedIndex, 1);\n    }\n  };\n\n  Legend.prototype.removeEventListener = function () {\n    if (this.maps.isDestroyed) {\n      return;\n    }\n\n    this.maps.off(Browser.touchMoveEvent, this.interactiveHandler);\n    this.maps.off(Browser.touchEndEvent, this.interactiveHandler);\n    this.maps.off(click, this.legendClick);\n  };\n\n  Legend.prototype.getLegendData = function (layerIndex, dataIndex, data, dataPath, layerData, shapePropertyPath, value) {\n    var legendData = [];\n\n    if (Object.prototype.toString.call(layerData) === '[object Array]') {\n      for (var i = 0; i < layerData.length; i++) {\n        var shapeData = layerData[i];\n        var dataPathValue = dataPath.indexOf(\".\") > -1 ? getValueFromObject(data, dataPath) : data[dataPath];\n        var shapePath = checkPropertyPath(data[dataPath], shapePropertyPath, shapeData['properties']);\n        var dataPathValueCase = !isNullOrUndefined(dataPathValue) ? dataPathValue.toLowerCase() : dataPathValue;\n        var shapeDataValueCase = !isNullOrUndefined(shapeData['properties'][shapePath]) && isNaN(shapeData['properties'][shapePath]) ? shapeData['properties'][shapePath].toLowerCase() : shapeData['properties'][shapePath];\n\n        if (shapeDataValueCase === dataPathValueCase) {\n          legendData.push({\n            layerIndex: layerIndex,\n            shapeIndex: i,\n            dataIndex: dataIndex,\n            name: data[dataPath],\n            value: value\n          });\n        }\n      }\n    }\n\n    return legendData;\n  };\n\n  Legend.prototype.legendGradientColor = function (colorMap, legendIndex) {\n    var legendFillColor;\n    var xmlns = 'http://www.w3.org/2000/svg';\n\n    if (!isNullOrUndefined(colorMap.color) && typeof colorMap.color === 'object') {\n      var linerGradientEle = document.createElementNS(xmlns, 'linearGradient');\n      var opacity = 1;\n      var position = this.maps.legendSettings.position;\n      var x2 = void 0;\n      var y2 = void 0;\n      x2 = position === 'Top' || position === 'Bottom' ? '100' : '0';\n      y2 = position === 'Top' || position === 'Bottom' ? '0' : '100';\n      linerGradientEle.setAttribute('id', 'linear_' + legendIndex + '_' + this.maps.element.id);\n      linerGradientEle.setAttribute('x1', 0 + '%');\n      linerGradientEle.setAttribute('y1', 0 + '%');\n      linerGradientEle.setAttribute('x2', x2 + '%');\n      linerGradientEle.setAttribute('y2', y2 + '%');\n\n      for (var b = 0; b < colorMap.color.length; b++) {\n        var offsetColor = 100 / (colorMap.color.length - 1);\n        var stopEle = document.createElementNS(xmlns, 'stop');\n        stopEle.setAttribute('offset', b * offsetColor + '%');\n        stopEle.setAttribute('stop-color', colorMap.color[b]);\n        stopEle.setAttribute('stop-opacity', opacity.toString());\n        linerGradientEle.appendChild(stopEle);\n      }\n\n      this.legendLinearGradient = linerGradientEle;\n      var color = 'url(' + '#linear_' + legendIndex + '_' + this.maps.element.id + ')';\n      this.defsElement.appendChild(linerGradientEle);\n      legendFillColor = color;\n    }\n\n    return legendFillColor;\n  };\n  /**\n   * Get module name.\n   */\n\n\n  Legend.prototype.getModuleName = function () {\n    return 'Legend';\n  };\n  /**\n   * To destroy the legend.\n   * @return {void}\n   * @private\n   */\n\n\n  Legend.prototype.destroy = function (maps) {\n    /**\n     * Destroy method performed here\n     */\n    this.removeEventListener();\n  };\n\n  return Legend;\n}();\n\nexport { Legend };","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/node_modules/@syncfusion/ej2-maps/src/maps/layers/legend.js"],"names":["click","legendRendering","Rect","measureText","PathOption","textTrim","removeClass","querySelector","getTemplateFunction","maintainStyleClass","getValueFromObject","RectOption","Size","TextOption","Point","renderTextElement","drawSymbol","checkPropertyPath","getElement","isNullOrUndefined","Browser","EventHandler","remove","extend","Legend","maps","legendBorderRect","totalPages","page","currentPage","legendItemRect","heightIncrement","widthIncrement","textMaxWidth","shapeHighlightCollection","legendHighlightCollection","shapePreviousColor","selectedNonLegendShapes","shapeToggled","legendElement","addEventListener","prototype","renderLegend","legendRenderingCollections","legendCollection","defsElement","renderer","createDefs","svgObject","appendChild","calculateLegendBounds","drawLegend","_this","map","legend","legendSettings","spacing","leftPadding","topPadding","mapAreaRect","y","Array","forEach","call","layersCollection","layer","layerIndex","shapeData","layerData","dataPath","shapeDataPath","propertyPath","shapePropertyPath","dataSource","colorValuePath","colorMapping","type","visible","shapeSettings","getLegends","_i","_a","bubbleSettings","length","bubble","getMarkersLegendCollections","markerSettings","i","legendItem","eventArgs","name","cancel","fill","shape","shapeBorder","text","toString","trigger","splice","defaultSize","legendTitle","title","titleTextStyle","titleStyle","legendMode","mode","shapeX","shapeY","textX","textY","shapePadding","textPadding","shapeHeight","shapeWidth","shapeLocation","textLocation","legendRectCollection","location_1","position","labelAction","labelDisplayMode","arrangement","orientation","legendWidth","width","indexOf","availableSize","parseInt","legendHeight","height","legendItemStartX_1","legendItemStartY_1","startX","startY","legendtitleSize","itemTextStyle","textStyle","rectWidth","rectHeight","legendLength","position_1","labelPosition","textX_1","textY_1","textPadding_1","itemStartX","itemStartY","maxTextHeight","maxTextWidth","legendText","itemTextSize","Math","max","abs","push","x","textWidth","textHeight","j","Page","Collection","legendTextSize","maxSize","prvePositionX","nextPositionY","getPageChanged","prevPositionY","nextPositionX","DisplayText","ImageSrc","Shape","Text","Fill","legendShape","idIndex","collection","legendObj","index","legendRect","getRangeLegendCollection","getEqualLegendCollection","getDataLegendCollection","legendTextTrim","maxWidth","font","legendRectSize","label","size","legendWithoutTextSize","textLength","substring","totalSize","render","textOptions","textFont","legendGroup","createGroup","id","element","itemId","textId","item","bounds","renderLegendBorder","color","themeStyle","legendTextColor","rectOptions","opacity","fontFamily","legendFontSize","drawRectangle","legendToggle","drawLegendItem","shapeSize","renderOptions","strokeColor","strokeWidth","shapeId","imageUrl","renderOptions_1","trimmedText","pagingGroup","pagingText","pagingFont","pagingTextSize","leftPageX","rightPageX","locY","pageTextX","leftPageElement","rightPageElement","rightPath","leftPath","leftPageOptions","drawPath","leftRectPageOptions","wireEvents","rightPageOptions","rightRectPageOptions","pageTextOptions","fontStyle","fontWeight","createText","legendHighLightAndSelection","targetElement","value","shapeIndex","dataIndex","textEle","document","getElementById","replace","legendModule","multiSelectEnable","layers","selectionSettings","enableMultiSelect","selectLength","interactProcess","parseFloat","charAt","updateLegendElement","toggleLegendCheck","toggledLegendId","toggleLegendSettings","enable","collectionIndex","getIndexofLegend","removeLegendHighlightCollection","shapeSelections","removeAllSelections","legendSelectionCollection","k","removeLegendSelectionCollection","selectedLegendElementId","legendSelection","z","idIndex_1","split","textContent","module","data","highlightSettings","shapeEle","shapeMatch","i_1","pushCollection","legendHighlightColor","shapeItemCount","shapeOldFillColor","getAttribute","shapeOldColor","setColor","border","legendSelectionClass","legendSelectionColor","selectedElementId","removeLegend","borderColor","borderWidth","setAttribute","Number","scale","oldElement","legendOldFill","legendOldOpacity","legendOldBorderColor","legendOldBorderWidth","shapeOpacity","shapeOldBorderColor","shapeOldBorderWidth","Elements","dataCount","shapeFillColor","shapeElements","shapesOfLegend","shapeElement","selectedElementIdIndex","removeShapeHighlightCollection","removeFill","shapeHighLightAndSelection","getValue","undefined","indexes","legendIndexOnShape","shapeDataOnLegend","checkSelection","selectionIndex","content","oldShapeElement","length_1","shapeMatched","selectionEle","isTargetSelected","selectedLegendIndex","multiSelection","legendSelectionIndex","addId","getElementsByClassName","target","selectEle","IsSelected","SelectionIndex","targetCollection","legendIndex","e","selectedElement","actualIndex","path","legendType","currentCollection","currentCollectionLength","dataValue","currentIndex","process","elements","currentElement","legendShapeElements","legendTextId","textElement","legendShapeId","trimTitle","textSize","background","getLegendAlignment","translate","changeNextPage","style","pointerEvents","totalRect","areaX","areaY","areaHeight","areaWidth","totalWidth","totalHeight","location","alignment","markers","marker","markerIndex","field","templateFn","isDuplicate","imageSrc","showLegend","showLegendPath","template","templateElement","markerEle","childElementCount","src","removeDuplicateLegend","removeDuplicates","rangeData","_loop_1","colorMap","from","to","colorMapProcess_1","colorValue","getLegendData","legendFill","Object","this_1","legendGradientColor","getOverallLegendItemsCollection","colorMapping_1","legendData","newColllection","equalValues","equalData","outOfRangeValues","outOfRange","_loop_2","eqaulColorProcess_1","equalValue","equalIndex","this_2","minOpacity","maxOpacity","range_1","outRange","rangeValue","isNaN","outfill","legendOutFill","colorMapping_2","valuePath","newData","interactiveHandler","hoverId","stroke","markerVisible","getBubbleVisible","svgRect","getBoundingClientRect","currentData","rect","left","top","renderInteractivePointer","pathOptions","locX","direction","invertedPointer","add","touchStartEvent","isDestroyed","on","touchMoveEvent","touchEndEvent","legendClick","targetEle","legendToggleFill","legendToggleOpacity","legendToggleBorderColor","legendToggleBorderWidth","parentNode","mapElement","parentElement","substr","selectedItem","isVisible","applyShapeSettings","layerElement","removeCollections","toggledLegendIdIndex","toggledShapeIdIndex","toggledShapeElementId","LegendInteractive","mapdata","mapLegendElement","toggleLegendIdIndex","legendHighlightIndex","shapeHighlightIndex","selectedIndex","removeEventListener","off","dataPathValue","shapePath","dataPathValueCase","toLowerCase","shapeDataValueCase","legendFillColor","xmlns","linerGradientEle","createElementNS","x2","y2","b","offsetColor","stopEle","legendLinearGradient","getModuleName","destroy"],"mappings":"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","sourcesContent":["import { click, legendRendering } from '../index';\nimport { Rect, measureText, PathOption, textTrim, removeClass, querySelector, getTemplateFunction, maintainStyleClass, getValueFromObject } from '../utils/helper';\nimport { RectOption, Size, TextOption, Point, renderTextElement, drawSymbol, checkPropertyPath, getElement } from '../utils/helper';\nimport { isNullOrUndefined, Browser, EventHandler, remove, extend } from '@syncfusion/ej2-base';\n/**\n * Legend module is used to render legend for the maps\n */\nvar Legend = /** @class */ (function () {\n    function Legend(maps) {\n        this.legendBorderRect = new Rect(0, 0, 0, 0);\n        /**\n         * @private\n         */\n        this.totalPages = [];\n        this.page = 0;\n        /**\n         * @private\n         */\n        this.currentPage = 0;\n        this.legendItemRect = new Rect(0, 0, 0, 0);\n        this.heightIncrement = 0;\n        this.widthIncrement = 0;\n        this.textMaxWidth = 0;\n        this.shapeHighlightCollection = [];\n        this.legendHighlightCollection = [];\n        this.shapePreviousColor = [];\n        this.selectedNonLegendShapes = [];\n        this.shapeToggled = true;\n        this.legendElement = null;\n        this.maps = maps;\n        this.addEventListener();\n    }\n    /**\n     * To calculate legend bounds and draw the legend shape and text.\n     */\n    Legend.prototype.renderLegend = function () {\n        this.legendRenderingCollections = [];\n        this.legendCollection = [];\n        this.totalPages = [];\n        this.widthIncrement = 0;\n        this.heightIncrement = 0;\n        this.defsElement = this.maps.renderer.createDefs();\n        this.maps.svgObject.appendChild(this.defsElement);\n        this.calculateLegendBounds();\n        this.drawLegend();\n    };\n    /* tslint:disable-next-line:max-func-body-length */\n    Legend.prototype.calculateLegendBounds = function () {\n        var _this = this;\n        var map = this.maps;\n        var legend = map.legendSettings;\n        this.legendCollection = [];\n        var spacing = 10;\n        var leftPadding = 10;\n        var topPadding = map.mapAreaRect.y;\n        this.legendRenderingCollections = [];\n        Array.prototype.forEach.call(map.layersCollection, function (layer, layerIndex) {\n            if (!isNullOrUndefined(layer.shapeData)) {\n                var layerData = layer.shapeData['features'];\n                var dataPath = layer.shapeDataPath;\n                var propertyPath = layer.shapePropertyPath;\n                var dataSource = layer.dataSource;\n                var colorValuePath = void 0;\n                var colorMapping = void 0;\n                if (legend.type === 'Layers' && layer.visible) {\n                    colorValuePath = layer.shapeSettings.colorValuePath;\n                    colorMapping = layer.shapeSettings.colorMapping;\n                    _this.getLegends(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n                }\n                else if (legend.type === 'Bubbles') {\n                    for (var _i = 0, _a = layer.bubbleSettings; _i < _a.length; _i++) {\n                        var bubble = _a[_i];\n                        if (bubble.visible) {\n                            colorValuePath = bubble.colorValuePath;\n                            colorMapping = bubble.colorMapping;\n                            dataSource = bubble.dataSource;\n                            _this.getLegends(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n                        }\n                    }\n                }\n                else {\n                    _this.getMarkersLegendCollections(layerIndex, layer.markerSettings);\n                }\n            }\n        });\n        if (this.legendCollection.length > 0) {\n            for (var i = 0; i < this.legendCollection.length; i++) {\n                var legendItem = this.legendCollection[i];\n                var eventArgs = {\n                    name: legendRendering, cancel: false, fill: legendItem['fill'], shape: legend.shape,\n                    shapeBorder: legend.shapeBorder,\n                    text: typeof legendItem['text'] === 'number' ? legendItem['text'].toString() : legendItem['text']\n                };\n                map.trigger('legendRendering', eventArgs);\n                legendItem['fill'] = eventArgs.fill;\n                legendItem['shape'] = eventArgs.shape;\n                legendItem['shapeBorder'] = eventArgs.shapeBorder;\n                legendItem['text'] = eventArgs.text;\n                if (eventArgs.cancel) {\n                    this.legendCollection.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        var defaultSize = 25;\n        var legendTitle = map.legendSettings.title.text;\n        var titleTextStyle = map.legendSettings.titleStyle;\n        if (this.legendCollection.length > 0) {\n            var legendMode = legend.mode;\n            var shapeX = 0;\n            var shapeY = 0;\n            var textX = 0;\n            var textY = 0;\n            var shapePadding = legend.shapePadding;\n            var textPadding = 10;\n            var shapeHeight = legend.shapeHeight;\n            var shapeWidth = legend.shapeWidth;\n            var shapeLocation = [];\n            var textLocation = [];\n            var legendRectCollection = [];\n            var location_1;\n            var position = legend.position;\n            var labelAction = legend.labelDisplayMode;\n            var arrangement = (legend.orientation === 'None') ? ((position === 'Top' || position === 'Bottom')\n                ? 'Horizontal' : 'Vertical') : legend.orientation;\n            var legendWidth = (legend.width.length > 1) ? (legend.width.indexOf('%') > -1) ? (map.availableSize.width / 100)\n                * parseInt(legend.width, 10) : parseInt(legend.width, 10) : null;\n            var legendHeight = (legend.height.length > 1) ? (legend.height.indexOf('%') > -1) ? (map.availableSize.height / 100) *\n                parseInt(legend.height, 10) : parseInt(legend.height, 10) : null;\n            var legendItemStartX_1;\n            var legendItemStartY_1;\n            var startX = 0;\n            var startY = 0;\n            var legendtitleSize = measureText(legendTitle, titleTextStyle);\n            if (legendMode === 'Interactive') {\n                var itemTextStyle = legend.textStyle;\n                var rectWidth = void 0;\n                var rectHeight = void 0;\n                var legendLength = this.legendCollection.length;\n                rectWidth = (arrangement === 'Horizontal') ? (isNullOrUndefined(legendWidth)) ? (map.mapAreaRect.width / legendLength) :\n                    (legendWidth / legendLength) : (isNullOrUndefined(legendWidth)) ? defaultSize : legendWidth;\n                rectHeight = (arrangement === 'Horizontal') ? (isNullOrUndefined(legendHeight)) ? defaultSize : legendHeight :\n                    (isNullOrUndefined(legendHeight)) ? (map.mapAreaRect.height / legendLength) : (legendHeight / legendLength);\n                startX = 0;\n                startY = legendtitleSize.height + spacing;\n                var position_1 = legend.labelPosition;\n                var textX_1 = 0;\n                var textY_1 = 0;\n                var textPadding_1 = 10;\n                var itemStartX = 0;\n                var itemStartY = 0;\n                var maxTextHeight = 0;\n                var maxTextWidth = 0;\n                for (var i = 0; i < this.legendCollection.length; i++) {\n                    startX = (arrangement === 'Horizontal') ? (startX + rectWidth) : startX;\n                    startY = (arrangement === 'Horizontal') ? startY : (startY + rectHeight);\n                    var legendText = this.legendCollection[i]['text'];\n                    var itemTextSize = new Size(0, 0);\n                    if (labelAction === 'None') {\n                        itemTextSize = measureText(legendText, itemTextStyle);\n                    }\n                    else if (labelAction === 'Trim') {\n                        legendText = textTrim((arrangement === 'Horizontal' ? rectWidth : rectHeight), legendText, itemTextStyle);\n                        itemTextSize = measureText(legendText, itemTextStyle);\n                    }\n                    else {\n                        legendText = '';\n                    }\n                    maxTextHeight = Math.max(maxTextHeight, itemTextSize.height);\n                    maxTextWidth = Math.max(maxTextWidth, itemTextSize.width);\n                    if (itemTextSize.width > 0 && itemTextSize.height > 0) {\n                        if (arrangement === 'Horizontal') {\n                            textX_1 = startX + (rectWidth / 2);\n                            textY_1 = (position_1 === 'After') ? (startY + rectHeight + (itemTextSize.height / 2)) + textPadding_1 :\n                                (startY - textPadding_1);\n                        }\n                        else {\n                            textX_1 = (position_1 === 'After') ? startX - (itemTextSize.width / 2) - textPadding_1\n                                : (startX + rectWidth + itemTextSize.width / 2) + textPadding_1;\n                            textY_1 = startY + (rectHeight / 2) + (itemTextSize.height / 4);\n                        }\n                    }\n                    if (i === 0) {\n                        itemStartX = (arrangement === 'Horizontal') ? startX : (position_1 === 'After') ?\n                            textX_1 - (itemTextSize.width / 2) : startX;\n                        itemStartY = (arrangement === 'Horizontal') ? (position_1 === 'After') ? startY :\n                            textY_1 - (itemTextSize.height / 2) : startY;\n                        if (this.legendCollection.length === 1) {\n                            legendWidth = (arrangement === 'Horizontal') ? Math.abs((startX + rectWidth) - itemStartX) :\n                                (rectWidth + maxTextWidth + textPadding_1);\n                            legendHeight = (arrangement === 'Horizontal') ? (rectHeight + (maxTextHeight / 2) + textPadding_1) :\n                                Math.abs((startY + rectHeight) - itemStartY);\n                        }\n                    }\n                    else if (i === this.legendCollection.length - 1) {\n                        legendWidth = (arrangement === 'Horizontal') ? Math.abs((startX + rectWidth) - itemStartX) :\n                            (rectWidth + maxTextWidth + textPadding_1);\n                        legendHeight = (arrangement === 'Horizontal') ? (rectHeight + (maxTextHeight / 2) + textPadding_1) :\n                            Math.abs((startY + rectHeight) - itemStartY);\n                    }\n                    this.legendRenderingCollections.push({\n                        fill: this.legendCollection[i]['fill'], x: startX, y: startY,\n                        width: rectWidth, height: rectHeight,\n                        text: legendText, textX: textX_1, textY: textY_1,\n                        textWidth: itemTextSize.width, textHeight: itemTextSize.height,\n                        shapeBorder: this.legendCollection[i]['shapeBorder']\n                    });\n                }\n                if (this.legendCollection.length === 1) {\n                    legendHeight = rectHeight;\n                    legendWidth = rectWidth;\n                }\n                this.legendItemRect = { x: itemStartX, y: itemStartY, width: legendWidth, height: legendHeight };\n            }\n            else {\n                legendWidth = (isNullOrUndefined(legendWidth)) ? map.mapAreaRect.width : legendWidth;\n                legendHeight = (isNullOrUndefined(legendHeight)) ? map.mapAreaRect.height : legendHeight;\n                var j = 0;\n                this.page = 0;\n                for (var i = 0; i < this.legendCollection.length; i++) {\n                    var legendItem = this.legendCollection[i];\n                    if (isNullOrUndefined(this.totalPages[this.page])) {\n                        this.totalPages[this.page] = { Page: (this.page + 1), Collection: [] };\n                    }\n                    var legendTextSize = measureText(legendItem['text'], legend.textStyle);\n                    this.textMaxWidth = Math.max(this.textMaxWidth, legendTextSize.width);\n                    if (i === 0) {\n                        startX = shapeX = (leftPadding + (shapeWidth / 2));\n                        startY = shapeY = topPadding + legendtitleSize.height + (shapeHeight > legendTextSize.height ? shapeHeight / 2\n                            : (legendTextSize.height / 4));\n                    }\n                    else {\n                        var maxSize = (legendTextSize.height > shapeHeight) ? legendTextSize.height : shapeHeight;\n                        if (arrangement === 'Horizontal') {\n                            var prvePositionX = (textLocation[j - 1].x + textLocation[j - 1].width) + textPadding + shapeWidth;\n                            if ((prvePositionX + shapePadding + legendTextSize.width) > legendWidth) {\n                                var nextPositionY = (textLocation[j - 1].y > (shapeLocation[j - 1].y + (shapeHeight / 2)) ?\n                                    textLocation[j - 1].y : (shapeLocation[j - 1].y + (shapeHeight / 2))) + topPadding;\n                                if ((nextPositionY + maxSize) > legendHeight) {\n                                    this.getPageChanged();\n                                    j = 0;\n                                    shapeLocation = [];\n                                    textLocation = [];\n                                    legendRectCollection = [];\n                                    shapeX = startX;\n                                    shapeY = startY;\n                                }\n                                else {\n                                    shapeX = (shapeLocation[0].x);\n                                    shapeY = (nextPositionY + (maxSize / 2));\n                                }\n                            }\n                            else {\n                                shapeX = (prvePositionX - (shapeWidth / 2));\n                                shapeY = (shapeLocation[j - 1]).y;\n                            }\n                        }\n                        else {\n                            var prevPositionY = textLocation[j - 1].y > shapeLocation[j - 1].y + (shapeHeight / 2) ?\n                                textLocation[j - 1].y : shapeLocation[j - 1].y + (shapeHeight / 2);\n                            if ((prevPositionY + topPadding + maxSize) > legendHeight) {\n                                var nextPositionX = (textLocation[j - 1].x + this.textMaxWidth + textPadding);\n                                if ((nextPositionX + shapePadding + legendTextSize.width) > legendWidth) {\n                                    shapeX = startX;\n                                    shapeY = startY;\n                                    legendRectCollection = [];\n                                    textLocation = [];\n                                    shapeLocation = [];\n                                    this.getPageChanged();\n                                    j = 0;\n                                }\n                                else {\n                                    shapeX = nextPositionX + (shapeWidth / 2);\n                                    shapeY = (shapeLocation[0].y);\n                                }\n                            }\n                            else {\n                                shapeX = shapeLocation[j - 1].x;\n                                shapeY = prevPositionY + topPadding + (shapeHeight / 2);\n                            }\n                        }\n                    }\n                    textX = shapeX + (shapeWidth / 2) + shapePadding;\n                    textY = shapeY + (legendTextSize.height / 4);\n                    shapeLocation.push({ x: shapeX, y: shapeY });\n                    textLocation.push({ x: textX, y: textY, width: legendTextSize.width, height: (legendTextSize.height / 2) });\n                    this.totalPages[this.page]['Collection'].push({\n                        DisplayText: legendItem['text'],\n                        ImageSrc: legendItem['imageSrc'],\n                        Shape: { x: shapeX, y: shapeY },\n                        Text: { x: textX, y: textY },\n                        Fill: legendItem['fill'],\n                        legendShape: legendItem['shape'],\n                        shapeBorder: legendItem['shapeBorder'],\n                        idIndex: i,\n                        Rect: {\n                            x: shapeLocation[j].x - (shapeWidth / 2),\n                            y: (shapeLocation[j].y - (shapeHeight / 2)) < (textY - legendTextSize.height) ?\n                                (shapeLocation[j].y - (shapeHeight / 2)) : (textY - legendTextSize.height),\n                            width: Math.abs((shapeLocation[j].x - (shapeWidth / 2)) - (textX + legendTextSize.width)),\n                            height: ((shapeHeight > legendTextSize.height) ? shapeHeight : legendTextSize.height)\n                        }\n                    });\n                    j++;\n                }\n                var collection = this.totalPages[0]['Collection'];\n                Array.prototype.forEach.call(collection, function (legendObj, index) {\n                    var legendRect = new Rect(legendObj['Rect']['x'], legendObj['Rect']['y'], legendObj['Rect']['width'], legendObj['Rect']['height']);\n                    if (index === 0) {\n                        legendItemStartX_1 = legendRect.x;\n                        legendItemStartY_1 = legendRect.y;\n                    }\n                    _this.widthIncrement = Math.max(_this.widthIncrement, Math.abs(legendItemStartX_1 - (legendRect.x + legendRect.width)));\n                    _this.heightIncrement = Math.max(_this.heightIncrement, Math.abs(legendItemStartY_1 - (legendRect.y + legendRect.height)));\n                });\n                legendWidth = ((this.widthIncrement < legendWidth) ? this.widthIncrement : legendWidth);\n                legendHeight = ((this.heightIncrement < legendHeight) ? this.heightIncrement : legendHeight);\n                this.legendItemRect = {\n                    x: collection[0]['Rect']['x'], y: collection[0]['Rect']['y'],\n                    width: legendWidth, height: legendHeight\n                };\n            }\n        }\n    };\n    /**\n     *\n     */\n    Legend.prototype.getLegends = function (layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n        this.getRangeLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n        this.getEqualLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n        this.getDataLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n    };\n    Legend.prototype.getPageChanged = function () {\n        this.page++;\n        if (isNullOrUndefined(this.totalPages[this.page])) {\n            this.totalPages[this.page] = { Page: (this.page + 1), Collection: [] };\n        }\n    };\n    Legend.prototype.legendTextTrim = function (maxWidth, text, font, legendRectSize) {\n        var label = text;\n        var size = measureText(text, font).width;\n        var legendWithoutTextSize = legendRectSize - size;\n        if (legendRectSize > maxWidth) {\n            var textLength = text.length;\n            for (var i = textLength - 1; i >= 0; --i) {\n                label = text.substring(0, i) + '...';\n                size = measureText(label, font).width;\n                var totalSize = legendWithoutTextSize + size;\n                if (totalSize <= maxWidth || label.length < 4) {\n                    if (label.length < 4) {\n                        label = ' ';\n                    }\n                    return label;\n                }\n            }\n        }\n        return label;\n    };\n    /**\n     * To draw the legend shape and text.\n     */\n    Legend.prototype.drawLegend = function () {\n        var map = this.maps;\n        var legend = map.legendSettings;\n        var render = map.renderer;\n        var textOptions;\n        var textFont = legend.textStyle;\n        this.legendGroup = render.createGroup({ id: map.element.id + '_Legend_Group' });\n        if (legend.mode === 'Interactive') {\n            for (var i = 0; i < this.legendRenderingCollections.length; i++) {\n                var itemId = map.element.id + '_Legend_Index_' + i;\n                var textId = map.element.id + '_Legend_Index_' + i + '_Text';\n                var item = this.legendRenderingCollections[i];\n                var bounds = new Rect(item['x'], item['y'], item['width'], item['height']);\n                if (i === 0) {\n                    this.renderLegendBorder();\n                }\n                var textLocation = new Point(item['textX'], item['textY']);\n                textFont.color = (textFont.color !== null) ? textFont.color : this.maps.themeStyle.legendTextColor;\n                var rectOptions = new RectOption(itemId, item['fill'], item['shapeBorder'], legend.opacity, bounds);\n                textOptions = new TextOption(textId, textLocation.x, textLocation.y, 'middle', item['text'], '', '');\n                textFont.fontFamily = map.themeStyle.fontFamily || textFont.fontFamily;\n                textFont.size = map.themeStyle.legendFontSize || textFont.size;\n                renderTextElement(textOptions, textFont, textFont.color, this.legendGroup);\n                this.legendGroup.appendChild(render.drawRectangle(rectOptions));\n                this.legendToggle();\n            }\n        }\n        else {\n            this.drawLegendItem(this.currentPage);\n        }\n    };\n    // tslint:disable-next-line:max-func-body-length\n    Legend.prototype.drawLegendItem = function (page) {\n        var map = this.maps;\n        var legend = map.legendSettings;\n        var spacing = 10;\n        var shapeSize = new Size(legend.shapeWidth, legend.shapeHeight);\n        var textOptions;\n        var renderOptions;\n        var render = map.renderer;\n        if (page >= 0 && page < this.totalPages.length) {\n            if (querySelector(this.legendGroup.id, this.maps.element.id)) {\n                remove(querySelector(this.legendGroup.id, this.maps.element.id));\n            }\n            for (var i = 0; i < this.totalPages[page]['Collection'].length; i++) {\n                var collection = this.totalPages[page]['Collection'][i];\n                var shapeBorder = collection['shapeBorder'];\n                var legendElement = render.createGroup({ id: map.element.id + '_Legend_Index_' + collection['idIndex'] });\n                var legendText = collection['DisplayText'];\n                var shape = ((legend.type === 'Markers') ? ((isNullOrUndefined(collection['ImageSrc'])) ?\n                    legend.shape : 'Image') : collection['legendShape']);\n                var strokeColor = (legend.shape === 'HorizontalLine' || legend.shape === 'VerticalLine'\n                    || legend.shape === 'Cross') ? isNullOrUndefined(legend.fill) ? '#000000' : legend.fill : shapeBorder.color;\n                var strokeWidth = (legend.shape === 'HorizontalLine' || legend.shape === 'VerticalLine'\n                    || legend.shape === 'Cross') ? (shapeBorder.width === 0) ?\n                    1 : shapeBorder.width : shapeBorder.width;\n                var shapeId = map.element.id + '_Legend_Shape_Index_' + collection['idIndex'];\n                var textId = map.element.id + '_Legend_Text_Index_' + collection['idIndex'];\n                var shapeLocation = collection['Shape'];\n                var textLocation = collection['Text'];\n                var imageUrl = ((isNullOrUndefined(collection['ImageSrc'])) ? legend.shape : collection['ImageSrc']);\n                var renderOptions_1 = new PathOption(shapeId, collection['Fill'], strokeWidth, strokeColor, legend.opacity, '');\n                legend.textStyle.color = (legend.textStyle.color !== null) ? legend.textStyle.color :\n                    this.maps.themeStyle.legendTextColor;\n                legend.textStyle.fontFamily = map.themeStyle.fontFamily || legend.textStyle.fontFamily;\n                legend.textStyle.size = map.themeStyle.legendFontSize || legend.textStyle.size;\n                if (i === 0) {\n                    this.renderLegendBorder();\n                }\n                legendElement.appendChild(drawSymbol(shapeLocation, shape, shapeSize, collection['ImageSrc'], renderOptions_1));\n                var legendRectSize = collection['Rect']['x'] + collection['Rect']['width'];\n                if (legendRectSize > this.legendBorderRect.width) {\n                    var trimmedText = this.legendTextTrim(this.legendBorderRect.width, legendText, legend.textStyle, legendRectSize);\n                    legendText = trimmedText;\n                }\n                textOptions = new TextOption(textId, textLocation.x, textLocation.y, 'start', legendText, '', '');\n                renderTextElement(textOptions, legend.textStyle, legend.textStyle.color, legendElement);\n                this.legendGroup.appendChild(legendElement);\n                if (i === (this.totalPages[page]['Collection'].length - 1)) {\n                    var pagingGroup = void 0;\n                    var width = spacing;\n                    var height = (spacing / 2);\n                    if (this.page !== 0) {\n                        var pagingText = (page + 1) + '/' + this.totalPages.length;\n                        var pagingFont = legend.textStyle;\n                        var pagingTextSize = measureText(pagingText, pagingFont);\n                        var leftPageX = (this.legendItemRect.x + this.legendItemRect.width) - pagingTextSize.width -\n                            (width * 2) - spacing;\n                        var rightPageX = (this.legendItemRect.x + this.legendItemRect.width);\n                        var locY = (this.legendItemRect.y + this.legendItemRect.height) + (height / 2) + spacing;\n                        var pageTextX = rightPageX - width - (pagingTextSize.width / 2) - (spacing / 2);\n                        pagingGroup = render.createGroup({ id: map.element.id + '_Legend_Paging_Group' });\n                        var leftPageElement = render.createGroup({ id: map.element.id + '_Legend_Left_Paging_Group' });\n                        var rightPageElement = render.createGroup({ id: map.element.id + '_Legend_Right_Paging_Group' });\n                        var rightPath = ' M ' + rightPageX + ' ' + locY + ' L ' + (rightPageX - width) + ' ' + (locY - height) +\n                            ' L ' + (rightPageX - width) + ' ' + (locY + height) + ' z ';\n                        var leftPath = ' M ' + leftPageX + ' ' + locY + ' L ' + (leftPageX + width) + ' ' + (locY - height) +\n                            ' L ' + (leftPageX + width) + ' ' + (locY + height) + ' z ';\n                        var leftPageOptions = new PathOption(map.element.id + '_Left_Page', '#a6a6a6', 0, '#a6a6a6', 1, '', leftPath);\n                        leftPageElement.appendChild(render.drawPath(leftPageOptions));\n                        var leftRectPageOptions = new RectOption(map.element.id + '_Left_Page_Rect', 'transparent', {}, 1, new Rect(leftPageX - (width / 2), (locY - (height * 2)), width * 2, spacing * 2), null, null, '', '');\n                        leftPageElement.appendChild(render.drawRectangle(leftRectPageOptions));\n                        this.wireEvents(leftPageElement);\n                        var rightPageOptions = new PathOption(map.element.id + '_Right_Page', '#a6a6a6', 0, '#a6a6a6', 1, '', rightPath);\n                        rightPageElement.appendChild(render.drawPath(rightPageOptions));\n                        var rightRectPageOptions = new RectOption(map.element.id + '_Right_Page_Rect', 'transparent', {}, 1, new Rect((rightPageX - width), (locY - height), width, spacing), null, null, '', '');\n                        rightPageElement.appendChild(render.drawRectangle(rightRectPageOptions));\n                        this.wireEvents(rightPageElement);\n                        pagingGroup.appendChild(leftPageElement);\n                        pagingGroup.appendChild(rightPageElement);\n                        var pageTextOptions = {\n                            'id': map.element.id + '_Paging_Text',\n                            'x': pageTextX,\n                            'y': locY + (pagingTextSize.height / 4),\n                            'fill': '#a6a6a6',\n                            'font-size': '14px',\n                            'font-style': pagingFont.fontStyle,\n                            'font-family': pagingFont.fontFamily,\n                            'font-weight': pagingFont.fontWeight,\n                            'text-anchor': 'middle',\n                            'transform': '',\n                            'opacity': 1,\n                            'dominant-baseline': ''\n                        };\n                        pagingGroup.appendChild(render.createText(pageTextOptions, pagingText));\n                        this.legendGroup.appendChild(pagingGroup);\n                    }\n                    this.legendToggle();\n                }\n            }\n        }\n    };\n    // tslint:disable-next-line:max-func-body-length\n    Legend.prototype.legendHighLightAndSelection = function (targetElement, value) {\n        var shapeIndex;\n        var layerIndex;\n        var dataIndex;\n        var textEle;\n        var legend = this.maps.legendSettings;\n        textEle = legend.mode === 'Default' ? document.getElementById(targetElement.id.replace('Shape', 'Text')) :\n            document.getElementById(targetElement.id + '_Text');\n        var collection = this.maps.legendModule.legendCollection;\n        var length;\n        var multiSelectEnable = this.maps.layers[collection[0]['data'][0]['layerIndex']].selectionSettings.enableMultiSelect;\n        var selectLength = 0;\n        var interactProcess = true;\n        var idIndex = parseFloat(targetElement.id.charAt(targetElement.id.length - 1));\n        this.updateLegendElement();\n        var toggleLegendCheck = this.maps.toggledLegendId.indexOf(idIndex);\n        if (this.maps.legendSettings.toggleLegendSettings.enable && value === 'highlight' && toggleLegendCheck !== -1) {\n            var collectionIndex = this.getIndexofLegend(this.legendHighlightCollection, targetElement);\n            if (collectionIndex !== -1) {\n                this.legendHighlightCollection.splice(collectionIndex, 1);\n            }\n            this.removeLegendHighlightCollection();\n            return null;\n        }\n        if (value === 'selection') {\n            this.shapeHighlightCollection = [];\n            if (!this.maps.shapeSelections && !multiSelectEnable) {\n                this.removeAllSelections();\n                this.maps.shapeSelections = true;\n            }\n            if (this.maps.legendSelectionCollection.length > 0 && (!multiSelectEnable ? this.maps.shapeSelections : true)) {\n                for (var k = 0; k < this.maps.legendSelectionCollection.length; k++) {\n                    if (targetElement === this.maps.legendSelectionCollection[k]['legendElement']) {\n                        this.maps.legendSelectionCollection[k]['legendElement'] = targetElement;\n                        interactProcess = false;\n                        this.removeLegendSelectionCollection(this.maps.legendSelectionCollection[k]['legendElement']);\n                        this.maps.selectedLegendElementId.splice(this.maps.selectedLegendElementId.indexOf(idIndex), 1);\n                        this.maps.legendSelectionCollection.splice(k, 1);\n                        this.maps.legendSelection = this.maps.legendSelectionCollection.length > 0 ? false : true;\n                        break;\n                    }\n                    else if (!multiSelectEnable) {\n                        if (this.maps.legendSelectionCollection.length > 1) {\n                            for (var z = 0; z < this.maps.legendSelectionCollection.length; z++) {\n                                this.removeLegendSelectionCollection(this.maps.legendSelectionCollection[z]['legendElement']);\n                            }\n                            this.maps.legendSelectionCollection = [];\n                        }\n                        else {\n                            this.removeLegendSelectionCollection(this.maps.legendSelectionCollection[k]['legendElement']);\n                            this.maps.legendSelectionCollection.splice(k, 1);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (this.maps.legendSelectionCollection.length > 0) {\n                for (var k = 0; k < this.maps.legendSelectionCollection.length; k++) {\n                    if ((targetElement.id.indexOf('_Legend_Shape') > -1 || targetElement.id.indexOf('_Legend_Index')) &&\n                        targetElement === this.maps.legendSelectionCollection[k]['legendElement']) {\n                        interactProcess = false;\n                        break;\n                    }\n                    else {\n                        this.removeLegendHighlightCollection();\n                    }\n                }\n            }\n            this.removeLegendHighlightCollection();\n        }\n        if (interactProcess) {\n            for (var i = 0; i < collection.length; i++) {\n                var idIndex_1 = this.maps.legendSettings.mode === 'Interactive' ?\n                    parseFloat(targetElement.id.split('_Legend_Index_')[1]) :\n                    parseFloat(targetElement.id.split('_Legend_Shape_Index_')[1]);\n                if (textEle.textContent === collection[i]['text'] && collection[i]['data'].length > 0\n                    && idIndex_1 === i) {\n                    var layer = this.maps.layers[collection[i]['data'][0]['layerIndex']];\n                    var enable = void 0;\n                    var module = void 0;\n                    var data = void 0;\n                    if (!isNullOrUndefined(layer)) {\n                        enable = (value === 'selection') ? layer.selectionSettings.enable : layer.highlightSettings.enable;\n                        module = void 0;\n                        module = (value === 'selection') ? layer.selectionSettings : layer.highlightSettings;\n                        data = collection[i]['data'];\n                    }\n                    if (enable) {\n                        for (var j = 0; j < data.length; j++) {\n                            shapeIndex = data[j]['shapeIndex'];\n                            layerIndex = data[j]['layerIndex'];\n                            dataIndex = data[j]['dataIndex'];\n                            var shapeEle = document.getElementById(this.maps.element.id + '_LayerIndex_' +\n                                layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex);\n                            if (shapeEle !== null) {\n                                var shapeMatch = true;\n                                if (this.maps.legendSelectionCollection !== null) {\n                                    for (var i_1 = 0; i_1 < this.maps.legendSelectionCollection.length; i_1++) {\n                                        if (this.maps.legendSelectionCollection[i_1]['legendElement'] === targetElement) {\n                                            shapeMatch = false;\n                                            break;\n                                        }\n                                    }\n                                }\n                                if (value === 'highlight' && shapeMatch) {\n                                    if (j === 0) {\n                                        this.legendHighlightCollection = [];\n                                        this.pushCollection(targetElement, this.legendHighlightCollection, collection[i], layer.shapeSettings);\n                                    }\n                                    length = this.legendHighlightCollection.length;\n                                    var legendHighlightColor = this.legendHighlightCollection[length - 1]['legendOldFill'];\n                                    this.legendHighlightCollection[length - 1]['MapShapeCollection']['Elements'].push(shapeEle);\n                                    var shapeItemCount = this.legendHighlightCollection[length - 1]['MapShapeCollection']['Elements'].length - 1;\n                                    var shapeOldFillColor = shapeEle.getAttribute('fill');\n                                    this.legendHighlightCollection[length - 1]['shapeOldFillColor'].push(shapeOldFillColor);\n                                    var shapeOldColor = this.legendHighlightCollection[length - 1]['shapeOldFillColor'][shapeItemCount];\n                                    this.shapePreviousColor = this.legendHighlightCollection[length - 1]['shapeOldFillColor'];\n                                    this.setColor(shapeEle, !isNullOrUndefined(module.fill) ? module.fill : shapeOldColor, module.opacity.toString(), module.border.color, module.border.width.toString(), 'highlight');\n                                    this.setColor(targetElement, !isNullOrUndefined(module.fill) ? module.fill : legendHighlightColor, module.opacity.toString(), module.border.color, module.border.width.toString(), 'highlight');\n                                }\n                                else if (value === 'selection') {\n                                    this.legendHighlightCollection = [];\n                                    this.maps.legendSelectionClass = module;\n                                    if (j === 0) {\n                                        this.pushCollection(targetElement, this.maps.legendSelectionCollection, collection[i], layer.shapeSettings);\n                                        if (multiSelectEnable) {\n                                            this.maps.selectedLegendElementId.push(i);\n                                        }\n                                        else {\n                                            if (this.maps.selectedLegendElementId.length === 0) {\n                                                this.maps.selectedLegendElementId.push(i);\n                                            }\n                                            else {\n                                                this.maps.selectedLegendElementId = [];\n                                                this.maps.selectedLegendElementId.push(i);\n                                            }\n                                        }\n                                    }\n                                    selectLength = this.maps.legendSelectionCollection.length;\n                                    var legendSelectionColor = void 0;\n                                    legendSelectionColor = this.maps.legendSelectionCollection[selectLength - 1]['legendOldFill'];\n                                    this.maps.legendSelectionCollection[selectLength - 1]['MapShapeCollection']['Elements'].push(shapeEle);\n                                    this.maps.legendSelectionCollection[selectLength - 1]['shapeOldFillColor'] = this.shapePreviousColor;\n                                    this.setColor(targetElement, !isNullOrUndefined(module.fill) ? module.fill : legendSelectionColor, module.opacity.toString(), module.border.color, module.border.width.toString(), 'selection');\n                                    this.setColor(shapeEle, !isNullOrUndefined(module.fill) ? module.fill : legendSelectionColor, module.opacity.toString(), module.border.color, module.border.width.toString(), 'selection');\n                                    if (this.maps.selectedElementId.indexOf(shapeEle.getAttribute('id')) === -1) {\n                                        this.maps.selectedElementId.push(shapeEle.getAttribute('id'));\n                                    }\n                                    if (j === data.length - 1) {\n                                        this.maps.legendSelection = false;\n                                        this.removeLegend(this.maps.legendSelectionCollection);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Legend.prototype.setColor = function (element, fill, opacity, borderColor, borderWidth, type) {\n        if (type === 'selection') {\n            maintainStyleClass('ShapeselectionMap', 'ShapeselectionMapStyle', fill, opacity, borderColor, borderWidth, this.maps);\n            element.setAttribute('class', 'ShapeselectionMapStyle');\n        }\n        else {\n            element.setAttribute('fill', fill);\n            element.setAttribute('opacity', opacity);\n            element.setAttribute('stroke', borderColor);\n            element.setAttribute('stroke-width', (Number(borderWidth) / this.maps.scale).toString());\n        }\n    };\n    Legend.prototype.pushCollection = function (targetElement, collection, oldElement, shapeSettings) {\n        collection.push({\n            legendElement: targetElement, legendOldFill: oldElement['fill'], legendOldOpacity: oldElement['opacity'],\n            legendOldBorderColor: oldElement['borderColor'], legendOldBorderWidth: oldElement['borderWidth'],\n            shapeOpacity: shapeSettings.opacity, shapeOldBorderColor: shapeSettings.border.color,\n            shapeOldBorderWidth: shapeSettings.border.width\n        });\n        length = collection.length;\n        collection[length - 1]['MapShapeCollection'] = { Elements: [] };\n        collection[length - 1]['shapeOldFillColor'] = [];\n    };\n    Legend.prototype.removeLegend = function (collection) {\n        for (var i = 0; i < collection.length; i++) {\n            var item = collection[i];\n            this.setColor(item['legendElement'], item['legendOldFill'], item['legendOldOpacity'], item['legendOldBorderColor'], item['legendOldBorderWidth'], 'highlight');\n            var dataCount = item['MapShapeCollection']['Elements'].length;\n            for (var j = 0; j < dataCount; j++) {\n                var shapeFillColor = item['legendOldFill'].indexOf('url') !== -1\n                    ? item['shapeOldFillColor'][j] : item['legendOldFill'];\n                this.setColor(item['MapShapeCollection']['Elements'][j], shapeFillColor, item['shapeOpacity'], item['shapeOldBorderColor'], item['shapeOldBorderWidth'], 'highlight');\n            }\n        }\n    };\n    Legend.prototype.removeLegendHighlightCollection = function () {\n        if (this.legendHighlightCollection.length > 0) {\n            this.removeLegend(this.legendHighlightCollection);\n            this.legendHighlightCollection = [];\n        }\n    };\n    Legend.prototype.removeLegendSelectionCollection = function (targetElement) {\n        if (this.maps.legendSelectionCollection.length > 0) {\n            removeClass(targetElement);\n            var shapeElements = this.shapesOfLegend(targetElement);\n            var dataCount = shapeElements.length;\n            for (var j = 0; j < dataCount; j++) {\n                var shapeElement = getElement(shapeElements[j]);\n                if (shapeElement.getAttribute('class') === 'ShapeselectionMapStyle') {\n                    removeClass(shapeElement);\n                    var selectedElementIdIndex = void 0;\n                    selectedElementIdIndex = this.maps.selectedElementId.indexOf(shapeElement.id);\n                    if (selectedElementIdIndex !== -1) {\n                        this.maps.selectedElementId.splice(selectedElementIdIndex, 1);\n                    }\n                }\n            }\n        }\n    };\n    Legend.prototype.removeShapeHighlightCollection = function () {\n        if (this.shapeHighlightCollection.length > 0) {\n            for (var i = 0; i < this.shapeHighlightCollection.length; i++) {\n                var item = this.shapeHighlightCollection[i];\n                var removeFill = true;\n                for (var j = 0; j < this.maps.legendSelectionCollection.length; j++) {\n                    if (this.maps.legendSelectionCollection[j]['legendElement'] === item['legendElement']) {\n                        removeFill = false;\n                    }\n                }\n                if (removeFill) {\n                    this.setColor(item['legendElement'], item['legendOldFill'], item['legendOldOpacity'], item['legendOldBorderColor'], item['legendOldBorderWidth'], 'highlight');\n                }\n            }\n        }\n    };\n    // tslint:disable-next-line:max-func-body-length\n    Legend.prototype.shapeHighLightAndSelection = function (targetElement, data, module, getValue, layerIndex) {\n        if (data !== undefined) {\n            this.updateLegendElement();\n            this.shapeToggled = true;\n            var collection = this.maps.legendModule.legendCollection;\n            var indexes = this.legendIndexOnShape(data, layerIndex);\n            var shapeElement = this.shapeDataOnLegend(targetElement);\n            var toggleLegendCheck = this.maps.toggledLegendId.indexOf(indexes['actualIndex']);\n            if (this.maps.legendSettings.toggleLegendSettings.enable && toggleLegendCheck !== -1) {\n                this.shapeToggled = false;\n                this.legendHighlightCollection = [];\n                var collectionIndex = this.getIndexofLegend(this.shapeHighlightCollection, shapeElement['LegendEle']);\n                if (collectionIndex !== -1) {\n                    this.shapeHighlightCollection.splice(collectionIndex, 1);\n                }\n                this.removeShapeHighlightCollection();\n                return null;\n            }\n            if (indexes['currentIndex'] === undefined && indexes['actualIndex'] === undefined) {\n                this.removeShapeHighlightCollection();\n                return null;\n            }\n            if (indexes['currentIndex'] === undefined && getValue === 'selection'\n                && !this.maps.layers[layerIndex].selectionSettings.enableMultiSelect &&\n                targetElement.getAttribute('class') !== 'ShapeselectionMapStyle') {\n                this.maps.legendSelection = false;\n            }\n            if (getValue === 'selection' && !this.maps.layers[layerIndex].selectionSettings.enableMultiSelect &&\n                !this.maps.legendSelection) {\n                this.removeAllSelections();\n                this.maps.legendSelection = true;\n            }\n            if (indexes['currentIndex'] === undefined) {\n                if (getValue === 'selection' && indexes['actualIndex'] !== undefined) {\n                    var checkSelection = 0;\n                    for (var i = 0; i < shapeElement['Elements'].length; i++) {\n                        if (shapeElement['Elements'][i].getAttribute('class') === 'ShapeselectionMapStyle') {\n                            checkSelection++;\n                        }\n                    }\n                    var selectionIndex = this.maps.selectedLegendElementId.indexOf(indexes['actualIndex']);\n                    if (selectionIndex === -1) {\n                        this.maps.selectedLegendElementId.push(indexes['actualIndex']);\n                        this.maps.legendSelectionClass = module;\n                    }\n                    else {\n                        if ((checkSelection <= 1) && targetElement.getAttribute('class') === 'ShapeselectionMapStyle') {\n                            if (!this.maps.layers[layerIndex].selectionSettings.enableMultiSelect) {\n                                this.maps.selectedLegendElementId.splice(selectionIndex, 1);\n                            }\n                            else {\n                                if (checkSelection <= 1 && targetElement.getAttribute('class') === 'ShapeselectionMapStyle') {\n                                    this.maps.selectedLegendElementId.splice(selectionIndex, 1);\n                                }\n                            }\n                        }\n                    }\n                }\n                this.removeShapeHighlightCollection();\n                return null;\n            }\n            var text = collection[indexes['actualIndex']]['text'];\n            var content = void 0;\n            var legendShape = void 0;\n            if (this.maps.legendSettings.mode === 'Default') {\n                if (indexes['currentIndex'] !== undefined) {\n                    content = document.getElementById(this.maps.element.id + '_Legend_Text_Index_' + indexes['actualIndex']).textContent;\n                    legendShape = document.getElementById(this.maps.element.id + '_Legend_Shape_Index_' + indexes['actualIndex']);\n                }\n            }\n            else {\n                content = document.getElementById(this.maps.element.id + '_Legend_Index_' + indexes['actualIndex']\n                    + '_Text').textContent;\n                legendShape = document.getElementById(this.maps.element.id + '_Legend_Index_' + indexes['actualIndex']);\n            }\n            this.oldShapeElement = shapeElement['LegendEle'];\n            var length_1 = this.maps.legendSelectionCollection.length;\n            if (text === content) {\n                var shapeMatched = true;\n                if (this.maps.legendSelectionCollection) {\n                    for (var i = 0; i < this.maps.legendSelectionCollection.length; i++) {\n                        if (this.maps.legendSelectionCollection[i]['legendElement'] === shapeElement['LegendEle']) {\n                            shapeMatched = false;\n                            break;\n                        }\n                    }\n                }\n                if (getValue === 'highlight' && shapeMatched) {\n                    var selectionEle = this.isTargetSelected(shapeElement, this.shapeHighlightCollection);\n                    if (selectionEle === undefined || (selectionEle && !selectionEle['IsSelected'])) {\n                        this.pushCollection(legendShape, this.shapeHighlightCollection, collection[indexes['actualIndex']], this.maps.layers[layerIndex].shapeSettings);\n                    }\n                    for (var j = 0; j < this.shapeHighlightCollection.length; j++) {\n                        if (shapeElement['LegendEle'].id === this.shapeHighlightCollection[j]['legendElement'].id) {\n                            this.shapeHighlightCollection[j]['legendElement'] = shapeElement['LegendEle'];\n                        }\n                    }\n                    if (length_1 > 0) {\n                        for (var j = 0; j < length_1; j++) {\n                            if (shapeElement['LegendEle'] === this.maps.legendSelectionCollection[j]['legendElement']) {\n                                this.maps.legendSelectionCollection[j]['legendElement'] = shapeElement['LegendEle'];\n                                this.removeShapeHighlightCollection();\n                                break;\n                            }\n                            else if (j === length_1 - 1) {\n                                this.removeShapeHighlightCollection();\n                                this.setColor(legendShape, !isNullOrUndefined(module.fill) ? module.fill : legendShape.getAttribute('fill'), module.opacity.toString(), module.border.color, module.border.width.toString(), 'highlight');\n                            }\n                        }\n                    }\n                    else {\n                        this.removeShapeHighlightCollection();\n                        this.setColor(legendShape, !isNullOrUndefined(module.fill) ? module.fill : legendShape.getAttribute('fill'), module.opacity.toString(), module.border.color, module.border.width.toString(), 'highlight');\n                    }\n                }\n                else if (getValue === 'selection') {\n                    var selectionEle = this.isTargetSelected(shapeElement, this.maps.legendSelectionCollection);\n                    if (length_1 > 0) {\n                        var j = 0;\n                        while (j < this.maps.legendSelectionCollection.length) {\n                            if (shapeElement['LegendEle'] !== this.maps.legendSelectionCollection[j]['legendElement'] &&\n                                !module.enableMultiSelect) {\n                                var element = this.maps.legendSelectionCollection[j];\n                                var selectedLegendIndex = this.maps.selectedLegendElementId.indexOf(indexes['actualIndex']);\n                                this.maps.selectedLegendElementId.splice(selectedLegendIndex, 1);\n                                this.maps.legendSelectionCollection.splice(j, 1);\n                                removeClass(element['legendElement']);\n                                this.maps.shapeSelections = true;\n                                j = 0;\n                            }\n                            else {\n                                j++;\n                            }\n                        }\n                    }\n                    if (selectionEle && (selectionEle['IsSelected'] && targetElement.getAttribute('class') === 'ShapeselectionMapStyle')) {\n                        var element = this.maps.legendSelectionCollection[selectionEle['SelectionIndex']];\n                        var multiSelection = 0;\n                        if (module.enableMultiSelect) {\n                            for (var i = 0; i < shapeElement['Elements'].length; i++) {\n                                if (targetElement.getAttribute('class') === shapeElement['Elements'][i].getAttribute('class')) {\n                                    multiSelection++;\n                                }\n                            }\n                        }\n                        if (multiSelection <= 1 && (!module.enableMultiSelect ?\n                            this.maps.legendSelection : true)) {\n                            this.maps.selectedLegendElementId.splice(this.maps.selectedLegendElementId.indexOf(indexes['actualIndex']), 1);\n                            if (!isNullOrUndefined(shapeElement['LegendEle'])) {\n                                removeClass(shapeElement['LegendEle']);\n                            }\n                            this.maps.legendSelectionCollection.splice(selectionEle['SelectionIndex'], 1);\n                            this.maps.shapeSelections = true;\n                        }\n                    }\n                    else {\n                        if ((selectionEle === undefined || (selectionEle && !selectionEle['IsSelected'])) &&\n                            !isNullOrUndefined(legendShape)) {\n                            var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, legendShape);\n                            if (legendSelectionIndex === -1) {\n                                this.pushCollection(legendShape, this.maps.legendSelectionCollection, collection[indexes['actualIndex']], this.maps.layers[layerIndex].shapeSettings);\n                            }\n                        }\n                        var addId = true;\n                        for (var i = 0; i < this.maps.selectedLegendElementId.length; i++) {\n                            if (indexes['actualIndex'] === this.maps.selectedLegendElementId[i]) {\n                                addId = false;\n                            }\n                        }\n                        if (addId) {\n                            this.maps.selectedLegendElementId.push(indexes['actualIndex']);\n                        }\n                        this.maps.legendSelectionClass = module;\n                        this.removeLegend(this.shapeHighlightCollection);\n                        if (!isNullOrUndefined(legendShape)) {\n                            this.setColor(legendShape, !isNullOrUndefined(module.fill) ? module.fill : legendShape.getAttribute('fill'), module.opacity.toString(), module.border.color, module.border.width.toString(), 'selection');\n                            var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, legendShape);\n                            this.maps.legendSelectionCollection[legendSelectionIndex]['MapShapeCollection']['Elements'].push(targetElement);\n                        }\n                        this.maps.shapeSelections = false;\n                    }\n                }\n                else if (document.getElementsByClassName('highlightMapStyle').length > 0) {\n                    this.removeShapeHighlightCollection();\n                    removeClass(document.getElementsByClassName('highlightMapStyle')[0]);\n                }\n            }\n        }\n        else {\n            this.removeShapeHighlightCollection();\n        }\n    };\n    Legend.prototype.isTargetSelected = function (target, collection) {\n        var selectEle;\n        for (var i = 0; i < collection.length; i++) {\n            if (!isNullOrUndefined(target['LegendEle'].getAttribute('id')) &&\n                (target['LegendEle'].getAttribute('id') === collection[i]['legendElement'].getAttribute('id'))) {\n                selectEle = { IsSelected: true, SelectionIndex: i };\n            }\n        }\n        return selectEle;\n    };\n    Legend.prototype.updateLegendElement = function () {\n        for (var i = 0; i < this.maps.legendSelectionCollection.length; i++) {\n            if (document.getElementById(this.maps.legendSelectionCollection[i]['legendElement'].id)) {\n                this.maps.legendSelectionCollection[i]['legendElement'] =\n                    document.getElementById(this.maps.legendSelectionCollection[i]['legendElement'].id);\n            }\n        }\n    };\n    Legend.prototype.getIndexofLegend = function (targetCollection, targetElement) {\n        var legendIndex = targetCollection.map(function (e) { return e['legendElement']; }).indexOf(targetElement);\n        return legendIndex;\n    };\n    Legend.prototype.removeAllSelections = function () {\n        for (var i = 0; i < this.maps.selectedElementId.length; i++) {\n            var selectedElement = document.getElementById(this.maps.selectedElementId[i]);\n            removeClass(selectedElement);\n        }\n        for (var j = 0; j < this.maps.selectedLegendElementId.length; j++) {\n            var idIndex = this.maps.legendSettings.mode === 'Interactive' ?\n                'container_Legend_Index_' : 'container_Legend_Shape_Index_';\n            var selectedElement = idIndex + this.maps.selectedLegendElementId[j];\n            var legendElement = document.getElementById(selectedElement);\n            if (!isNullOrUndefined(legendElement)) {\n                removeClass(document.getElementById(selectedElement));\n            }\n        }\n        this.maps.legendSelectionCollection = [];\n        this.maps.selectedLegendElementId = [];\n        this.maps.selectedElementId = [];\n    };\n    Legend.prototype.legendIndexOnShape = function (data, index) {\n        var legendIndex;\n        var actualIndex;\n        var path = this.maps.layers[index].shapeDataPath;\n        var value = data[path];\n        var legendType = this.maps.legendSettings.mode;\n        var collection = this.maps.legendModule.legendCollection;\n        var currentCollection;\n        if (legendType === 'Default' && !isNullOrUndefined(this.maps.legendModule.totalPages)) {\n            currentCollection = this.maps.legendModule.totalPages[this.maps.legendModule.currentPage]['Collection'];\n        }\n        var currentCollectionLength = legendType === 'Default' ? currentCollection['length'] : 1;\n        for (var i = 0; i < collection.length; i++) {\n            var dataValue = collection[i]['data'];\n            for (var k = 0; k < currentCollectionLength; k++) {\n                if (legendType !== 'Default' || collection[i]['text'] === currentCollection[k]['DisplayText']) {\n                    for (var j = 0; j < dataValue.length; j++) {\n                        if (value === dataValue[j]['name']) {\n                            legendIndex = k;\n                        }\n                    }\n                }\n            }\n            for (var j = 0; j < dataValue.length; j++) {\n                if (value === dataValue[j]['name']) {\n                    actualIndex = i;\n                }\n            }\n        }\n        return { currentIndex: legendIndex, actualIndex: actualIndex };\n    };\n    Legend.prototype.shapeDataOnLegend = function (targetElement) {\n        var shapeIndex;\n        var layerIndex;\n        var dataIndex;\n        var collection = this.maps.legendModule.legendCollection;\n        var legend = this.maps.legendSettings;\n        for (var i = 0; i < collection.length; i++) {\n            var data = collection[i]['data'];\n            var process = false;\n            var elements = [];\n            var currentElement = { Elements: [] };\n            for (var j = 0; j < data.length; j++) {\n                shapeIndex = data[j]['shapeIndex'];\n                layerIndex = data[j]['layerIndex'];\n                dataIndex = data[j]['dataIndex'];\n                var shapeEle = document.getElementById(this.maps.element.id + '_LayerIndex_' +\n                    layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex);\n                if (targetElement === shapeEle) {\n                    process = true;\n                }\n                elements.push(shapeEle);\n            }\n            if (process) {\n                if (isNullOrUndefined(currentElement['LegendEle'])) {\n                    currentElement['LegendEle'] = legend.mode === 'Default' ?\n                        document.getElementById(this.maps.element.id + '_Legend_Shape_Index_' + i) :\n                        document.getElementById(this.maps.element.id + '_Legend_Index_' + i);\n                }\n                currentElement['Elements'] = elements;\n                return currentElement;\n            }\n        }\n        return null;\n    };\n    Legend.prototype.shapesOfLegend = function (targetElement) {\n        var shapeIndex;\n        var layerIndex;\n        var dataIndex;\n        var idIndex = parseFloat(targetElement.id.charAt(targetElement.id.length - 1));\n        var data = this.maps.legendModule.legendCollection[idIndex]['data'];\n        var legendShapeElements = [];\n        for (var i = 0; i < data.length; i++) {\n            shapeIndex = data[i]['shapeIndex'];\n            layerIndex = data[i]['layerIndex'];\n            dataIndex = data[i]['dataIndex'];\n            var shapeElement = document.getElementById(this.maps.element.id + '_LayerIndex_' +\n                layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex);\n            if (!isNullOrUndefined(shapeElement)) {\n                legendShapeElements.push(shapeElement.id);\n            }\n        }\n        return legendShapeElements;\n    };\n    //tslint:disable\n    Legend.prototype.legendToggle = function () {\n        var map = this.maps;\n        var legend = map.legendSettings;\n        if (this.maps.selectedLegendElementId) {\n            // To maintain the state of legend selection during page resize.\n            for (var j = 0; j < this.maps.selectedLegendElementId.length; j++) {\n                var idIndex = legend.mode === 'Interactive' ? this.maps.element.id + '_Legend_Index_' : this.maps.element.id + '_Legend_Shape_Index_';\n                var selectedElement = map.svgObject.querySelector('#' + idIndex + this.maps.selectedLegendElementId[j]);\n                if (!isNullOrUndefined(selectedElement)) {\n                    var fill = !isNullOrUndefined(this.maps.legendSelectionClass.fill) ?\n                        this.maps.legendSelectionClass.fill : selectedElement.getAttribute('fill');\n                    this.setColor(selectedElement, fill, this.maps.legendSelectionClass.opacity.toString(), this.maps.legendSelectionClass.border.color, this.maps.legendSelectionClass.border.width.toString(), 'selection');\n                    for (var i = 0; i < this.maps.legendSelectionCollection.length; i++) {\n                        if (this.maps.legendSelectionCollection[i]['legendElement'].id === selectedElement.id) {\n                            this.maps.legendSelectionCollection[i]['legendElement'] = selectedElement;\n                        }\n                    }\n                    var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, selectedElement);\n                    if (legendSelectionIndex === -1) {\n                        var layerIndex = this.maps.legendModule.legendCollection[this.maps.selectedLegendElementId[j]]['data'][j]['layerIndex'];\n                        this.pushCollection(selectedElement, this.maps.legendSelectionCollection, this.maps.legendModule.legendCollection[this.maps.selectedLegendElementId[j]], this.maps.layers[layerIndex].shapeSettings);\n                    }\n                }\n            }\n            ;\n        }\n        if (this.maps.toggledLegendId) {\n            for (var j = 0; j < this.maps.toggledLegendId.length; j++) {\n                var legendTextId = legend.mode === 'Interactive' ? ('#' + this.maps.element.id + '_Legend_Index_' + this.maps.toggledLegendId[j] + '_Text') : ('#' + this.maps.element.id + '_Legend_Text_Index_' + this.maps.toggledLegendId[j]);\n                var textElement = map.svgObject.querySelector(legendTextId);\n                if (!isNullOrUndefined(textElement)) {\n                    textElement.setAttribute(\"fill\", \"#E5E5E5\");\n                }\n                var legendShapeId = legend.mode === 'Interactive' ? ('#' + this.maps.element.id + '_Legend_Index_' + this.maps.toggledLegendId[j]) : ('#' + this.maps.element.id + '_Legend_Shape_Index_' + this.maps.toggledLegendId[j]);\n                var legendElement = map.svgObject.querySelector(legendShapeId);\n                if (!isNullOrUndefined(legendElement)) {\n                    legendElement.setAttribute(\"fill\", \"#E5E5E5\");\n                }\n            }\n        }\n    };\n    //tslint:disable\n    Legend.prototype.renderLegendBorder = function () {\n        var map = this.maps;\n        var legend = map.legendSettings;\n        var legendTitle = legend.title.text;\n        var textStyle = legend.titleStyle;\n        var textOptions;\n        var spacing = 10;\n        var trimTitle = textTrim((this.legendItemRect.width + (spacing * 2)), legendTitle, textStyle);\n        var textSize = measureText(trimTitle, textStyle);\n        this.legendBorderRect = new Rect((this.legendItemRect.x - spacing), (this.legendItemRect.y - spacing - textSize.height), (this.legendItemRect.width) + (spacing * 2), (this.legendItemRect.height) + (spacing * 2) + textSize.height +\n            (legend.mode === 'Interactive' ? 0 : (this.page !== 0) ? spacing : 0));\n        var renderOptions = new RectOption(map.element.id + '_Legend_Border', legend.background, legend.border, 1, this.legendBorderRect, null, null, '', '');\n        this.legendGroup.appendChild(map.renderer.drawRectangle(renderOptions));\n        this.getLegendAlignment(map, this.legendBorderRect.width, this.legendBorderRect.height, legend);\n        this.legendGroup.setAttribute('transform', 'translate( ' + (this.translate.x + (-(this.legendBorderRect.x))) + ' ' +\n            (this.translate.y + (-(this.legendBorderRect.y))) + ' )');\n        map.svgObject.appendChild(this.legendGroup);\n        if (legendTitle) {\n            textStyle.color = (textStyle.color !== null) ? textStyle.color : this.maps.themeStyle.legendTextColor;\n            textOptions = new TextOption(map.element.id + '_LegendTitle', (this.legendItemRect.x) + (this.legendItemRect.width / 2), this.legendItemRect.y - (textSize.height / 2) - spacing / 2, 'middle', trimTitle, '');\n            renderTextElement(textOptions, textStyle, textStyle.color, this.legendGroup);\n        }\n    };\n    Legend.prototype.changeNextPage = function (e) {\n        this.currentPage = (e.target.id.indexOf('_Left_Page_') > -1) ? (this.currentPage - 1) :\n            (this.currentPage + 1);\n        this.legendGroup = this.maps.renderer.createGroup({ id: this.maps.element.id + '_Legend_Group' });\n        this.drawLegendItem(this.currentPage);\n        if (querySelector(this.maps.element.id + '_Legend_Border', this.maps.element.id)) {\n            querySelector(this.maps.element.id + '_Legend_Border', this.maps.element.id).style.pointerEvents = 'none';\n        }\n    };\n    Legend.prototype.getLegendAlignment = function (map, width, height, legend) {\n        var x;\n        var y;\n        var spacing = 10;\n        var totalRect;\n        totalRect = extend({}, map.mapAreaRect, totalRect, true);\n        var areaX = totalRect.x;\n        var areaY = totalRect.y;\n        var areaHeight = totalRect.height;\n        var areaWidth = totalRect.width;\n        var totalWidth = map.availableSize.width;\n        var totalHeight = map.availableSize.height;\n        if (legend.position === 'Float') {\n            this.translate = legend.location;\n        }\n        else {\n            switch (legend.position) {\n                case 'Top':\n                case 'Bottom':\n                    totalRect.height = (areaHeight - height);\n                    x = (totalWidth / 2) - (width / 2);\n                    y = (legend.position === 'Top') ? areaY : (areaY + totalRect.height);\n                    totalRect.y = (legend.position === 'Top') ? areaY + height + spacing : areaY;\n                    break;\n                case 'Left':\n                case 'Right':\n                    totalRect.width = (areaWidth - width);\n                    x = (legend.position === 'Left') ? areaX : (areaX + totalRect.width) - spacing;\n                    y = (totalHeight / 2) - (height / 2);\n                    totalRect.x = (legend.position === 'Left') ? areaX + width : areaX;\n                    break;\n            }\n            switch (legend.alignment) {\n                case 'Near':\n                    if (legend.position === 'Top' || legend.position === 'Bottom') {\n                        x = totalRect.x;\n                    }\n                    else {\n                        y = totalRect.y;\n                    }\n                    break;\n                case 'Far':\n                    if (legend.position === 'Top' || legend.position === 'Bottom') {\n                        x = (totalWidth - width) - spacing;\n                    }\n                    else {\n                        y = totalHeight - height;\n                    }\n                    break;\n            }\n            if ((legend.height || legend.width) && legend.mode !== 'Interactive') {\n                map.totalRect = totalRect;\n            }\n            else {\n                map.mapAreaRect = totalRect;\n            }\n            this.translate = new Point(x, y);\n        }\n    };\n    Legend.prototype.getMarkersLegendCollections = function (layerIndex, markers) {\n        var _this = this;\n        Array.prototype.forEach.call(markers, function (marker, markerIndex) {\n            var dataSource = marker.dataSource;\n            var field = marker.legendText;\n            var templateFn;\n            var isDuplicate;\n            Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                var imageSrc = null;\n                var showLegend = isNullOrUndefined(data[_this.maps.legendSettings.showLegendPath]) ? true :\n                    data[_this.maps.legendSettings.showLegendPath];\n                if (marker.visible && showLegend && (!isNullOrUndefined(data['latitude'])) && (!isNullOrUndefined(data['longitude']))) {\n                    if (marker.template) {\n                        templateFn = getTemplateFunction(marker.template);\n                        var templateElement = templateFn(_this.maps);\n                        var markerEle = isNullOrUndefined(templateElement.childElementCount) ? templateElement[0] :\n                            templateElement;\n                        imageSrc = markerEle.querySelector('img').src;\n                    }\n                    var text = isNullOrUndefined(data[field]) ? '' : data[field];\n                    isDuplicate = _this.maps.legendSettings.removeDuplicateLegend ?\n                        _this.removeDuplicates(_this.legendCollection, text) : false;\n                    if (!isDuplicate) {\n                        _this.legendCollection.push({\n                            layerIndex: layerIndex, markerIndex: markerIndex, dataIndex: dataIndex,\n                            fill: marker.fill, text: text, imageSrc: imageSrc\n                        });\n                    }\n                }\n            });\n        });\n    };\n    Legend.prototype.getRangeLegendCollection = function (layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n        var _this = this;\n        var legendText;\n        var legendIndex = 0;\n        var fill = this.maps.legendSettings.fill;\n        var rangeData = [];\n        var _loop_1 = function (colorMap) {\n            if (!isNullOrUndefined(colorMap.from) && !isNullOrUndefined(colorMap.to)) {\n                legendText = !isNullOrUndefined(colorMap.label) ? colorMap.label : colorMap.from + ' - ' + colorMap.to;\n                rangeData = [];\n                var colorMapProcess_1 = false;\n                Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                    var colorValue = (colorValuePath.indexOf(\".\") > -1) ? Number(getValueFromObject(data, colorValuePath)) :\n                        parseFloat(data[colorValuePath]);\n                    if (colorValue >= colorMap.from && colorValue <= colorMap.to) {\n                        colorMapProcess_1 = true;\n                        rangeData.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, colorValue));\n                    }\n                });\n                if (!colorMapProcess_1) {\n                    rangeData.push({\n                        layerIndex: layerIndex, shapeIndex: null, dataIndex: null,\n                        name: null, value: null\n                    });\n                }\n                var legendFill = (isNullOrUndefined(fill)) ? Object.prototype.toString.call(colorMap.color) === '[object Array]' ?\n                    !isNullOrUndefined(colorMap.value) ? colorMap.color[0] : this_1.legendGradientColor(colorMap, legendIndex) :\n                    colorMap.color : fill;\n                legendIndex++;\n                this_1.getOverallLegendItemsCollection(legendText, legendFill, rangeData, colorMap.showLegend);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, colorMapping_1 = colorMapping; _i < colorMapping_1.length; _i++) {\n            var colorMap = colorMapping_1[_i];\n            _loop_1(colorMap);\n        }\n    };\n    Legend.prototype.getOverallLegendItemsCollection = function (legendText, legendFill, legendData, showLegend) {\n        var newColllection = [];\n        var legend = this.maps.legendSettings;\n        if (legendData.length > 0 && showLegend) {\n            for (var i = 0; i < legendData.length; i++) {\n                var collection = legendData[i];\n                if (collection.length > 0) {\n                    for (var j = 0; j < collection.length; j++) {\n                        newColllection.push(collection[j]);\n                    }\n                }\n                else {\n                    newColllection.push(legendData[i]);\n                }\n                newColllection['_isVisible'] = true;\n            }\n            var isDuplicate = this.maps.legendSettings.removeDuplicateLegend ?\n                this.removeDuplicates(this.legendCollection, legendText) : false;\n            if (!isDuplicate) {\n                this.legendCollection.push({\n                    text: legendText, fill: legendFill, data: newColllection, opacity: legend.opacity,\n                    borderColor: legend.shapeBorder.color, borderWidth: legend.shapeBorder.width\n                });\n            }\n        }\n    };\n    Legend.prototype.removeDuplicates = function (legendCollection, text) {\n        var isDuplicate = false;\n        for (var i = 0; i < legendCollection.length; i++) {\n            if (legendCollection[i]['text'] === text) {\n                isDuplicate = true;\n                break;\n            }\n            else {\n                continue;\n            }\n        }\n        return isDuplicate;\n    };\n    Legend.prototype.getEqualLegendCollection = function (layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n        var _this = this;\n        var fill = this.maps.legendSettings.fill;\n        var equalValues = [];\n        var legendText;\n        var legendIndex = 0;\n        var equalData = [];\n        var outOfRangeValues = [];\n        var outOfRange = [];\n        var _loop_2 = function (colorMap) {\n            if (!isNullOrUndefined(colorMap.value)) {\n                legendText = !isNullOrUndefined(colorMap.label) ? colorMap.label : colorMap.value;\n                equalData = [];\n                var eqaulColorProcess_1 = false;\n                Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                    var equalValue = ((colorValuePath.indexOf(\".\") > -1) ? (getValueFromObject(data, colorValuePath)) :\n                        (data[colorValuePath]));\n                    if (equalValue === colorMap.value) {\n                        eqaulColorProcess_1 = true;\n                        if (equalValues.indexOf(equalValue) === -1) {\n                            equalValues.push(equalValue);\n                        }\n                        equalData.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, equalValue));\n                    }\n                    else {\n                        if (outOfRangeValues.indexOf(equalValue) === -1) {\n                            outOfRangeValues.push(equalValue);\n                        }\n                    }\n                });\n                for (var x = 0; x < equalValues.length; x++) {\n                    for (var y = 0; y < outOfRangeValues.length; y++) {\n                        if (equalValues[x] === outOfRangeValues[y]) {\n                            var equalIndex = outOfRangeValues.indexOf(equalValues[x]);\n                            outOfRangeValues.splice(equalIndex, 1);\n                        }\n                    }\n                }\n                if (!eqaulColorProcess_1) {\n                    equalData.push({\n                        layerIndex: layerIndex, shapeIndex: null, dataIndex: null,\n                        name: null, value: null\n                    });\n                }\n                var legendFill = (isNullOrUndefined(fill)) ? Object.prototype.toString.call(colorMap.color) === '[object Array]'\n                    ? colorMap.color[0] : colorMap.color : fill;\n                legendIndex++;\n                this_2.getOverallLegendItemsCollection(legendText, legendFill, equalData, colorMap.showLegend);\n            }\n            else if (isNullOrUndefined(colorMap.minOpacity) && isNullOrUndefined(colorMap.maxOpacity) && isNullOrUndefined(colorMap.value)\n                && isNullOrUndefined(colorMap.from) && isNullOrUndefined(colorMap.to) && !isNullOrUndefined(colorMap.color)) {\n                Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                    var equalValue = ((colorValuePath.indexOf(\".\") > -1) ? (getValueFromObject(data, colorValuePath)) :\n                        (data[colorValuePath]));\n                    for (var k = 0; k < outOfRangeValues.length; k++) {\n                        if (equalValue === outOfRangeValues[k]) {\n                            outOfRange.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, equalValue));\n                        }\n                    }\n                });\n                if (outOfRangeValues.length === 0) {\n                    var range_1 = false;\n                    var outRange = [];\n                    Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                        range_1 = false;\n                        var rangeValue = data[colorValuePath];\n                        for (var z = 0; z < colorMapping.length; z++) {\n                            if (!isNullOrUndefined(rangeValue) && !isNaN(rangeValue)) {\n                                if (rangeValue >= colorMapping[z].from && rangeValue <= colorMapping[z].to) {\n                                    range_1 = true;\n                                }\n                            }\n                            else if (!range_1) {\n                                range_1 = false;\n                            }\n                        }\n                        if (!range_1) {\n                            outOfRange.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, rangeValue));\n                        }\n                    });\n                }\n                legendText = !isNullOrUndefined(colorMap.label) ? colorMap.label : 'Others';\n                var outfill = ((Object.prototype.toString.call(colorMap.color) === '[object Array]'))\n                    ? colorMap.color[0] : colorMap.color;\n                var legendOutFill = outfill;\n                legendIndex++;\n                this_2.getOverallLegendItemsCollection(legendText, legendOutFill, outOfRange, colorMap.showLegend);\n            }\n        };\n        var this_2 = this;\n        for (var _i = 0, colorMapping_2 = colorMapping; _i < colorMapping_2.length; _i++) {\n            var colorMap = colorMapping_2[_i];\n            _loop_2(colorMap);\n        }\n    };\n    Legend.prototype.getDataLegendCollection = function (layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n        var _this = this;\n        var legendText;\n        var fill = this.maps.legendSettings.fill;\n        var valuePath = this.maps.legendSettings.valuePath;\n        if (!isNullOrUndefined(colorValuePath) && !isNullOrUndefined(dataSource)) {\n            Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                var showLegend = isNullOrUndefined(_this.maps.legendSettings.showLegendPath) ?\n                    true : isNullOrUndefined(data[_this.maps.legendSettings.showLegendPath]) ?\n                    false : data[_this.maps.legendSettings.showLegendPath];\n                var dataValue = ((colorValuePath.indexOf(\".\") > -1) ? (getValueFromObject(data, colorValuePath)) :\n                    (data[colorValuePath]));\n                var newData = [];\n                var legendFill = (isNullOrUndefined(fill)) ? dataValue : fill;\n                if (!isNullOrUndefined(dataValue) && colorMapping.length === 0) {\n                    legendText = !isNullOrUndefined(data[valuePath]) ? ((valuePath.indexOf(\".\") > -1) ?\n                        getValueFromObject(data, valuePath) : data[valuePath]) : ((dataPath.indexOf(\".\") > -1) ?\n                        getValueFromObject(data, dataPath) : data[dataPath]);\n                    newData.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, dataValue));\n                }\n                _this.getOverallLegendItemsCollection(legendText, legendFill, newData, showLegend);\n            });\n        }\n    };\n    Legend.prototype.interactiveHandler = function (e) {\n        var target = e.target;\n        var legend = this.maps.legendSettings;\n        var id = this.maps.element.id + '_Interactive_Legend';\n        var hoverId = legend.type === 'Layers' ? '_shapeIndex_' : (legend.type === 'Markers') ? '_MarkerIndex_' :\n            '_BubbleIndex_';\n        if (target.id.indexOf(hoverId) > 1) {\n            var layerIndex = parseFloat(target.id.split('_LayerIndex_')[1].split('_')[0]);\n            var dataIndex = parseFloat(target.id.split(/_dataIndex_/i)[1].split('_')[0]);\n            var fill = void 0;\n            var stroke = void 0;\n            var strokeWidth = void 0;\n            if (!(isNullOrUndefined(querySelector(id, this.maps.element.id)))) {\n                remove(querySelector(id, this.maps.element.id));\n            }\n            var layer = this.maps.layersCollection[layerIndex];\n            var markerVisible = (legend.type === 'Layers' ? layer.visible :\n                legend.type === 'Markers' ? layer.markerSettings[parseFloat(target.id.split('_MarkerIndex_')[1].split('_')[0])].visible :\n                    (this.maps.getBubbleVisible(this.maps.layersCollection[layerIndex])));\n            if (legend.visible && this.legendRenderingCollections.length > 0\n                && legend.mode === 'Interactive' && markerVisible) {\n                var svgRect = this.maps.svgObject.getBoundingClientRect();\n                for (var i = 0; i < this.legendCollection.length; i++) {\n                    var currentData = this.legendCollection[i];\n                    var legendElement = querySelector(this.maps.element.id + '_Legend_Index_' + i, this.maps.element.id);\n                    var legendRect = legendElement.getBoundingClientRect();\n                    var rect = new Rect(Math.abs(legendRect.left - svgRect.left), Math.abs(legendRect.top - svgRect.top), legendRect.width, legendRect.height);\n                    fill = legendElement.getAttribute('fill');\n                    stroke = legend.shapeBorder.color;\n                    strokeWidth = legend.shapeBorder.width;\n                    if (!isNullOrUndefined(currentData['data'])) {\n                        var data = currentData['data'];\n                        for (var j = 0; j < data.length; j++) {\n                            if (dataIndex === data[j]['dataIndex'] && layerIndex === data[j]['layerIndex']) {\n                                this.renderInteractivePointer(legend, fill, stroke, id, strokeWidth, rect);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (!(isNullOrUndefined(querySelector(id, this.maps.element.id)))) {\n                remove(querySelector(id, this.maps.element.id));\n            }\n        }\n    };\n    Legend.prototype.renderInteractivePointer = function (legend, fill, stroke, id, strokeWidth, rect) {\n        var path;\n        var pathOptions;\n        var locX;\n        var locY;\n        var height = 10;\n        var width = 10;\n        var direction = (legend.orientation === 'None') ? (legend.position === 'Top' || legend.position === 'Bottom')\n            ? 'Horizontal' : 'Vertical' : legend.orientation;\n        if (direction === 'Horizontal') {\n            if (!legend.invertedPointer) {\n                locX = rect.x + (rect.width / 2);\n                locY = rect.y;\n                path = ' M ' + locX + ' ' + locY + ' L ' + (locX - width) + ' ' + (locY - height) +\n                    ' L ' + (locX + width) + ' ' + (locY - height) + ' Z ';\n            }\n            else {\n                locX = rect.x + (rect.width / 2);\n                locY = rect.y + (rect.height);\n                path = ' M ' + locX + ' ' + locY + ' L ' + (locX - width) + ' ' + (locY + height) +\n                    ' L ' + (locX + width) + ' ' + (locY + height) + ' Z ';\n            }\n        }\n        else {\n            if (!legend.invertedPointer) {\n                locX = rect.x + (rect.width);\n                locY = rect.y + (rect.height / 2);\n                path = ' M ' + locX + ' ' + locY + ' L ' + (locX + width) + ' ' + (locY - height) +\n                    ' L ' + (locX + width) + ' ' + (locY + height) + ' z ';\n            }\n            else {\n                locX = rect.x;\n                locY = rect.y + (rect.height / 2);\n                path = ' M ' + locX + ' ' + locY + ' L ' + (locX - width) + ' ' + (locY - height) +\n                    ' L ' + (locX - width) + ' ' + (locY + height) + ' z ';\n            }\n        }\n        pathOptions = new PathOption(id, fill, strokeWidth, stroke, 1, '', path);\n        this.maps.svgObject.appendChild(this.maps.renderer.drawPath(pathOptions));\n    };\n    Legend.prototype.wireEvents = function (element) {\n        EventHandler.add(element, Browser.touchStartEvent, this.changeNextPage, this);\n    };\n    Legend.prototype.addEventListener = function () {\n        if (this.maps.isDestroyed) {\n            return;\n        }\n        this.maps.on(Browser.touchMoveEvent, this.interactiveHandler, this);\n        this.maps.on(Browser.touchEndEvent, this.interactiveHandler, this);\n        this.maps.on(click, this.legendClick, this);\n    };\n    Legend.prototype.legendClick = function (targetEle) {\n        var legendShapeId;\n        var legendTextId;\n        var legendTextColor;\n        var legendToggleFill = this.maps.legendSettings.toggleLegendSettings.fill;\n        var legendToggleOpacity = this.maps.legendSettings.toggleLegendSettings.opacity;\n        var legendToggleBorderColor = this.maps.legendSettings.toggleLegendSettings.border.color;\n        var legendToggleBorderWidth = this.maps.legendSettings.toggleLegendSettings.border.width;\n        if (targetEle.parentNode['id'].indexOf(this.maps.element.id + '_Legend_Index_') > -1) {\n            var mapElement = void 0;\n            var legendIndex = parseFloat(targetEle.parentElement.id.substr((this.maps.element.id + '_Legend_Index_').length));\n            var selectedItem = this.legendCollection[legendIndex]['data'];\n            var isVisible = selectedItem['_isVisible'];\n            var shape = void 0;\n            if (this.maps.legendSettings.toggleLegendSettings.enable && this.maps.legendSettings.type === \"Bubbles\") {\n                for (var k = 0; k < this.maps.layers.length; k++) {\n                    for (var j = 0; j < this.maps.layers[k].bubbleSettings.length; j++) {\n                        for (var i = 0; i < selectedItem.length; i++) {\n                            shape = this.legendCollection[legendIndex]['data'][i];\n                            mapElement = querySelector(this.maps.element.id + '_LayerIndex_' + shape['layerIndex'] +\n                                '_BubbleIndex_' + j + '_dataIndex_' + shape['dataIndex'], this.maps.element.id);\n                            if (isVisible && mapElement !== null) {\n                                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                    mapElement.setAttribute('fill', this.maps.layers[k].shapeSettings.fill);\n                                    mapElement.setAttribute('stroke', this.maps.layers[k].shapeSettings.border.color);\n                                    mapElement.setAttribute('opacity', (this.maps.layers[k].shapeSettings.opacity).toString());\n                                    mapElement.setAttribute('stroke-width', (this.maps.layers[k].shapeSettings.border.width).toString());\n                                }\n                                else {\n                                    mapElement.setAttribute(\"fill\", legendToggleFill);\n                                    mapElement.setAttribute(\"opacity\", (legendToggleOpacity).toString());\n                                    mapElement.setAttribute('stroke', legendToggleBorderColor);\n                                    mapElement.setAttribute('stroke-width', (legendToggleBorderWidth).toString());\n                                }\n                                if (targetEle !== null) {\n                                    legendShapeId = querySelector(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId.setAttribute(\"fill\", \"#E5E5E5\");\n                                    legendTextId = querySelector(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                                    legendTextId.setAttribute(\"fill\", \"#E5E5E5\");\n                                }\n                            }\n                            else {\n                                mapElement.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                                mapElement.setAttribute('stroke', this.maps.layers[k].bubbleSettings[j].border.color);\n                                mapElement.setAttribute('opacity', (this.maps.layers[k].bubbleSettings[j].opacity).toString());\n                                mapElement.setAttribute('stroke-width', (this.maps.layers[k].bubbleSettings[j].border.width).toString());\n                                if (targetEle !== null) {\n                                    legendShapeId = querySelector(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId.setAttribute(\"fill\", this.legendCollection[legendIndex]['fill']);\n                                    legendTextId = querySelector(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                                    legendTextId.setAttribute(\"fill\", \"#757575\");\n                                }\n                            }\n                        }\n                        selectedItem['_isVisible'] = isVisible ? false : true;\n                    }\n                }\n            }\n            if (this.maps.legendSettings.type === \"Layers\" && this.maps.legendSettings.toggleLegendSettings.enable) {\n                var layerElement = void 0;\n                this.removeCollections(targetEle, legendIndex);\n                var toggledLegendIdIndex = this.maps.toggledLegendId.indexOf(legendIndex);\n                if (toggledLegendIdIndex !== -1) {\n                    isVisible = false;\n                }\n                ;\n                for (var j = 0; j < this.maps.layers.length; j++) {\n                    for (var i = 0; i < selectedItem.length; i++) {\n                        shape = this.legendCollection[legendIndex]['data'][i];\n                        layerElement = querySelector(this.maps.element.id + '_LayerIndex_' + shape['layerIndex'] +\n                            '_shapeIndex_' + shape['shapeIndex'] + '_dataIndex_' + shape['dataIndex'], this.maps.element.id);\n                        if (layerElement !== null) {\n                            var toggledShapeIdIndex = this.maps.toggledShapeElementId.indexOf(layerElement.id);\n                            if (isVisible) {\n                                if (i === 0) {\n                                    this.maps.toggledLegendId.push(legendIndex);\n                                }\n                                if (toggledShapeIdIndex === -1) {\n                                    this.maps.toggledShapeElementId.push(layerElement.id);\n                                }\n                                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                    layerElement.setAttribute('fill', this.maps.layers[j].shapeSettings.fill);\n                                    layerElement.setAttribute('opacity', (this.maps.layers[j].shapeSettings.opacity).toString());\n                                    layerElement.setAttribute('stroke', this.maps.layers[j].shapeSettings.border.color);\n                                    layerElement.setAttribute('stroke-width', (this.maps.layers[j].shapeSettings.border.width).toString());\n                                }\n                                else {\n                                    layerElement.setAttribute(\"fill\", legendToggleFill);\n                                    layerElement.setAttribute(\"opacity\", (legendToggleOpacity).toString());\n                                    layerElement.setAttribute('stroke', legendToggleBorderColor);\n                                    layerElement.setAttribute('stroke-width', (legendToggleBorderWidth).toString());\n                                }\n                                if (targetEle !== null) {\n                                    legendTextId = querySelector(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                                    legendTextId.setAttribute(\"fill\", \"#E5E5E5\");\n                                    legendShapeId = querySelector(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId.setAttribute(\"fill\", \"#E5E5E5\");\n                                }\n                            }\n                            else {\n                                if (toggledLegendIdIndex !== -1 && i === 0) {\n                                    this.maps.toggledLegendId.splice(toggledLegendIdIndex, 1);\n                                }\n                                if (toggledShapeIdIndex !== -1) {\n                                    this.maps.toggledShapeElementId.splice(toggledShapeIdIndex, 1);\n                                }\n                                layerElement.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                                layerElement.setAttribute('opacity', (this.maps.layers[j].shapeSettings.opacity).toString());\n                                layerElement.setAttribute('stroke', this.maps.layers[j].shapeSettings.border.color);\n                                layerElement.setAttribute('stroke-width', (this.maps.layers[j].shapeSettings.border.width).toString());\n                                if (targetEle !== null) {\n                                    legendTextId = querySelector(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                                    legendTextId.setAttribute(\"fill\", \"#757575\");\n                                    legendShapeId = querySelector(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId.setAttribute(\"fill\", this.legendCollection[legendIndex]['fill']);\n                                }\n                            }\n                        }\n                    }\n                }\n                selectedItem['_isVisible'] = isVisible ? false : true;\n            }\n        }\n        else if (!isNullOrUndefined(targetEle.id) && (targetEle.id.indexOf(this.maps.element.id + '_Legend_Shape_Index') > -1 ||\n            targetEle.id.indexOf(this.maps.element.id + '_Legend_Index') !== -1) && this.maps.legendSettings.visible &&\n            targetEle.id.indexOf('_Text') === -1) {\n            var LegendInteractive = void 0;\n            var legendIndex = parseFloat(targetEle.id.substr((this.maps.element.id + '_Legend_Index_').length));\n            var mapdata = void 0;\n            var selectedItem = this.legendCollection[legendIndex]['data'];\n            var isVisible = selectedItem['_isVisible'];\n            if (this.maps.legendSettings.type === \"Bubbles\" && this.maps.legendSettings.toggleLegendSettings.enable) {\n                for (var k = 0; k < this.maps.layers.length; k++) {\n                    for (var j = 0; j < this.maps.layers[k].bubbleSettings.length; j++) {\n                        for (var i = 0; i < selectedItem.length; i++) {\n                            mapdata = this.legendCollection[legendIndex]['data'][i];\n                            LegendInteractive = querySelector(this.maps.element.id + '_LayerIndex_' + mapdata['layerIndex'] +\n                                '_BubbleIndex_' + j + '_dataIndex_' + mapdata['dataIndex'], this.maps.element.id);\n                            if (isVisible && LegendInteractive !== null) {\n                                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                    LegendInteractive.setAttribute('fill', this.maps.layers[k].shapeSettings.fill);\n                                    LegendInteractive.setAttribute('stroke', this.maps.layers[k].shapeSettings.border.color);\n                                    LegendInteractive.setAttribute('stroke-width', (this.maps.layers[k].shapeSettings.border.width).toString());\n                                    LegendInteractive.setAttribute('opacity', (this.maps.layers[k].shapeSettings.opacity).toString());\n                                }\n                                else {\n                                    LegendInteractive.setAttribute(\"fill\", legendToggleFill);\n                                    LegendInteractive.setAttribute(\"opacity\", (legendToggleOpacity).toString());\n                                    LegendInteractive.setAttribute('stroke', legendToggleBorderColor);\n                                    LegendInteractive.setAttribute('stroke-width', (legendToggleBorderWidth).toString());\n                                }\n                                if (targetEle !== null) {\n                                    legendTextId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                                    legendTextId.setAttribute(\"fill\", \"#E5E5E5\");\n                                    legendShapeId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId.setAttribute(\"fill\", \"#E5E5E5\");\n                                }\n                            }\n                            else {\n                                LegendInteractive.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                                LegendInteractive.setAttribute('stroke', this.maps.layers[k].bubbleSettings[j].border.color);\n                                LegendInteractive.setAttribute('stroke-width', (this.maps.layers[k].bubbleSettings[j].border.width).toString());\n                                LegendInteractive.setAttribute('opacity', (this.maps.layers[k].bubbleSettings[j].opacity).toString());\n                                if (targetEle !== null) {\n                                    legendShapeId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId.setAttribute(\"fill\", this.legendCollection[legendIndex]['fill']);\n                                    legendTextId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                                    legendTextId.setAttribute(\"fill\", \"#757575\");\n                                }\n                            }\n                        }\n                        selectedItem['_isVisible'] = isVisible ? false : true;\n                    }\n                }\n            }\n            if (this.maps.legendSettings.type === \"Layers\" && this.maps.legendSettings.toggleLegendSettings.enable) {\n                var mapLegendElement = void 0;\n                this.removeCollections(targetEle, legendIndex);\n                var toggleLegendIdIndex = this.maps.toggledLegendId.indexOf(legendIndex);\n                if (toggleLegendIdIndex !== -1) {\n                    isVisible = false;\n                }\n                ;\n                for (var k = 0; k < this.maps.layers.length; k++) {\n                    for (var i = 0; i < selectedItem.length; i++) {\n                        mapdata = this.legendCollection[legendIndex]['data'][i];\n                        mapLegendElement = querySelector(this.maps.element.id + '_LayerIndex_' + mapdata['layerIndex'] +\n                            '_shapeIndex_' + mapdata['shapeIndex'] + '_dataIndex_' + mapdata['dataIndex'], this.maps.element.id);\n                        if (mapLegendElement !== null) {\n                            var toggledShapeIdIndex = this.maps.toggledShapeElementId.indexOf(mapLegendElement.id);\n                            if (isVisible) {\n                                if (i === 0) {\n                                    this.maps.toggledLegendId.push(legendIndex);\n                                }\n                                if (toggledShapeIdIndex === -1) {\n                                    this.maps.toggledShapeElementId.push(mapLegendElement.id);\n                                }\n                                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                    mapLegendElement.setAttribute('fill', this.maps.layers[0].shapeSettings.fill);\n                                    mapLegendElement.setAttribute('stroke', this.maps.layers[0].shapeSettings.border.color);\n                                    mapLegendElement.setAttribute('opacity', (this.maps.layers[k].shapeSettings.opacity).toString());\n                                    mapLegendElement.setAttribute('stroke-width', (this.maps.layers[k].shapeSettings.border.width).toString());\n                                }\n                                else {\n                                    mapLegendElement.setAttribute(\"fill\", legendToggleFill);\n                                    mapLegendElement.setAttribute(\"opacity\", (legendToggleOpacity).toString());\n                                    mapLegendElement.setAttribute('stroke', legendToggleBorderColor);\n                                    mapLegendElement.setAttribute('stroke-width', (legendToggleBorderWidth).toString());\n                                }\n                                if (targetEle !== null) {\n                                    legendShapeId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId.setAttribute(\"fill\", \"#E5E5E5\");\n                                    legendTextId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                                    legendTextId.setAttribute(\"fill\", \"#E5E5E5\");\n                                }\n                            }\n                            else {\n                                if (toggleLegendIdIndex !== -1 && i === 0) {\n                                    this.maps.toggledLegendId.splice(toggleLegendIdIndex, 1);\n                                }\n                                if (toggledShapeIdIndex !== -1) {\n                                    this.maps.toggledShapeElementId.splice(toggledShapeIdIndex, 1);\n                                }\n                                mapLegendElement.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                                mapLegendElement.setAttribute('stroke', this.maps.layers[0].shapeSettings.border.color);\n                                mapLegendElement.setAttribute('opacity', (this.maps.layers[k].shapeSettings.opacity).toString());\n                                mapLegendElement.setAttribute('stroke-width', (this.maps.layers[k].shapeSettings.border.width).toString());\n                                if (targetEle !== null) {\n                                    legendTextId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                                    legendTextId.setAttribute(\"fill\", \"#757575\");\n                                    legendShapeId = querySelector(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId.setAttribute(\"fill\", this.legendCollection[legendIndex]['fill']);\n                                }\n                            }\n                        }\n                    }\n                }\n                selectedItem['_isVisible'] = isVisible ? false : true;\n            }\n        }\n    };\n    Legend.prototype.removeCollections = function (targetEle, legendIndex) {\n        this.removeLegendSelectionCollection(targetEle);\n        var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, targetEle);\n        if (legendSelectionIndex !== -1) {\n            this.maps.legendSelectionCollection.splice(legendSelectionIndex, 1);\n        }\n        var legendHighlightIndex = this.getIndexofLegend(this.legendHighlightCollection, targetEle);\n        if (legendHighlightIndex !== -1) {\n            this.legendHighlightCollection.splice(legendSelectionIndex, 1);\n        }\n        var shapeHighlightIndex = this.getIndexofLegend(this.shapeHighlightCollection, targetEle);\n        if (shapeHighlightIndex !== -1) {\n            this.shapeHighlightCollection.splice(shapeHighlightIndex, 1);\n        }\n        var selectedIndex = this.maps.selectedLegendElementId.indexOf(legendIndex);\n        if (selectedIndex !== -1) {\n            this.maps.selectedLegendElementId.splice(selectedIndex, 1);\n        }\n    };\n    Legend.prototype.removeEventListener = function () {\n        if (this.maps.isDestroyed) {\n            return;\n        }\n        this.maps.off(Browser.touchMoveEvent, this.interactiveHandler);\n        this.maps.off(Browser.touchEndEvent, this.interactiveHandler);\n        this.maps.off(click, this.legendClick);\n    };\n    Legend.prototype.getLegendData = function (layerIndex, dataIndex, data, dataPath, layerData, shapePropertyPath, value) {\n        var legendData = [];\n        if (Object.prototype.toString.call(layerData) === '[object Array]') {\n            for (var i = 0; i < layerData.length; i++) {\n                var shapeData = layerData[i];\n                var dataPathValue = (dataPath.indexOf(\".\") > -1) ? getValueFromObject(data, dataPath) : data[dataPath];\n                var shapePath = checkPropertyPath(data[dataPath], shapePropertyPath, shapeData['properties']);\n                var dataPathValueCase = !isNullOrUndefined(dataPathValue)\n                    ? dataPathValue.toLowerCase() : dataPathValue;\n                var shapeDataValueCase = !isNullOrUndefined(shapeData['properties'][shapePath])\n                    && isNaN(shapeData['properties'][shapePath]) ? shapeData['properties'][shapePath].toLowerCase() : shapeData['properties'][shapePath];\n                if (shapeDataValueCase === dataPathValueCase) {\n                    legendData.push({\n                        layerIndex: layerIndex, shapeIndex: i, dataIndex: dataIndex,\n                        name: data[dataPath], value: value\n                    });\n                }\n            }\n        }\n        return legendData;\n    };\n    Legend.prototype.legendGradientColor = function (colorMap, legendIndex) {\n        var legendFillColor;\n        var xmlns = 'http://www.w3.org/2000/svg';\n        if (!isNullOrUndefined(colorMap.color) && typeof (colorMap.color) === 'object') {\n            var linerGradientEle = document.createElementNS(xmlns, 'linearGradient');\n            var opacity = 1;\n            var position = this.maps.legendSettings.position;\n            var x2 = void 0;\n            var y2 = void 0;\n            x2 = position === 'Top' || position === 'Bottom' ? '100' : '0';\n            y2 = position === 'Top' || position === 'Bottom' ? '0' : '100';\n            linerGradientEle.setAttribute('id', 'linear_' + legendIndex + '_' + this.maps.element.id);\n            linerGradientEle.setAttribute('x1', 0 + '%');\n            linerGradientEle.setAttribute('y1', 0 + '%');\n            linerGradientEle.setAttribute('x2', x2 + '%');\n            linerGradientEle.setAttribute('y2', y2 + '%');\n            for (var b = 0; b < colorMap.color.length; b++) {\n                var offsetColor = 100 / (colorMap.color.length - 1);\n                var stopEle = document.createElementNS(xmlns, 'stop');\n                stopEle.setAttribute('offset', b * offsetColor + '%');\n                stopEle.setAttribute('stop-color', colorMap.color[b]);\n                stopEle.setAttribute('stop-opacity', opacity.toString());\n                linerGradientEle.appendChild(stopEle);\n            }\n            this.legendLinearGradient = linerGradientEle;\n            var color = 'url(' + '#linear_' + legendIndex + '_' + this.maps.element.id + ')';\n            this.defsElement.appendChild(linerGradientEle);\n            legendFillColor = color;\n        }\n        return legendFillColor;\n    };\n    /**\n     * Get module name.\n     */\n    Legend.prototype.getModuleName = function () {\n        return 'Legend';\n    };\n    /**\n     * To destroy the legend.\n     * @return {void}\n     * @private\n     */\n    Legend.prototype.destroy = function (maps) {\n        /**\n         * Destroy method performed here\n         */\n        this.removeEventListener();\n    };\n    return Legend;\n}());\nexport { Legend };\n"]},"metadata":{},"sourceType":"module"}