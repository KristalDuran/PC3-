{"ast":null,"code":"import { serialize } from './util.js';\nexport class OpenStreet {\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  geolookup(address) {\n    let url = 'https://nominatim.openstreetmap.org/search/';\n    let params = {\n      q: address,\n      format: 'json',\n      addressdetails: 1,\n      limit: this.options.limit || 10,\n      countrycodes: this.options.countrycodes || '',\n      'accept-language': this.options.lang || 'en-US'\n    };\n    url = `${url}?${serialize(params)}`;\n    return fetch(url).then(resp => resp.json()).then(json => json['map'](result => {\n      return {\n        source: 'OpenStreetMap',\n        lng: parseFloat(result.lon),\n        lat: parseFloat(result.lat),\n        address: {\n          name: result.address.neighbourhood || '',\n          road: result.address.road || '',\n          postalCode: result.address.postcode,\n          city: result.address.city || result.address.town,\n          state: result.address.state,\n          country: result.address.country\n        },\n        formatted: result.display_name,\n        raw: result\n      };\n    }));\n  }\n\n  reverse(lat, lng) {\n    let url = 'https://nominatim.openstreetmap.org/reverse';\n    let params = {\n      format: 'json',\n      lat: lat,\n      lon: lng,\n      zoom: this.options.zoom || 18,\n      addressdetails: this.options.addressdetail || 1,\n      'accept-language': this.options.lang || 'en-US'\n    };\n    url = `${url}?${serialize(params)}`;\n    return fetch(url).then(resp => resp.json()).then(json => {\n      return {\n        source: 'OpenStreetMap',\n        address: json['display_name'],\n        raw: json\n      };\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/node_modules/geo-coder/src/providers/open-street.js"],"names":["serialize","OpenStreet","constructor","options","geolookup","address","url","params","q","format","addressdetails","limit","countrycodes","lang","fetch","then","resp","json","result","source","lng","parseFloat","lon","lat","name","neighbourhood","road","postalCode","postcode","city","town","state","country","formatted","display_name","raw","reverse","zoom","addressdetail"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,WAAxB;AAEA,OAAO,MAAMC,UAAN,CAAiB;AAEtBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACD;;AAEDC,EAAAA,SAAS,CAACC,OAAD,EAAU;AACjB,QAAIC,GAAG,GAAG,6CAAV;AACA,QAAIC,MAAM,GAAG;AACXC,MAAAA,CAAC,EAAEH,OADQ;AAEXI,MAAAA,MAAM,EAAE,MAFG;AAGXC,MAAAA,cAAc,EAAE,CAHL;AAIXC,MAAAA,KAAK,EAAE,KAAKR,OAAL,CAAaQ,KAAb,IAAsB,EAJlB;AAKXC,MAAAA,YAAY,EAAE,KAAKT,OAAL,CAAaS,YAAb,IAA6B,EALhC;AAMX,yBAAmB,KAAKT,OAAL,CAAaU,IAAb,IAAqB;AAN7B,KAAb;AAQAP,IAAAA,GAAG,GAAI,GAAEA,GAAI,IAAGN,SAAS,CAACO,MAAD,CAAS,EAAlC;AAEA,WAAOO,KAAK,CAACR,GAAD,CAAL,CACJS,IADI,CACCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADT,EAEJF,IAFI,CAECE,IAAI,IACRA,IAAI,CAAC,KAAD,CAAJ,CAAYC,MAAM,IAAI;AACpB,aAAO;AACLC,QAAAA,MAAM,EAAE,eADH;AAELC,QAAAA,GAAG,EAAEC,UAAU,CAACH,MAAM,CAACI,GAAR,CAFV;AAGLC,QAAAA,GAAG,EAAEF,UAAU,CAACH,MAAM,CAACK,GAAR,CAHV;AAILlB,QAAAA,OAAO,EAAE;AACPmB,UAAAA,IAAI,EAAEN,MAAM,CAACb,OAAP,CAAeoB,aAAf,IAAgC,EAD/B;AAEPC,UAAAA,IAAI,EAAER,MAAM,CAACb,OAAP,CAAeqB,IAAf,IAAuB,EAFtB;AAGPC,UAAAA,UAAU,EAAET,MAAM,CAACb,OAAP,CAAeuB,QAHpB;AAIPC,UAAAA,IAAI,EAAEX,MAAM,CAACb,OAAP,CAAewB,IAAf,IAAuBX,MAAM,CAACb,OAAP,CAAeyB,IAJrC;AAKPC,UAAAA,KAAK,EAAEb,MAAM,CAACb,OAAP,CAAe0B,KALf;AAMPC,UAAAA,OAAO,EAAEd,MAAM,CAACb,OAAP,CAAe2B;AANjB,SAJJ;AAYLC,QAAAA,SAAS,EAAEf,MAAM,CAACgB,YAZb;AAaLC,QAAAA,GAAG,EAAEjB;AAbA,OAAP;AAeD,KAhBD,CAHG,CAAP;AAqBD;;AAEDkB,EAAAA,OAAO,CAACb,GAAD,EAAMH,GAAN,EAAW;AAChB,QAAId,GAAG,GAAG,6CAAV;AACA,QAAIC,MAAM,GAAG;AACXE,MAAAA,MAAM,EAAE,MADG;AAEXc,MAAAA,GAAG,EAAEA,GAFM;AAGXD,MAAAA,GAAG,EAAEF,GAHM;AAIXiB,MAAAA,IAAI,EAAE,KAAKlC,OAAL,CAAakC,IAAb,IAAqB,EAJhB;AAKX3B,MAAAA,cAAc,EAAE,KAAKP,OAAL,CAAamC,aAAb,IAA8B,CALnC;AAMX,yBAAmB,KAAKnC,OAAL,CAAaU,IAAb,IAAqB;AAN7B,KAAb;AAQAP,IAAAA,GAAG,GAAI,GAAEA,GAAI,IAAGN,SAAS,CAACO,MAAD,CAAS,EAAlC;AAEA,WAAOO,KAAK,CAACR,GAAD,CAAL,CACJS,IADI,CACCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADT,EAEJF,IAFI,CAECE,IAAI,IAAI;AACV,aAAO;AACLE,QAAAA,MAAM,EAAE,eADH;AAELd,QAAAA,OAAO,EAAEY,IAAI,CAAC,cAAD,CAFR;AAGLkB,QAAAA,GAAG,EAAElB;AAHA,OAAP;AAKD,KARE,CAAP;AAUD;;AA/DqB","sourcesContent":["import {serialize} from './util.js';\n\nexport class OpenStreet {\n  \n  constructor(options) {\n    this.options = options || {};\n  }\n\n  geolookup(address) {\n    let url = 'https://nominatim.openstreetmap.org/search/';\n    let params = {\n      q: address,\n      format: 'json',\n      addressdetails: 1,\n      limit: this.options.limit || 10,\n      countrycodes: this.options.countrycodes || '',\n      'accept-language': this.options.lang || 'en-US'\n    };\n    url = `${url}?${serialize(params)}`\n\n    return fetch(url)\n      .then(resp => resp.json())\n      .then(json => \n        json['map'](result => {\n          return {\n            source: 'OpenStreetMap',\n            lng: parseFloat(result.lon),\n            lat: parseFloat(result.lat),\n            address: {\n              name: result.address.neighbourhood || '',\n              road: result.address.road || '',\n              postalCode: result.address.postcode,\n              city: result.address.city || result.address.town,\n              state: result.address.state,\n              country: result.address.country\n            },\n            formatted: result.display_name,\n            raw: result\n          }\n        })\n      );\n  }\n\n  reverse(lat, lng) {\n    let url = 'https://nominatim.openstreetmap.org/reverse';\n    let params = {\n      format: 'json',\n      lat: lat,\n      lon: lng,\n      zoom: this.options.zoom || 18,\n      addressdetails: this.options.addressdetail || 1,\n      'accept-language': this.options.lang || 'en-US'\n    };\n    url = `${url}?${serialize(params)}`\n\n    return fetch(url)\n      .then(resp => resp.json())\n      .then(json => {\n          return {\n            source: 'OpenStreetMap',\n            address: json['display_name'],\n            raw: json\n          }\n        }\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}