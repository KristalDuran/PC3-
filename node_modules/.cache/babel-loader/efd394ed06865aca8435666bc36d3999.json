{"ast":null,"code":"import * as ol from 'openlayers';\nimport { GeoCoder } from 'geo-coder';\nimport './geo-coder.css';\nlet element = document.createElement('div');\nexport class GeoCoderControl extends ol.control.Control {\n  constructor(_options = {}) {\n    super({\n      element: element\n    });\n    this.geoCoder = void 0;\n    this.eventListeners = {};\n    this.expanded = false;\n    this.buttonEl = void 0;\n    this.autocompleteEl = void 0;\n\n    this.locate = options => {\n      let lonLat = [parseFloat(options.lon), parseFloat(options.lat)];\n      let projection = this.getMap().getView().getProjection();\n      let coord = ol.proj.transform(lonLat, 'EPSG:4326', projection);\n      let view = this.getMap().getView();\n      let duration = options.duration || 500;\n      let resolution = options.resolution || 2.388657133911758;\n      view.animate({\n        duration: duration,\n        resolution: resolution\n      }, {\n        duration: duration,\n        center: coord\n      });\n    };\n\n    this.toggleExpand = () => {\n      this.expanded = !this.expanded;\n      this.autocompleteEl.style.display = this.expanded ? '' : 'none';\n    };\n\n    this.geoCoder = new GeoCoder(_options);\n    element.innerHTML = ''; //it may contain the previous element\n\n    element.className = 'ol-control geo-coder';\n    element.appendChild(this.buttonEl = this.getButtonHTML());\n    element.appendChild(this.autocompleteEl = this.getAutocompleteHTML());\n  }\n\n  on(eventName, listener, option) {\n    this.eventListeners[eventName] = listener;\n    return listener;\n  }\n\n  getButtonHTML() {\n    let buttonEl = document.createElement('button');\n    buttonEl.innerHTML = 'G';\n    buttonEl.addEventListener('click', this.toggleExpand, false);\n    return buttonEl;\n  }\n\n  getAutocompleteHTML() {\n    let autocompleteEl = document.createElement('div');\n    autocompleteEl.className = 'autocomplete';\n    autocompleteEl.style.display = 'none';\n    let inputEl = document.createElement('input');\n    inputEl.className = 'address';\n    autocompleteEl.appendChild(inputEl);\n    this.geoCoder.autocomplete(inputEl);\n    inputEl.addEventListener('place_changed', event => {\n      //this.locate(event.detail.lat, event.detail.lon);\n      this.eventListeners['place_changed'](event);\n    });\n    return autocompleteEl;\n  }\n\n}","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/custom/control/geo-coder-control.tsx"],"names":["ol","GeoCoder","element","document","createElement","GeoCoderControl","control","Control","constructor","options","geoCoder","eventListeners","expanded","buttonEl","autocompleteEl","locate","lonLat","parseFloat","lon","lat","projection","getMap","getView","getProjection","coord","proj","transform","view","duration","resolution","animate","center","toggleExpand","style","display","innerHTML","className","appendChild","getButtonHTML","getAutocompleteHTML","on","eventName","listener","option","addEventListener","inputEl","autocomplete","event"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ol from 'openlayers';\nimport {GeoCoder} from 'geo-coder';\n\nimport './geo-coder.css';\n\nlet element: HTMLElement = document.createElement('div');\n\nexport class GeoCoderControl extends ol.control.Control {\n  geoCoder: GeoCoder;\n  eventListeners: any = {};\n  expanded: boolean = false;\n  buttonEl: HTMLButtonElement;\n  autocompleteEl:  HTMLDivElement;\n\n  constructor(options = {}) {\n    super({element: element});\n    this.geoCoder = new GeoCoder(options);\n    element.innerHTML=''; //it may contain the previous element\n    element.className = 'ol-control geo-coder';\n    element.appendChild(this.buttonEl = this.getButtonHTML());\n    element.appendChild(this.autocompleteEl  = this.getAutocompleteHTML());\n  }\n\n  on(eventName: string, listener: Function, option?: Object): any {\n    this.eventListeners[eventName] = listener;\n    return listener;\n  }\n\n  locate = (options: any) => {\n    let lonLat: [number, number] = [parseFloat(options.lon), parseFloat(options.lat)];\n    let projection = this.getMap().getView().getProjection();\n    let coord = ol.proj.transform(lonLat, 'EPSG:4326', projection);\n    let view = this.getMap().getView();\n    let duration = options.duration || 500;\n    let resolution = options.resolution || 2.388657133911758;\n\n    view.animate(\n      { duration: duration, resolution: resolution },\n      { duration: duration, center: coord }\n    );\n  }\n\n  toggleExpand = () => {\n    this.expanded = !this.expanded;\n    this.autocompleteEl.style.display = this.expanded ? '' : 'none';\n  }\n\n  getButtonHTML() {\n    let buttonEl = document.createElement('button');\n    buttonEl.innerHTML = 'G';\n    buttonEl.addEventListener('click', this.toggleExpand, false);\n    return buttonEl;\n  }\n\n  getAutocompleteHTML() {\n    let autocompleteEl = document.createElement('div');\n    autocompleteEl.className = 'autocomplete';\n    autocompleteEl.style.display = 'none';\n    let inputEl = document.createElement('input');\n    inputEl.className = 'address';\n    autocompleteEl.appendChild(inputEl);\n\n    this.geoCoder.autocomplete(inputEl);\n    inputEl.addEventListener('place_changed', (event: any) => {\n      //this.locate(event.detail.lat, event.detail.lon);\n      this.eventListeners['place_changed'](event);\n    })\n\n    return autocompleteEl;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}