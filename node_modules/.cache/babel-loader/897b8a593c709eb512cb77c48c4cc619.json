{"ast":null,"code":"import * as React from 'react';\nimport * as ol from 'openlayers';\nimport { Util } from \"../util\";\nimport { Map } from '../map';\nexport class VectorTile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layer = void 0;\n    this.options = {\n      renderBuffer: undefined,\n      renderMode: undefined,\n      renderOrder: undefined,\n      extent: undefined,\n      minResolution: undefined,\n      maxResolution: undefined,\n      opacity: undefined,\n      preload: undefined,\n      source: undefined,\n      style: undefined,\n      updateWhileAnimating: undefined,\n      updateWhileInteracting: undefined,\n      visible: undefined\n    };\n    this.events = {\n      'change': undefined,\n      'change:extent': undefined,\n      'change:maxResolution': undefined,\n      'change:minResolution': undefined,\n      'change:opacity': undefined,\n      'change:preload': undefined,\n      'change:source': undefined,\n      'change:useInterimTilesOnError': undefined,\n      'change:visible': undefined,\n      'change:zIndex': undefined,\n      'postcompose': undefined,\n      'precompose': undefined,\n      'propertychange': undefined,\n      'render': undefined\n    };\n  }\n\n  render() {\n    return null;\n  }\n\n  componentDidMount() {\n    let options = Util.getOptions(Object.assign(this.options, this.props));\n    this.layer = new ol.layer.VectorTile(options);\n\n    if (this.options.callback) {\n      this.options.callback(this.layer);\n    }\n\n    if (this.props.zIndex) {\n      this.layer.setZIndex(this.props.zIndex);\n    }\n\n    this.context.mapComp.layers.push(this.layer);\n    let olEvents = Util.getEvents(this.events, this.props);\n\n    for (let eventName in olEvents) {\n      this.layer.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps !== this.props) {\n      let options = Util.getOptions(Object.assign(this.options, this.props));\n      this.context.mapComp.map.removeLayer(this.layer);\n      this.layer = new ol.layer.VectorTile(options);\n\n      if (this.options.callback) {\n        this.options.callback(this.layer);\n      }\n\n      if (this.props.zIndex) {\n        this.layer.setZIndex(this.props.zIndex);\n      }\n\n      this.context.mapComp.map.addLayer(this.layer);\n      let olEvents = Util.getEvents(this.events, this.props);\n\n      for (let eventName in olEvents) {\n        this.layer.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.context.mapComp.map.removeLayer(this.layer);\n  }\n\n}\nVectorTile['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/layers/vector-tile.tsx"],"names":["React","ol","Util","Map","VectorTile","Component","constructor","props","layer","options","renderBuffer","undefined","renderMode","renderOrder","extent","minResolution","maxResolution","opacity","preload","source","style","updateWhileAnimating","updateWhileInteracting","visible","events","render","componentDidMount","getOptions","Object","assign","callback","zIndex","setZIndex","context","mapComp","layers","push","olEvents","getEvents","eventName","on","componentWillReceiveProps","nextProps","map","removeLayer","addLayer","componentWillUnmount","PropTypes","instanceOf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ol from 'openlayers';\nimport {Util} from \"../util\";\nimport {Map} from '../map';\n\nexport class VectorTile extends React.Component<any, any> {\n\n  layer: ol.layer.Vector;\n\n  options: any = {\n    renderBuffer: undefined,\n    renderMode: undefined,\n    renderOrder: undefined,\n    extent: undefined,\n    minResolution: undefined,\n    maxResolution: undefined,\n    opacity: undefined,\n    preload: undefined,\n    source: undefined,\n    style: undefined,\n    updateWhileAnimating: undefined,\n    updateWhileInteracting: undefined,\n    visible: undefined\n  };\n\n  events: any = {\n    'change': undefined,\n    'change:extent': undefined,\n    'change:maxResolution': undefined,\n    'change:minResolution': undefined,\n    'change:opacity': undefined,\n    'change:preload': undefined,\n    'change:source': undefined,\n    'change:useInterimTilesOnError': undefined,\n    'change:visible': undefined,\n    'change:zIndex': undefined,\n    'postcompose': undefined,\n    'precompose': undefined,\n    'propertychange': undefined,\n    'render': undefined\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return null;\n  }\n\n  componentDidMount () {\n    let options = Util.getOptions(Object.assign(this.options, this.props));\n    this.layer = new ol.layer.VectorTile(options);\n    if (this.options.callback) {\n      this.options.callback(this.layer);\n    }\n    if(this.props.zIndex){\n      this.layer.setZIndex(this.props.zIndex);\n    }\n    this.context.mapComp.layers.push(this.layer);\n    \n    let olEvents = Util.getEvents(this.events, this.props);\n    for(let eventName in olEvents) {\n      this.layer.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if(nextProps !== this.props){\n      let options = Util.getOptions(Object.assign(this.options, this.props));\n      this.context.mapComp.map.removeLayer(this.layer);\n      this.layer = new ol.layer.VectorTile(options);\n      if (this.options.callback) {\n        this.options.callback(this.layer);\n      }\n      if(this.props.zIndex){\n        this.layer.setZIndex(this.props.zIndex);\n      }\n      this.context.mapComp.map.addLayer(this.layer);\n\n      let olEvents = Util.getEvents(this.events, this.props);\n      for(let eventName in olEvents) {\n        this.layer.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n  \n  componentWillUnmount () {\n    this.context.mapComp.map.removeLayer(this.layer);\n  }\n\n}\n\nVectorTile['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};\n"]},"metadata":{},"sourceType":"module"}