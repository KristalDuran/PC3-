{"ast":null,"code":"var _jsxFileName = \"/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/custom/control/geo-coder-component.tsx\";\nimport * as React from 'react';\nimport * as ol from 'openlayers';\nimport { GeoCoderControl } from './geo-coder-control';\nimport { Util } from '../../util';\nimport { Map } from '../../map';\nexport class GeoCoderComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.control = void 0;\n    this.geoCoder = void 0;\n    this.options = {\n      provider: undefined,\n      key: undefined\n    };\n    this.events = {\n      'place_changed': undefined\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n  componentDidMount() {\n    let options = Util.getOptions(Object['assign'](this.options, this.props));\n    this.control = new GeoCoderControl(options);\n    this.geoCoder = this.control.geoCoder;\n    this.context.mapComp.controls.push(this.control);\n    this.geoCoder = this.control.geoCoder; //regitster events\n\n    let olEvents = Util.getEvents(this.events, this.props);\n\n    for (let eventName in olEvents) {\n      this.control.on(eventName, olEvents[eventName]);\n    }\n  }\n\n}\nGeoCoderComponent['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/custom/control/geo-coder-component.tsx"],"names":["React","ol","GeoCoderControl","Util","Map","GeoCoderComponent","Component","constructor","props","control","geoCoder","options","provider","undefined","key","events","render","children","componentDidMount","getOptions","Object","context","mapComp","controls","push","olEvents","getEvents","eventName","on","PropTypes","instanceOf","map"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,YAApB;AACA,SAAQC,eAAR,QAA8B,qBAA9B;AACA,SAAQC,IAAR,QAAmB,YAAnB;AACA,SAAQC,GAAR,QAAkB,WAAlB;AAEA,OAAO,MAAMC,iBAAN,SAAgCL,KAAK,CAACM,SAAtC,CAA0D;AAc/DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAAE,UAAMA,KAAN;AAAF,SAZnBC,OAYmB;AAAA,SAXnBC,QAWmB;AAAA,SATnBC,OASmB,GATJ;AACbC,MAAAA,QAAQ,EAAEC,SADG;AAEbC,MAAAA,GAAG,EAAED;AAFQ,KASI;AAAA,SAJnBE,MAImB,GAJL;AACZ,uBAAiBF;AADL,KAIK;AAAiB;;AAEpCG,EAAAA,MAAM,GAAG;AACP,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKR,KAAL,CAAWS,QAAjB,CAAR;AACD;;AAEDC,EAAAA,iBAAiB,GAAI;AACnB,QAAIP,OAAO,GAAGR,IAAI,CAACgB,UAAL,CAAgBC,MAAM,CAAC,QAAD,CAAN,CAAiB,KAAKT,OAAtB,EAA+B,KAAKH,KAApC,CAAhB,CAAd;AACA,SAAKC,OAAL,GAAe,IAAIP,eAAJ,CAAoBS,OAApB,CAAf;AACA,SAAKD,QAAL,GAAgB,KAAKD,OAAL,CAAaC,QAA7B;AACA,SAAKW,OAAL,CAAaC,OAAb,CAAqBC,QAArB,CAA8BC,IAA9B,CAAmC,KAAKf,OAAxC;AACA,SAAKC,QAAL,GAAgB,KAAKD,OAAL,CAAaC,QAA7B,CALmB,CAOnB;;AACA,QAAIe,QAAQ,GAAGtB,IAAI,CAACuB,SAAL,CAAe,KAAKX,MAApB,EAA4B,KAAKP,KAAjC,CAAf;;AACA,SAAI,IAAImB,SAAR,IAAqBF,QAArB,EAA+B;AAC7B,WAAKhB,OAAL,CAAamB,EAAb,CAAgBD,SAAhB,EAA2BF,QAAQ,CAACE,SAAD,CAAnC;AACD;AAEF;;AAjC8D;AAqCjEtB,iBAAiB,CAAC,cAAD,CAAjB,GAAoC;AAClCiB,EAAAA,OAAO,EAAEtB,KAAK,CAAC6B,SAAN,CAAgBC,UAAhB,CAA2B1B,GAA3B,CADyB;AAElC2B,EAAAA,GAAG,EAAE/B,KAAK,CAAC6B,SAAN,CAAgBC,UAAhB,CAA2B7B,EAAE,CAACG,GAA9B;AAF6B,CAApC","sourcesContent":["import * as React from 'react';\nimport * as ol from 'openlayers';\nimport {GeoCoderControl} from './geo-coder-control';\nimport {Util} from '../../util';\nimport {Map} from '../../map';\n\nexport class GeoCoderComponent extends React.Component<any, any> {\n\n  control: GeoCoderControl;\n  geoCoder: any;\n\n  options: any = {\n    provider: undefined,\n    key: undefined\n  };\n\n  events: any = {\n    'place_changed': undefined\n  };\n\n  constructor(props) { super(props); }\n\n  render() { \n    return (<div>{this.props.children}</div>);\n  }\n\n  componentDidMount () {\n    let options = Util.getOptions(Object['assign'](this.options, this.props));\n    this.control = new GeoCoderControl(options);\n    this.geoCoder = this.control.geoCoder;\n    this.context.mapComp.controls.push(this.control)\n    this.geoCoder = this.control.geoCoder;\n    \n    //regitster events\n    let olEvents = Util.getEvents(this.events, this.props);\n    for(let eventName in olEvents) {\n      this.control.on(eventName, olEvents[eventName]);\n    }\n\n  }\n\n}\n\nGeoCoderComponent['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};\n"]},"metadata":{},"sourceType":"module"}