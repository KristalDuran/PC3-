{"ast":null,"code":"import { serialize, jsonp } from './util.js';\n/**\n * Bing geolookup / reverse lookup\n */\n\nexport class Bing {\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  geolookup(address) {\n    let url = 'https://dev.virtualearth.net/REST/v1/Locations';\n    let params = {\n      query: address,\n      key: this.options.key,\n      includeNeighborhood: this.options.includeNeighborhood || 0,\n      maxResults: this.options.maxResults || 10\n    };\n    return fetch(`${url}?${serialize(params)}`).then(resp => resp.json()).then(json => this._handleResponse(json));\n  }\n\n  reverse(lat, lng) {\n    let url = `http://dev.virtualearth.net/REST/v1/Locations/${lat},${lng}`;\n    let params = {\n      includeNeighborhood: this.options.includeNeighborhood || 0,\n      key: this.options.key\n    };\n    return fetch(`${url}?${serialize(params)}`).then(resp => resp.json()).then(json => {\n      let address = json['resourceSets'][0]['resources'][0]['name'];\n      return {\n        source: 'Bing',\n        address: address,\n        raw: json\n      };\n    });\n  }\n\n  _handleResponse(json) {\n    let results = json['resourceSets'][0]['resources'];\n    return results.map(result => {\n      return {\n        source: 'Bing',\n        lng: parseFloat(result.point.coordinates[1]),\n        lat: parseFloat(result.point.coordinates[0]),\n        address: {\n          name: result.name\n        },\n        formatted: result.address.formattedAddress,\n        raw: result\n      };\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/node_modules/geo-coder/src/providers/bing.js"],"names":["serialize","jsonp","Bing","constructor","options","geolookup","address","url","params","query","key","includeNeighborhood","maxResults","fetch","then","resp","json","_handleResponse","reverse","lat","lng","source","raw","results","map","result","parseFloat","point","coordinates","name","formatted","formattedAddress"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,KAAnB,QAA+B,WAA/B;AAEA;;;;AAGA,OAAO,MAAMC,IAAN,CAAW;AAEhBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACD;;AAEDC,EAAAA,SAAS,CAACC,OAAD,EAAU;AACjB,QAAIC,GAAG,GAAG,gDAAV;AACA,QAAIC,MAAM,GAAG;AACXC,MAAAA,KAAK,EAAEH,OADI;AAEXI,MAAAA,GAAG,EAAE,KAAKN,OAAL,CAAaM,GAFP;AAGXC,MAAAA,mBAAmB,EAAE,KAAKP,OAAL,CAAaO,mBAAb,IAAoC,CAH9C;AAIXC,MAAAA,UAAU,EAAE,KAAKR,OAAL,CAAaQ,UAAb,IAA2B;AAJ5B,KAAb;AAOA,WAAOC,KAAK,CAAE,GAAEN,GAAI,IAAGP,SAAS,CAACQ,MAAD,CAAS,EAA7B,CAAL,CACJM,IADI,CACCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADT,EAEJF,IAFI,CAECE,IAAI,IAAI,KAAKC,eAAL,CAAqBD,IAArB,CAFT,CAAP;AAGD;;AAEDE,EAAAA,OAAO,CAACC,GAAD,EAAMC,GAAN,EAAW;AAChB,QAAIb,GAAG,GACJ,iDAAgDY,GAAI,IAAGC,GAAI,EAD9D;AAEA,QAAIZ,MAAM,GAAG;AACXG,MAAAA,mBAAmB,EAAE,KAAKP,OAAL,CAAaO,mBAAb,IAAoC,CAD9C;AAEXD,MAAAA,GAAG,EAAE,KAAKN,OAAL,CAAaM;AAFP,KAAb;AAKA,WAAOG,KAAK,CAAE,GAAEN,GAAI,IAAGP,SAAS,CAACQ,MAAD,CAAS,EAA7B,CAAL,CACJM,IADI,CACCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADT,EAEJF,IAFI,CAECE,IAAI,IAAI;AACZ,UAAIV,OAAO,GAAGU,IAAI,CAAC,cAAD,CAAJ,CAAqB,CAArB,EAAwB,WAAxB,EAAqC,CAArC,EAAwC,MAAxC,CAAd;AACA,aAAO;AACLK,QAAAA,MAAM,EAAE,MADH;AAELf,QAAAA,OAAO,EAAEA,OAFJ;AAGLgB,QAAAA,GAAG,EAAEN;AAHA,OAAP;AAKD,KATI,CAAP;AAUD;;AAEDC,EAAAA,eAAe,CAACD,IAAD,EAAO;AACpB,QAAIO,OAAO,GAAGP,IAAI,CAAC,cAAD,CAAJ,CAAqB,CAArB,EAAwB,WAAxB,CAAd;AACA,WAAOO,OAAO,CAACC,GAAR,CAAYC,MAAM,IAAI;AAC3B,aAAO;AACLJ,QAAAA,MAAM,EAAE,MADH;AAELD,QAAAA,GAAG,EAAEM,UAAU,CAACD,MAAM,CAACE,KAAP,CAAaC,WAAb,CAAyB,CAAzB,CAAD,CAFV;AAGLT,QAAAA,GAAG,EAAEO,UAAU,CAACD,MAAM,CAACE,KAAP,CAAaC,WAAb,CAAyB,CAAzB,CAAD,CAHV;AAILtB,QAAAA,OAAO,EAAE;AACPuB,UAAAA,IAAI,EAAEJ,MAAM,CAACI;AADN,SAJJ;AAOLC,QAAAA,SAAS,EAAEL,MAAM,CAACnB,OAAP,CAAeyB,gBAPrB;AAQLT,QAAAA,GAAG,EAAEG;AARA,OAAP;AAUD,KAXM,CAAP;AAYD;;AAtDe","sourcesContent":["import {serialize, jsonp} from './util.js';\n\n/**\n * Bing geolookup / reverse lookup\n */\nexport class Bing {\n\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  geolookup(address) {\n    let url = 'https://dev.virtualearth.net/REST/v1/Locations';\n    let params = {\n      query: address,\n      key: this.options.key,\n      includeNeighborhood: this.options.includeNeighborhood || 0,\n      maxResults: this.options.maxResults || 10\n    };\n\n    return fetch(`${url}?${serialize(params)}`)\n      .then(resp => resp.json())\n      .then(json => this._handleResponse(json))\n  }\n\n  reverse(lat, lng) {\n    let url = \n      `http://dev.virtualearth.net/REST/v1/Locations/${lat},${lng}`;\n    let params = {\n      includeNeighborhood: this.options.includeNeighborhood || 0,\n      key: this.options.key\n    };\n\n    return fetch(`${url}?${serialize(params)}`)\n      .then(resp => resp.json())\n      .then(json => {\n        let address = json['resourceSets'][0]['resources'][0]['name'];\n        return {\n          source: 'Bing',\n          address: address,\n          raw: json\n        };\n      });\n  }\n\n  _handleResponse(json) {\n    let results = json['resourceSets'][0]['resources'];\n    return results.map(result => {\n      return {\n        source: 'Bing',\n        lng: parseFloat(result.point.coordinates[1]),\n        lat: parseFloat(result.point.coordinates[0]),\n        address: {\n          name: result.name\n        },\n        formatted: result.address.formattedAddress,\n        raw: result\n      };\n    });\n  }\n\n}\n "]},"metadata":{},"sourceType":"module"}