{"ast":null,"code":"import * as React from 'react';\n\nfunction getOptions(props) {\n  let options = {};\n\n  for (let key in props) {\n    if (key !== 'children' && typeof props[key] !== 'undefined' //exclude undefined ones\n    && !key.match(/^on[A-Z]/) //exclude events\n    ) {\n        options[key] = props[key];\n      }\n  }\n\n  return options;\n}\n\nfunction getPropsKey(eventName) {\n  return 'on' + eventName.replace(/(\\:[a-z])/g, $1 => $1.toUpperCase()).replace(/^[a-z]/, $1 => $1.toUpperCase()).replace(':', '');\n}\n\nfunction getEvents(events = {}, props = {}) {\n  let prop2EventMap = {};\n\n  for (let key in events) {\n    prop2EventMap[getPropsKey(key)] = key;\n  }\n\n  let ret = {};\n\n  for (let propName in props) {\n    let eventName = prop2EventMap[propName];\n    let prop = props[propName];\n\n    if (typeof prop !== 'undefined' && propName.match(/^on[A-Z]/) && eventName) {\n      ret[eventName] = prop;\n    }\n  }\n\n  return ret;\n}\n\nlet typeOf = function (obj) {\n  return {}.toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n};\n\nfunction cloneObject(obj) {\n  var type = typeOf(obj);\n\n  if (type == 'object' || type == 'array') {\n    if (obj.clone) {\n      return obj.clone();\n    }\n\n    var clone = type == 'array' ? [] : {};\n\n    for (var key in obj) {\n      clone[key] = cloneObject(obj[key]);\n    }\n\n    return clone;\n  }\n\n  return obj;\n}\n\nfunction findChild(children, childType) {\n  let found;\n  let childrenArr = React.Children.toArray(children);\n\n  for (let i = 0; i < childrenArr.length; i++) {\n    let child = childrenArr[i];\n\n    if (child.type == childType) {\n      found = child;\n      break;\n    }\n  }\n\n  return found;\n}\n\nexport class Util {}\nUtil.getOptions = getOptions;\nUtil.getEvents = getEvents;\nUtil.cloneObject = cloneObject;\nUtil.findChild = findChild;","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/util.tsx"],"names":["React","getOptions","props","options","key","match","getPropsKey","eventName","replace","$1","toUpperCase","getEvents","events","prop2EventMap","ret","propName","prop","typeOf","obj","toString","call","toLowerCase","cloneObject","type","clone","findChild","children","childType","found","childrenArr","Children","toArray","i","length","child","Util"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nfunction getOptions(props: any): any {\n    let options: any = {};\n    for(let key in props) {\n      if (\n        key !== 'children'\n        && typeof props[key] !== 'undefined' //exclude undefined ones\n        && !key.match(/^on[A-Z]/)     //exclude events\n      ) {\n        options[key] = props[key];\n      }\n    }\n    return options;\n  }\n\nfunction getPropsKey(eventName) {\n  return 'on' + eventName\n    .replace(/(\\:[a-z])/g, $1 => $1.toUpperCase())\n    .replace(/^[a-z]/, $1 => $1.toUpperCase())\n    .replace(':','')\n}\n\nfunction getEvents(events: any={}, props: any={}): any {\n  let prop2EventMap: any = {};\n  for(let key in events) {\n    prop2EventMap[getPropsKey(key)] = key;\n  } \n\n  let ret = {};\n  for(let propName in props) {\n    let eventName = prop2EventMap[propName];\n    let prop = props[propName];\n    if (typeof prop !== 'undefined' && propName.match(/^on[A-Z]/) && eventName) {\n      ret[eventName] = prop;\n    }\n  }\n\n  return ret;\n}\n\nlet typeOf = function(obj){\n    return ({}).toString.call(obj)\n        .match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n};\nfunction cloneObject(obj){\n  var type = typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (obj.clone) {\n      return obj.clone();\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = cloneObject(obj[key]);\n    }\n    return clone;\n  }\n  return obj;\n}\n\nfunction findChild(children: any, childType: any) {\n  let found: any;\n  let childrenArr = React.Children.toArray(children);\n  for (let i=0; i<childrenArr.length; i++) {\n    let child: any = childrenArr[i];\n    if (child.type == childType){\n      found = child;\n      break;\n    }\n  }\n  return found;\n}\n\nexport class Util {\n  static getOptions = getOptions;\n  static getEvents = getEvents;\n  static cloneObject = cloneObject;\n  static findChild = findChild;\n}"]},"metadata":{},"sourceType":"module"}