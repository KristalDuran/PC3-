{"ast":null,"code":"import { serialize } from './util.js';\nexport class Google {\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  geolookup(address) {\n    let url = 'https://maps.googleapis.com/maps/api/geocode/json';\n    let params = {\n      address: address,\n      key: this.options.key,\n      language: this.options.lang || 'en-US'\n    };\n    url = `${url}?${serialize(params)}`;\n    return fetch(url).then(resp => resp.json()).then(json => this._handleResponse(json));\n  }\n\n  reverse(lat, lng) {\n    let url = 'https://maps.googleapis.com/maps/api/geocode/json';\n    let params = {\n      latlng: `${lat},${lng}`,\n      key: this.options.key,\n      language: this.options.lang || 'en-US'\n    };\n    return fetch(`${url}?${serialize(params)}`).then(resp => resp.json()).then(json => {\n      return {\n        source: 'Google',\n        address: json['results'][0]['formatted_address'],\n        raw: json\n      };\n    });\n  }\n\n  _handleResponse(json) {\n    let results = json.results && json.results.length ? json.results : undefined;\n\n    if (results) {\n      /*\n       * @param {Array} details - address_components\n       */\n      const getDetails = function (details) {\n        let name, road, postcode, city, state, country;\n\n        let anyMatchInArray = function (source, target) {\n          return source.some(each => target.indexOf(each) >= 0);\n        };\n\n        details.forEach(detail => {\n          if (anyMatchInArray(detail.types, ['point_of_interest', 'establishment', 'natural_feature', 'airport'])) {\n            name = detail.long_name;\n          } else if (anyMatchInArray(detail.types, ['street_address', 'route', 'sublocality_level_5', 'intersection'])) {\n            road = detail.long_name;\n          } else if (anyMatchInArray(detail.types, ['postal_code'])) {\n            postcode = detail.long_name;\n          } else if (anyMatchInArray(detail.types, ['locality'])) {\n            city = detail.long_name;\n          } else if (anyMatchInArray(detail.types, ['administrative_area_level_1'])) {\n            state = detail.long_name;\n          } else if (anyMatchInArray(detail.types, ['country'])) {\n            country = detail.long_name;\n          }\n        });\n\n        if (name || road || postcode || city || state || country) {\n          return {\n            name,\n            road,\n            postcode,\n            city,\n            state,\n            country\n          };\n        } else {\n          return null;\n        }\n      };\n\n      let array = [];\n      results.forEach(result => {\n        let details = getDetails(result.address_components);\n\n        if (details) {\n          array.push({\n            source: 'Google',\n            lng: parseFloat(result.geometry.location.lng),\n            lat: parseFloat(result.geometry.location.lat),\n            address: {\n              name: details.name || '',\n              postalCode: details.postcode || '',\n              road: details.road || '',\n              city: details.city || '',\n              state: details.state || '',\n              country: details.country || ''\n            },\n            formatted: result.formatted_address,\n            raw: result\n          });\n        }\n      });\n      return array;\n    } else {\n      throw \"Invalid response\" + json;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/node_modules/geo-coder/src/providers/google.js"],"names":["serialize","Google","constructor","options","geolookup","address","url","params","key","language","lang","fetch","then","resp","json","_handleResponse","reverse","lat","lng","latlng","source","raw","results","length","undefined","getDetails","details","name","road","postcode","city","state","country","anyMatchInArray","target","some","each","indexOf","forEach","detail","types","long_name","array","result","address_components","push","parseFloat","geometry","location","postalCode","formatted","formatted_address"],"mappings":"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","sourcesContent":["import {serialize} from './util.js';\n\nexport class Google {\n\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  geolookup(address) {\n    let url = 'https://maps.googleapis.com/maps/api/geocode/json';\n    let params = {\n      address: address,\n      key: this.options.key,\n      language: this.options.lang || 'en-US'\n    };\n    url = `${url}?${serialize(params)}`\n\n    return fetch(url)\n      .then(resp => resp.json())\n      .then(json => this._handleResponse(json))\n  }\n\n  reverse(lat, lng) {\n    let url = 'https://maps.googleapis.com/maps/api/geocode/json';\n    let params = {\n      latlng: `${lat},${lng}`,\n      key: this.options.key,\n      language: this.options.lang || 'en-US'\n    };\n\n    return fetch(`${url}?${serialize(params)}`)\n      .then(resp => resp.json())\n      .then(json => {\n        return {\n          source: 'Google',\n          address: json['results'][0]['formatted_address'],\n          raw: json\n        }\n      })\n  }\n\n  _handleResponse(json) {\n    let results = json.results && json.results.length ? json.results : undefined;\n    if (results) {\n      /*\n       * @param {Array} details - address_components\n       */\n      const getDetails = function(details) {\n        let name, road, postcode, city, state, country;\n        let anyMatchInArray = function(source, target) {\n          return source.some(each => target.indexOf(each) >= 0);\n        };\n\n        details.forEach(detail => {\n          if (anyMatchInArray(detail.types, [ 'point_of_interest', 'establishment', 'natural_feature', 'airport' ])) {\n            name = detail.long_name;\n          } else if (anyMatchInArray(detail.types, ['street_address', 'route', 'sublocality_level_5', 'intersection'])) {\n            road = detail.long_name;\n          } else if (anyMatchInArray(detail.types, ['postal_code'])) {\n            postcode = detail.long_name;\n          } else if (anyMatchInArray(detail.types, ['locality'])) {\n            city = detail.long_name;\n          } else if (anyMatchInArray(detail.types, ['administrative_area_level_1'])) {\n            state = detail.long_name;\n          } else if (anyMatchInArray(detail.types, ['country'])) {\n            country = detail.long_name;\n          }\n        });\n\n        if (name || road || postcode || city || state || country) {\n          return {name, road, postcode, city, state, country};\n        } else {\n          return null;\n        }\n      };\n\n      let array = [];\n\n      results.forEach(result => {\n        let details = getDetails(result.address_components);\n\n        if (details) {\n          array.push({\n            source: 'Google',\n            lng: parseFloat(result.geometry.location.lng),\n            lat: parseFloat(result.geometry.location.lat),\n            address: {\n              name: details.name || '',\n              postalCode: details.postcode || '',\n              road: details.road || '',\n              city: details.city || '',\n              state: details.state || '',\n              country: details.country || ''\n            },\n            formatted: result.formatted_address,\n            raw: result\n          });\n        }\n      });\n\n      return array;\n    } else {\n      throw \"Invalid response\" + json;\n    }\n\n  }\n\n}"]},"metadata":{},"sourceType":"module"}