{"ast":null,"code":"import * as ol from 'openlayers';\nexport class ClusterStyle {\n  constructor(vectorSource) {\n    this.maxFeatureCount = void 0;\n    this.currentResolution = void 0;\n    this.source = void 0;\n\n    this.vectorStyleFunction = (feature, resolution) => {\n      if (resolution != this.currentResolution) {\n        this.calculateClusterInfo(resolution);\n        this.currentResolution = resolution;\n      }\n\n      var style;\n      var size = feature.get('features').length;\n\n      if (size > 1) {\n        style = new ol.style.Style({\n          image: new ol.style.Circle({\n            radius: feature.get('radius'),\n            fill: new ol.style.Fill({\n              color: [255, 153, 0, Math.min(0.8, 0.4 + size / this.maxFeatureCount)]\n            })\n          }),\n          text: new ol.style.Text({\n            text: size.toString(),\n            fill: new ol.style.Fill({\n              color: '#fff'\n            }),\n            stroke: new ol.style.Stroke({\n              color: 'rgba(0, 0, 0, 0.6)',\n              width: 3\n            })\n          })\n        });\n      } else {\n        var originalFeature = feature.get('features')[0];\n        style = this.createClusterStyle(originalFeature);\n      }\n\n      return style;\n    };\n\n    this.selectStyleFunction = feature => {\n      var invisibleFill = new ol.style.Fill({\n        color: 'rgba(255, 255, 255, 0.01)'\n      });\n      var styles = [new ol.style.Style({\n        image: new ol.style.Circle({\n          radius: feature.get('radius'),\n          fill: invisibleFill\n        })\n      })];\n      var originalFeatures = feature.get('features');\n      var originalFeature;\n\n      for (var i = originalFeatures.length - 1; i >= 0; --i) {\n        originalFeature = originalFeatures[i];\n        styles.push(this.createClusterStyle(originalFeature));\n      }\n\n      return styles;\n    };\n\n    this.source = vectorSource;\n  }\n\n  calculateClusterInfo(resolution) {\n    this.maxFeatureCount = 0;\n    var features = this.source.getFeatures();\n    var feature, radius;\n\n    for (var i = features.length - 1; i >= 0; --i) {\n      feature = features[i];\n      var originalFeatures = feature.get('features');\n      var extent = ol.extent.createEmpty();\n      var j, jj;\n\n      for (j = 0, jj = originalFeatures.length; j < jj; ++j) {\n        ol.extent.extend(extent, originalFeatures[j].getGeometry().getExtent());\n      }\n\n      this.maxFeatureCount = Math.max(this.maxFeatureCount, jj);\n      radius = 0.25 * (ol.extent.getWidth(extent) + ol.extent.getHeight(extent)) / resolution;\n      feature.set('radius', radius);\n    }\n  }\n\n  createClusterStyle(feature) {\n    var clusterFill = new ol.style.Fill({\n      color: 'rgba(255, 153, 0, 0.8)'\n    });\n    var clusterStroke = new ol.style.Stroke({\n      color: 'rgba(255, 204, 0, 0.2)',\n      width: 1\n    }); // 2012_Earthquakes_Mag5.kml stores the magnitude of each earthquake in a\n    // standards-violating <magnitude> tag in each Placemark.  We extract it\n    // from the Placemark's name instead.\n\n    var name = feature.get('name');\n    var magnitude = parseFloat(name.substr(2));\n    var radius = 5 + 20 * (magnitude - 5);\n    return new ol.style.Style({\n      geometry: feature.getGeometry(),\n      image: new ol.style.RegularShape({\n        radius1: radius,\n        radius2: 3,\n        points: 5,\n        angle: Math.PI,\n        fill: clusterFill,\n        stroke: clusterStroke\n      })\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/custom/style/cluster-style.tsx"],"names":["ol","ClusterStyle","constructor","vectorSource","maxFeatureCount","currentResolution","source","vectorStyleFunction","feature","resolution","calculateClusterInfo","style","size","get","length","Style","image","Circle","radius","fill","Fill","color","Math","min","text","Text","toString","stroke","Stroke","width","originalFeature","createClusterStyle","selectStyleFunction","invisibleFill","styles","originalFeatures","i","push","features","getFeatures","extent","createEmpty","j","jj","extend","getGeometry","getExtent","max","getWidth","getHeight","set","clusterFill","clusterStroke","name","magnitude","parseFloat","substr","geometry","RegularShape","radius1","radius2","points","angle","PI"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport * as ol from 'openlayers';\n\nexport class ClusterStyle {\n\n  maxFeatureCount: number;\n  currentResolution: any;\n  source: ol.source.Vector;\n\n  constructor(vectorSource: ol.source.Vector) {\n    this.source = vectorSource;\n  }\n\n  vectorStyleFunction = (feature, resolution) => {\n    if (resolution != this.currentResolution) {\n      this.calculateClusterInfo(resolution);\n      this.currentResolution = resolution;\n    }\n    var style;\n    var size = feature.get('features').length;\n    if (size > 1) {\n      style = new ol.style.Style({\n        image: new ol.style.Circle({\n          radius: feature.get('radius'),\n          fill: new ol.style.Fill({\n            color: [255, 153, 0, Math.min(0.8, 0.4 + (size / this.maxFeatureCount))]\n          })\n        }),\n        text: new ol.style.Text({\n          text: size.toString(),\n          fill: new ol.style.Fill({ color: '#fff' }),\n          stroke: new ol.style.Stroke({ color: 'rgba(0, 0, 0, 0.6)', width: 3 })\n        })\n      });\n    } else {\n      var originalFeature = feature.get('features')[0];\n      style = this.createClusterStyle(originalFeature);\n    }\n    return style;\n  };\n\n  selectStyleFunction = (feature) => {\n    var invisibleFill = new ol.style.Fill({ color: 'rgba(255, 255, 255, 0.01)' });\n    var styles = [new ol.style.Style({\n      image: new ol.style.Circle({\n        radius: feature.get('radius'),\n        fill: invisibleFill\n      })\n    })];\n    var originalFeatures = feature.get('features');\n    var originalFeature;\n    for (var i = originalFeatures.length - 1; i >= 0; --i) {\n      originalFeature = originalFeatures[i];\n      styles.push(this.createClusterStyle(originalFeature));\n    }\n    return styles;\n  };\n\n  private calculateClusterInfo(resolution) {\n    this.maxFeatureCount = 0;\n    var features = this.source.getFeatures();\n    var feature, radius;\n    for (var i = features.length - 1; i >= 0; --i) {\n      feature = features[i];\n      var originalFeatures = feature.get('features');\n      var extent = ol.extent.createEmpty();\n      var j, jj;\n      for (j = 0, jj = originalFeatures.length; j < jj; ++j) {\n        ol.extent.extend(extent, originalFeatures[j].getGeometry().getExtent());\n      }\n      this.maxFeatureCount = Math.max(this.maxFeatureCount, jj);\n      radius = 0.25 * (ol.extent.getWidth(extent) + ol.extent.getHeight(extent)) /\n          resolution;\n      feature.set('radius', radius);\n    }\n  }\n\n  private createClusterStyle(feature) {\n    var clusterFill = new ol.style.Fill({ color: 'rgba(255, 153, 0, 0.8)' });\n    var clusterStroke = new ol.style.Stroke({ color: 'rgba(255, 204, 0, 0.2)', width: 1 });\n    // 2012_Earthquakes_Mag5.kml stores the magnitude of each earthquake in a\n    // standards-violating <magnitude> tag in each Placemark.  We extract it\n    // from the Placemark's name instead.\n    var name = feature.get('name');\n    var magnitude = parseFloat(name.substr(2));\n    var radius = 5 + 20 * (magnitude - 5);\n\n    return new ol.style.Style({\n      geometry: feature.getGeometry(),\n      image: new ol.style.RegularShape({\n        radius1: radius,\n        radius2: 3,\n        points: 5,\n        angle: Math.PI,\n        fill: clusterFill,\n        stroke: clusterStroke\n      })\n    });\n  }\n\n}"]},"metadata":{},"sourceType":"module"}