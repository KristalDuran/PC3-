{"ast":null,"code":"import * as React from 'react';\nimport * as ol from 'openlayers';\nimport { Util } from \"../util\";\nimport { Map } from '../map';\nexport class Draw extends React.Component {\n  constructor(props) {\n    super(props);\n    this.interaction = void 0;\n    this.options = {\n      clickTolerance: undefined,\n      features: undefined,\n      source: undefined,\n      snapTolerance: undefined,\n      type: undefined,\n      maxPoints: undefined,\n      minPoints: undefined,\n      finishCondition: undefined,\n      style: undefined,\n      geometryFunction: undefined,\n      geometryName: undefined,\n      condition: undefined,\n      freehand: undefined,\n      freehandCondition: undefined,\n      wrapX: undefined\n    };\n    this.events = {\n      'change': undefined,\n      'change:active': undefined,\n      'drawend': undefined,\n      'drawstart': undefined,\n      'propertychange': undefined\n    };\n  }\n\n  render() {\n    return null;\n  }\n\n  componentDidMount() {\n    let options = Util.getOptions(Object['assign'](this.options, this.props));\n    this.interaction = new ol.interaction.Draw(options);\n    this.context.mapComp.interactions.push(this.interaction);\n    let olEvents = Util.getEvents(this.events, this.props);\n\n    for (let eventName in olEvents) {\n      this.interaction.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps !== this.props) {\n      this.context.mapComp.map.removeInteraction(this.interaction);\n      let options = Util.getOptions(Object['assign'](this.options, nextProps));\n      this.interaction = new ol.interaction.Draw(options);\n      this.context.mapComp.map.addInteraction(this.interaction);\n      let olEvents = Util.getEvents(this.events, this.props);\n\n      for (let eventName in olEvents) {\n        this.interaction.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.context.mapComp.map.removeInteraction(this.interaction);\n  }\n\n}\nDraw['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/interactions/draw.tsx"],"names":["React","ol","Util","Map","Draw","Component","constructor","props","interaction","options","clickTolerance","undefined","features","source","snapTolerance","type","maxPoints","minPoints","finishCondition","style","geometryFunction","geometryName","condition","freehand","freehandCondition","wrapX","events","render","componentDidMount","getOptions","Object","context","mapComp","interactions","push","olEvents","getEvents","eventName","on","componentWillReceiveProps","nextProps","map","removeInteraction","addInteraction","componentWillUnmount","PropTypes","instanceOf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ol from 'openlayers';\nimport {Util} from \"../util\";\nimport {Map} from '../map';\n\nexport class Draw extends React.Component<any, any> {\n\n  interaction: ol.interaction.Draw;\n\n  options: any = {\n    clickTolerance: undefined,\n    features: undefined,\n    source: undefined,\n    snapTolerance: undefined,\n    type: undefined,\n    maxPoints: undefined,\n    minPoints: undefined,\n    finishCondition: undefined,\n    style: undefined,\n    geometryFunction: undefined,\n    geometryName: undefined,\n    condition: undefined,\n    freehand: undefined,\n    freehandCondition: undefined,\n    wrapX: undefined\n  };\n\n  events: any = {\n    'change': undefined,\n    'change:active': undefined,\n    'drawend': undefined,\n    'drawstart': undefined,\n    'propertychange': undefined\n  };\n\n  constructor(props) { super(props); }\n\n  render() { return null; }\n\n  componentDidMount () {\n    let options = Util.getOptions(Object['assign'](this.options, this.props));\n    this.interaction = new ol.interaction.Draw(options);\n    this.context.mapComp.interactions.push(this.interaction);\n\n    let olEvents = Util.getEvents(this.events, this.props);\n    for(let eventName in olEvents) {\n      this.interaction.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if(nextProps !== this.props){\n      this.context.mapComp.map.removeInteraction(this.interaction);\n      let options = Util.getOptions(Object['assign'](this.options, nextProps));\n      this.interaction = new ol.interaction.Draw(options);\n      this.context.mapComp.map.addInteraction(this.interaction);\n\n      let olEvents = Util.getEvents(this.events, this.props);\n      for(let eventName in olEvents) {\n        this.interaction.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n  \n  componentWillUnmount () {\n    this.context.mapComp.map.removeInteraction(this.interaction);\n  }\n\n}\n\nDraw['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};\n"]},"metadata":{},"sourceType":"module"}