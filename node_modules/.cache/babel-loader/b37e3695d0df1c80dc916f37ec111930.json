{"ast":null,"code":"import * as React from 'react';\nimport * as ol from 'openlayers';\nimport { Util } from \"../util\";\nimport { Map } from '../map';\nexport class DragZoom extends React.Component {\n  constructor(props) {\n    super(props);\n    this.interaction = void 0;\n    this.options = {\n      className: undefined,\n      condition: undefined,\n      duration: undefined,\n      out: undefined\n    };\n    this.events = {\n      'boxdrag': undefined,\n      'boxend': undefined,\n      'boxstart': undefined,\n      'change': undefined,\n      'change:active': undefined,\n      'propertychange': undefined\n    };\n  }\n\n  render() {\n    return null;\n  }\n\n  componentDidMount() {\n    let options = Util.getOptions(Object['assign'](this.options, this.props));\n    console.log('options', options);\n    this.interaction = new ol.interaction.DragZoom(options);\n    this.context.mapComp.interactions.push(this.interaction);\n    let olEvents = Util.getEvents(this.events, this.props);\n\n    for (let eventName in olEvents) {\n      this.interaction.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps !== this.props) {\n      this.context.mapComp.map.removeInteraction(this.interaction);\n      let options = Util.getOptions(Object['assign'](this.options, nextProps));\n      this.interaction = new ol.interaction.DragZoom(options);\n      this.context.mapComp.map.addInteraction(this.interaction);\n      let olEvents = Util.getEvents(this.events, this.props);\n\n      for (let eventName in olEvents) {\n        this.interaction.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.context.mapComp.map.removeInteraction(this.interaction);\n  }\n\n}\nDragZoom['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};","map":{"version":3,"sources":["/Users/kristalduran/Desktop/PC3 Mapa/pc3-mapa/src/map/interactions/drag-zoom.tsx"],"names":["React","ol","Util","Map","DragZoom","Component","constructor","props","interaction","options","className","undefined","condition","duration","out","events","render","componentDidMount","getOptions","Object","console","log","context","mapComp","interactions","push","olEvents","getEvents","eventName","on","componentWillReceiveProps","nextProps","map","removeInteraction","addInteraction","componentWillUnmount","PropTypes","instanceOf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ol from 'openlayers';\nimport {Util} from \"../util\";\nimport {Map} from '../map';\n\nexport class DragZoom extends React.Component<any, any> {\n\n  interaction: ol.interaction.DragZoom;\n\n  options: any = {\n    className: undefined,\n    condition: undefined,\n    duration: undefined,\n    out: undefined\n  };\n\n  events: any = {\n    'boxdrag': undefined,\n    'boxend': undefined,\n    'boxstart': undefined,\n    'change': undefined,\n    'change:active': undefined,\n    'propertychange': undefined\n  };\n\n  constructor(props) { super(props); }\n\n  render() { return null; }\n\n  componentDidMount () {\n    let options = Util.getOptions(Object['assign'](this.options, this.props));\n    console.log('options', options);\n    this.interaction = new ol.interaction.DragZoom(options);\n    this.context.mapComp.interactions.push(this.interaction)\n    \n    let olEvents = Util.getEvents(this.events, this.props);\n    for(let eventName in olEvents) {\n      this.interaction.on(eventName, olEvents[eventName]);\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if(nextProps !== this.props){\n      this.context.mapComp.map.removeInteraction(this.interaction);\n      let options = Util.getOptions(Object['assign'](this.options, nextProps));\n      this.interaction = new ol.interaction.DragZoom(options);\n      this.context.mapComp.map.addInteraction(this.interaction);\n\n      let olEvents = Util.getEvents(this.events, this.props);\n      for(let eventName in olEvents) {\n        this.interaction.on(eventName, olEvents[eventName]);\n      }\n    }\n  }\n  \n  componentWillUnmount () {\n    this.context.mapComp.map.removeInteraction(this.interaction);\n  }\n\n}\n\nDragZoom['contextTypes'] = {\n  mapComp: React.PropTypes.instanceOf(Map),\n  map: React.PropTypes.instanceOf(ol.Map)\n};"]},"metadata":{},"sourceType":"module"}